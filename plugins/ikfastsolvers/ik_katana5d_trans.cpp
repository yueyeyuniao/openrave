#define IKFAST_NAMESPACE ik_katana5d_trans
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2012-10-29 02:32:56.780586
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=((IkReal(0.139000000000000))*(x0));
x9=((IkReal(0.273000000000000))*(x0));
x10=((IkReal(0.273000000000000))*(x6));
x11=((IkReal(0.139000000000000))*(x6));
x12=((IkReal(0.190000000000000))*(x1));
x13=((x2)*(x3));
x14=((x1)*(x3));
x15=((x1)*(x4));
x16=((x2)*(x4));
eetrans[0]=((((x0)*(x12)))+(((x5)*(((((IkReal(-1.00000000000000))*(x16)*(x9)))+(((x14)*(x9)))))))+(((x13)*(x8)))+(((x7)*(((((x13)*(x9)))+(((x15)*(x9)))))))+(((x15)*(x8))));
IkReal x17=((IkReal(1.00000000000000))*(x10));
IkReal x18=((IkReal(1.00000000000000))*(x11));
eetrans[1]=((((IkReal(-1.00000000000000))*(x12)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x14)*(x17)))+(((x10)*(x16)))))))+(((IkReal(-1.00000000000000))*(x13)*(x18)))+(((IkReal(-1.00000000000000))*(x15)*(x18)))+(((x7)*(((((IkReal(-1.00000000000000))*(x13)*(x17)))+(((IkReal(-1.00000000000000))*(x15)*(x17))))))));
eetrans[2]=((IkReal(0.201500000000000))+(((x7)*(((((IkReal(-0.273000000000000))*(x14)))+(((IkReal(0.273000000000000))*(x16)))))))+(((IkReal(-0.139000000000000))*(x14)))+(((x5)*(((((IkReal(0.273000000000000))*(x15)))+(((IkReal(0.273000000000000))*(x13)))))))+(((IkReal(0.190000000000000))*(x2)))+(((IkReal(0.139000000000000))*(x16))));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3, 4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]);
j4=pfree[1]; cj4=cos(pfree[1]); sj4=sin(pfree[1]);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=((IkReal(-1.00000000000000))*(py));
new_pz=((IkReal(0.201500000000000))+(((IkReal(-1.00000000000000))*(pz))));
px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(py) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x19=IKatan2(py, ((IkReal(-1.00000000000000))*(px)));
j0array[0]=((IkReal(-1.00000000000000))*(x19));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x19))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x20=((((IkReal(0.380000000000000))*(cj0)*(px)))+(((IkReal(0.380000000000000))*(py)*(sj0))));
if( IKabs(((IkReal(-0.380000000000000))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x20) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x21=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-0.380000000000000))*(pz)), x20)));
if( (((((IkReal(0.144400000000000))*((pz)*(pz))))+((x20)*(x20)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((IkReal(0.144400000000000))*((pz)*(pz))))+((x20)*(x20)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.144400000000000))*((pz)*(pz))))+((x20)*(x20))))))):(IkReal)1.0e30))*(((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((IkReal(0.144400000000000))*((pz)*(pz))))+((x20)*(x20)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.144400000000000))*((pz)*(pz))))+((x20)*(x20))))))):(IkReal)1.0e30))*(((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x22=IKasin(((((IKabs(IKabs(IKsqrt(((((IkReal(0.144400000000000))*((pz)*(pz))))+((x20)*(x20)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.144400000000000))*((pz)*(pz))))+((x20)*(x20))))))):(IkReal)1.0e30))*(((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3)))))));
j1array[0]=((((IkReal(-1.00000000000000))*(x21)))+(((IkReal(-1.00000000000000))*(x22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x21)))+(x22));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((IkReal(-367099.000000000))+(((IkReal(-1416051.00000000))*((cj3)*(cj3))))+(((IkReal(-1416051.00000000))*((sj3)*(sj3))))+(((IkReal(-1441986.00000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x23=((IkReal(139000.000000000))*(cj1));
IkReal x24=((py)*(sj0));
IkReal x25=((cj0)*(px));
IkReal x26=((IkReal(273000.000000000))*(cj3));
IkReal x27=((IkReal(139000.000000000))*(sj1));
IkReal x28=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x29=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst1)*(((((pz)*(x27)))+(((cj1)*(x24)*(x26)))+(((x23)*(x25)))+(((x23)*(x24)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x28)))+(((cj1)*(x25)*(x26)))+(((x25)*(x29)))+(((x24)*(x29)))+(((pz)*(sj1)*(x26))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(-26410.0000000000))+(((sj1)*(x25)*(x26)))+(((IkReal(-1.00000000000000))*(x25)*(x28)))+(((IkReal(-1.00000000000000))*(pz)*(x29)))+(((IkReal(-1.00000000000000))*(pz)*(x23)))+(((IkReal(-1.00000000000000))*(x24)*(x28)))+(((x25)*(x27)))+(((x24)*(x27)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)*(x26)))+(((sj1)*(x24)*(x26))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((pz)*(x27)))+(((cj1)*(x24)*(x26)))+(((x23)*(x25)))+(((x23)*(x24)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x28)))+(((cj1)*(x25)*(x26)))+(((x25)*(x29)))+(((x24)*(x29)))+(((pz)*(sj1)*(x26)))))), ((gconst1)*(((IkReal(-26410.0000000000))+(((sj1)*(x25)*(x26)))+(((IkReal(-1.00000000000000))*(x25)*(x28)))+(((IkReal(-1.00000000000000))*(pz)*(x29)))+(((IkReal(-1.00000000000000))*(pz)*(x23)))+(((IkReal(-1.00000000000000))*(x24)*(x28)))+(((x25)*(x27)))+(((x24)*(x27)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)*(x26)))+(((sj1)*(x24)*(x26)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x30=IKcos(j2);
IkReal x31=IKsin(j2);
IkReal x32=((cj0)*(px));
IkReal x33=((py)*(sj0));
IkReal x34=((IkReal(1.00000000000000))*(pz));
IkReal x35=((IkReal(0.273000000000000))*(cj1));
IkReal x36=((IkReal(1.00000000000000))*(cj1));
IkReal x37=((IkReal(0.273000000000000))*(sj1));
IkReal x38=((cj3)*(x30));
IkReal x39=((IkReal(0.139000000000000))*(x31));
IkReal x40=((IkReal(0.139000000000000))*(x30));
IkReal x41=((sj3)*(x31));
IkReal x42=((IkReal(0.273000000000000))*(cj3)*(x31));
IkReal x43=((IkReal(0.273000000000000))*(sj3)*(x30));
evalcond[0]=((IkReal(0.129950000000000))+(((IkReal(0.0528200000000000))*(x30)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3)))+(((IkReal(0.103740000000000))*(x38)))+(((IkReal(0.103740000000000))*(x41))));
evalcond[1]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x40)))+(((IkReal(-1.00000000000000))*(cj1)*(x34)))+(((sj1)*(x32)))+(((sj1)*(x33)))+(((IkReal(-0.273000000000000))*(x38)))+(((IkReal(-0.273000000000000))*(x41))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x43)))+(((IkReal(-1.00000000000000))*(x32)*(x36)))+(((IkReal(-1.00000000000000))*(x33)*(x36)))+(x39)+(x42)+(((IkReal(-1.00000000000000))*(sj1)*(x34))));
evalcond[3]=((((IkReal(-0.190000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x34)))+(((sj1)*(x39)))+(((IkReal(-1.00000000000000))*(cj1)*(x40)))+(((IkReal(-1.00000000000000))*(x35)*(x38)))+(((IkReal(-1.00000000000000))*(x35)*(x41)))+(((IkReal(-1.00000000000000))*(sj3)*(x30)*(x37)))+(((cj3)*(x31)*(x37))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x33)))+(((IkReal(-1.00000000000000))*(x32)))+(((cj1)*(x39)))+(((x37)*(x38)))+(((IkReal(0.190000000000000))*(sj1)))+(((x37)*(x41)))+(((sj1)*(x40)))+(((IkReal(-1.00000000000000))*(sj3)*(x30)*(x35)))+(((cj3)*(x31)*(x35))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x44=((IkReal(13650000.0000000))*(pp));
IkReal x45=((IkReal(5187000.00000000))*(pz)*(sj1));
IkReal x46=((cj0)*(cj1)*(px));
IkReal x47=((IkReal(5187000.00000000))*(cj1)*(py)*(sj0));
if( IKabs(((gconst0)*(((((IkReal(1035953.10000000))*(cj3)*(sj3)))+(((IkReal(-2641000.00000000))*(cj1)*(py)*(sj0)))+(((IkReal(-2641000.00000000))*(x46)))+(((IkReal(-2641000.00000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj3)*(x47)))+(((IkReal(-1.00000000000000))*(cj3)*(x45)))+(((IkReal(-1.00000000000000))*(sj3)*(x44)))+(((IkReal(1773817.50000000))*(sj3)))+(((IkReal(-5187000.00000000))*(cj3)*(x46))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((IkReal(903152.500000000))+(((IkReal(5187000.00000000))*(sj3)*(x46)))+(((IkReal(-6950000.00000000))*(pp)))+(((IkReal(2301280.80000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x44)))+(((sj3)*(x47)))+(((sj3)*(x45)))+(((IkReal(1035953.10000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst0)*(((((IkReal(1035953.10000000))*(cj3)*(sj3)))+(((IkReal(-2641000.00000000))*(cj1)*(py)*(sj0)))+(((IkReal(-2641000.00000000))*(x46)))+(((IkReal(-2641000.00000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj3)*(x47)))+(((IkReal(-1.00000000000000))*(cj3)*(x45)))+(((IkReal(-1.00000000000000))*(sj3)*(x44)))+(((IkReal(1773817.50000000))*(sj3)))+(((IkReal(-5187000.00000000))*(cj3)*(x46)))))), ((gconst0)*(((IkReal(903152.500000000))+(((IkReal(5187000.00000000))*(sj3)*(x46)))+(((IkReal(-6950000.00000000))*(pp)))+(((IkReal(2301280.80000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x44)))+(((sj3)*(x47)))+(((sj3)*(x45)))+(((IkReal(1035953.10000000))*((cj3)*(cj3))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x48=IKcos(j2);
IkReal x49=IKsin(j2);
IkReal x50=((cj0)*(px));
IkReal x51=((py)*(sj0));
IkReal x52=((IkReal(1.00000000000000))*(pz));
IkReal x53=((IkReal(0.273000000000000))*(cj1));
IkReal x54=((IkReal(1.00000000000000))*(cj1));
IkReal x55=((IkReal(0.273000000000000))*(sj1));
IkReal x56=((cj3)*(x48));
IkReal x57=((IkReal(0.139000000000000))*(x49));
IkReal x58=((IkReal(0.139000000000000))*(x48));
IkReal x59=((sj3)*(x49));
IkReal x60=((IkReal(0.273000000000000))*(cj3)*(x49));
IkReal x61=((IkReal(0.273000000000000))*(sj3)*(x48));
evalcond[0]=((IkReal(0.129950000000000))+(((IkReal(0.0528200000000000))*(x48)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3)))+(((IkReal(0.103740000000000))*(x56)))+(((IkReal(0.103740000000000))*(x59))));
evalcond[1]=((IkReal(-0.190000000000000))+(((sj1)*(x50)))+(((sj1)*(x51)))+(((IkReal(-0.273000000000000))*(x56)))+(((IkReal(-0.273000000000000))*(x59)))+(((IkReal(-1.00000000000000))*(x58)))+(((IkReal(-1.00000000000000))*(cj1)*(x52))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x51)*(x54)))+(x57)+(x60)+(((IkReal(-1.00000000000000))*(sj1)*(x52)))+(((IkReal(-1.00000000000000))*(x61)))+(((IkReal(-1.00000000000000))*(x50)*(x54))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x53)*(x59)))+(((IkReal(-1.00000000000000))*(x53)*(x56)))+(((sj1)*(x57)))+(((IkReal(-0.190000000000000))*(cj1)))+(((cj3)*(x49)*(x55)))+(((IkReal(-1.00000000000000))*(sj3)*(x48)*(x55)))+(((IkReal(-1.00000000000000))*(x52)))+(((IkReal(-1.00000000000000))*(cj1)*(x58))));
evalcond[4]=((((cj1)*(x57)))+(((sj1)*(x58)))+(((IkReal(0.190000000000000))*(sj1)))+(((cj3)*(x49)*(x53)))+(((IkReal(-1.00000000000000))*(sj3)*(x48)*(x53)))+(((IkReal(-1.00000000000000))*(x50)))+(((IkReal(-1.00000000000000))*(x51)))+(((x55)*(x59)))+(((x55)*(x56))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x62=((IkReal(0.0528200000000000))+(((IkReal(0.103740000000000))*(cj3))));
if( IKabs(x62) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.103740000000000))*(sj3))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x63=((IkReal(1.00000000000000))*(IKatan2(x62, ((IkReal(0.103740000000000))*(sj3)))));
if( (((((IkReal(0.0107619876000000))*((sj3)*(sj3))))+((x62)*(x62)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((IkReal(0.0107619876000000))*((sj3)*(sj3))))+((x62)*(x62)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0107619876000000))*((sj3)*(sj3))))+((x62)*(x62))))))):(IkReal)1.0e30))*(((IkReal(0.129950000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((IkReal(0.0107619876000000))*((sj3)*(sj3))))+((x62)*(x62)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0107619876000000))*((sj3)*(sj3))))+((x62)*(x62))))))):(IkReal)1.0e30))*(((IkReal(0.129950000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x64=IKasin(((((IKabs(IKabs(IKsqrt(((((IkReal(0.0107619876000000))*((sj3)*(sj3))))+((x62)*(x62)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0107619876000000))*((sj3)*(sj3))))+((x62)*(x62))))))):(IkReal)1.0e30))*(((IkReal(0.129950000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3)))))));
j2array[0]=((((IkReal(-1.00000000000000))*(x63)))+(((IkReal(-1.00000000000000))*(x64))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(x64)+(((IkReal(-1.00000000000000))*(x63))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(-19.0000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-19.0000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-38.0000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-19.0000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x65=((IkReal(0.273000000000000))*(cj3));
IkReal x66=((py)*(sj0));
IkReal x67=((IkReal(0.273000000000000))*(sj3));
IkReal x68=((pz)*(sj2));
IkReal x69=((IkReal(0.139000000000000))*(cj2));
IkReal x70=((cj0)*(px));
IkReal x71=((cj2)*(pz));
IkReal x72=((IkReal(0.139000000000000))*(sj2));
IkReal x73=((cj2)*(x70));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(sj2)*(x67)*(x70)))+(((IkReal(-1.00000000000000))*(x66)*(x69)))+(((IkReal(-0.190000000000000))*(x66)))+(((x67)*(x71)))+(((IkReal(-0.139000000000000))*(x68)))+(((IkReal(-1.00000000000000))*(sj2)*(x66)*(x67)))+(((IkReal(-1.00000000000000))*(x69)*(x70)))+(((IkReal(-1.00000000000000))*(cj2)*(x65)*(x66)))+(((IkReal(-1.00000000000000))*(x65)*(x68)))+(((IkReal(-0.190000000000000))*(x70)))+(((IkReal(-1.00000000000000))*(x65)*(x73))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(0.190000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x66)*(x72)))+(((IkReal(-1.00000000000000))*(x70)*(x72)))+(((cj2)*(x66)*(x67)))+(((x67)*(x73)))+(((x67)*(x68)))+(((IkReal(-1.00000000000000))*(sj2)*(x65)*(x70)))+(((IkReal(-1.00000000000000))*(sj2)*(x65)*(x66)))+(((pz)*(x69)))+(((x65)*(x71))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(sj2)*(x67)*(x70)))+(((IkReal(-1.00000000000000))*(x66)*(x69)))+(((IkReal(-0.190000000000000))*(x66)))+(((x67)*(x71)))+(((IkReal(-0.139000000000000))*(x68)))+(((IkReal(-1.00000000000000))*(sj2)*(x66)*(x67)))+(((IkReal(-1.00000000000000))*(x69)*(x70)))+(((IkReal(-1.00000000000000))*(cj2)*(x65)*(x66)))+(((IkReal(-1.00000000000000))*(x65)*(x68)))+(((IkReal(-0.190000000000000))*(x70)))+(((IkReal(-1.00000000000000))*(x65)*(x73)))))), ((gconst3)*(((((IkReal(0.190000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x66)*(x72)))+(((IkReal(-1.00000000000000))*(x70)*(x72)))+(((cj2)*(x66)*(x67)))+(((x67)*(x73)))+(((x67)*(x68)))+(((IkReal(-1.00000000000000))*(sj2)*(x65)*(x70)))+(((IkReal(-1.00000000000000))*(sj2)*(x65)*(x66)))+(((pz)*(x69)))+(((x65)*(x71)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x74=IKsin(j1);
IkReal x75=IKcos(j1);
IkReal x76=((IkReal(0.273000000000000))*(sj3));
IkReal x77=((cj0)*(px));
IkReal x78=((IkReal(0.273000000000000))*(cj3));
IkReal x79=((py)*(sj0));
IkReal x80=((IkReal(1.00000000000000))*(pz));
IkReal x81=((IkReal(0.139000000000000))*(sj2));
IkReal x82=((sj2)*(x74));
IkReal x83=((IkReal(1.00000000000000))*(x75));
IkReal x84=((cj2)*(x75));
IkReal x85=((cj2)*(x74));
IkReal x86=((IkReal(0.380000000000000))*(x74));
IkReal x87=((sj2)*(x75));
evalcond[0]=((IkReal(0.0577500000000000))+(((x77)*(x86)))+(((x79)*(x86)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3)))+(((IkReal(-0.380000000000000))*(pz)*(x75))));
evalcond[1]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x76)))+(((IkReal(-1.00000000000000))*(x75)*(x80)))+(((x74)*(x77)))+(((x74)*(x79)))+(((IkReal(-0.139000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x78))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x77)*(x83)))+(((IkReal(-1.00000000000000))*(x79)*(x83)))+(((sj2)*(x78)))+(x81)+(((IkReal(-1.00000000000000))*(x74)*(x80)))+(((IkReal(-1.00000000000000))*(cj2)*(x76))));
evalcond[3]=((((x78)*(x82)))+(((x74)*(x81)))+(((IkReal(-1.00000000000000))*(x78)*(x84)))+(((IkReal(-1.00000000000000))*(x76)*(x85)))+(((IkReal(-1.00000000000000))*(x76)*(x87)))+(((IkReal(-0.139000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x80)))+(((IkReal(-0.190000000000000))*(x75))));
evalcond[4]=((((x78)*(x85)))+(((x78)*(x87)))+(((IkReal(0.139000000000000))*(x85)))+(((x76)*(x82)))+(((x75)*(x81)))+(((IkReal(-1.00000000000000))*(x79)))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x76)*(x84)))+(((IkReal(0.190000000000000))*(x74))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x88=((IkReal(50.0000000000000))*(pp));
IkReal x89=((cj0)*(px));
IkReal x90=((py)*(sj0));
IkReal x91=((IkReal(2.64100000000000))*(sj2));
IkReal x92=((IkReal(3.79470000000000))*(cj3));
IkReal x93=((IkReal(5.18700000000000))*(cj3)*(sj2));
IkReal x94=((IkReal(5.18700000000000))*(cj2)*(sj3));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(pz)*(x93)))+(((IkReal(-1.00000000000000))*(pz)*(x91)))+(((x89)*(x92)))+(((pz)*(x94)))+(((x90)*(x92)))+(((IkReal(2.88750000000000))*(x89)))+(((IkReal(2.88750000000000))*(x90)))+(((IkReal(-1.00000000000000))*(x88)*(x89)))+(((IkReal(-1.00000000000000))*(x88)*(x90))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-2.88750000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x92)))+(((x89)*(x94)))+(((IkReal(-1.00000000000000))*(x90)*(x91)))+(((IkReal(-1.00000000000000))*(x90)*(x93)))+(((pz)*(x88)))+(((x90)*(x94)))+(((IkReal(-1.00000000000000))*(x89)*(x93)))+(((IkReal(-1.00000000000000))*(x89)*(x91))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(pz)*(x93)))+(((IkReal(-1.00000000000000))*(pz)*(x91)))+(((x89)*(x92)))+(((pz)*(x94)))+(((x90)*(x92)))+(((IkReal(2.88750000000000))*(x89)))+(((IkReal(2.88750000000000))*(x90)))+(((IkReal(-1.00000000000000))*(x88)*(x89)))+(((IkReal(-1.00000000000000))*(x88)*(x90)))))), ((gconst2)*(((((IkReal(-2.88750000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x92)))+(((x89)*(x94)))+(((IkReal(-1.00000000000000))*(x90)*(x91)))+(((IkReal(-1.00000000000000))*(x90)*(x93)))+(((pz)*(x88)))+(((x90)*(x94)))+(((IkReal(-1.00000000000000))*(x89)*(x93)))+(((IkReal(-1.00000000000000))*(x89)*(x91)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x95=IKsin(j1);
IkReal x96=IKcos(j1);
IkReal x97=((IkReal(0.273000000000000))*(sj3));
IkReal x98=((cj0)*(px));
IkReal x99=((IkReal(0.273000000000000))*(cj3));
IkReal x100=((py)*(sj0));
IkReal x101=((IkReal(1.00000000000000))*(pz));
IkReal x102=((IkReal(0.139000000000000))*(sj2));
IkReal x103=((sj2)*(x95));
IkReal x104=((IkReal(1.00000000000000))*(x96));
IkReal x105=((cj2)*(x96));
IkReal x106=((cj2)*(x95));
IkReal x107=((IkReal(0.380000000000000))*(x95));
IkReal x108=((sj2)*(x96));
evalcond[0]=((IkReal(0.0577500000000000))+(((x107)*(x98)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.380000000000000))*(pz)*(x96)))+(((IkReal(0.0758940000000000))*(cj3)))+(((x100)*(x107))));
evalcond[1]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x97)))+(((x100)*(x95)))+(((IkReal(-1.00000000000000))*(x101)*(x96)))+(((x95)*(x98)))+(((IkReal(-1.00000000000000))*(cj2)*(x99)))+(((IkReal(-0.139000000000000))*(cj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x100)*(x104)))+(x102)+(((IkReal(-1.00000000000000))*(x101)*(x95)))+(((IkReal(-1.00000000000000))*(cj2)*(x97)))+(((IkReal(-1.00000000000000))*(x104)*(x98)))+(((sj2)*(x99))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x96)))+(((x103)*(x99)))+(((x102)*(x95)))+(((IkReal(-0.139000000000000))*(x105)))+(((IkReal(-1.00000000000000))*(x101)))+(((IkReal(-1.00000000000000))*(x105)*(x99)))+(((IkReal(-1.00000000000000))*(x108)*(x97)))+(((IkReal(-1.00000000000000))*(x106)*(x97))));
evalcond[4]=((((IkReal(0.139000000000000))*(x106)))+(((x103)*(x97)))+(((x102)*(x96)))+(((IkReal(-1.00000000000000))*(x105)*(x97)))+(((x106)*(x99)))+(((x108)*(x99)))+(((IkReal(-1.00000000000000))*(x98)))+(((IkReal(0.190000000000000))*(x95)))+(((IkReal(-1.00000000000000))*(x100))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x109=((IkReal(0.0528200000000000))+(((IkReal(0.103740000000000))*(cj3))));
if( IKabs(x109) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.103740000000000))*(sj3))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x110=((IkReal(1.00000000000000))*(IKatan2(x109, ((IkReal(0.103740000000000))*(sj3)))));
if( ((((x109)*(x109))+(((IkReal(0.0107619876000000))*((sj3)*(sj3)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x109)*(x109))+(((IkReal(0.0107619876000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x109)*(x109))+(((IkReal(0.0107619876000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*(((IkReal(0.129950000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x109)*(x109))+(((IkReal(0.0107619876000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x109)*(x109))+(((IkReal(0.0107619876000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*(((IkReal(0.129950000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x111=IKasin(((((IKabs(IKabs(IKsqrt((((x109)*(x109))+(((IkReal(0.0107619876000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x109)*(x109))+(((IkReal(0.0107619876000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*(((IkReal(0.129950000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3)))))));
j2array[0]=((((IkReal(-1.00000000000000))*(x110)))+(((IkReal(-1.00000000000000))*(x111))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x110)))+(x111));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(-19.0000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-19.0000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-38.0000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-19.0000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x112=((IkReal(0.273000000000000))*(cj3));
IkReal x113=((py)*(sj0));
IkReal x114=((IkReal(0.273000000000000))*(sj3));
IkReal x115=((pz)*(sj2));
IkReal x116=((IkReal(0.139000000000000))*(cj2));
IkReal x117=((cj0)*(px));
IkReal x118=((cj2)*(pz));
IkReal x119=((IkReal(0.139000000000000))*(sj2));
IkReal x120=((cj2)*(x117));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x112)*(x115)))+(((IkReal(-1.00000000000000))*(cj2)*(x112)*(x113)))+(((IkReal(-0.139000000000000))*(x115)))+(((x114)*(x118)))+(((IkReal(-1.00000000000000))*(x116)*(x117)))+(((IkReal(-1.00000000000000))*(x112)*(x120)))+(((IkReal(-1.00000000000000))*(x113)*(x116)))+(((IkReal(-1.00000000000000))*(sj2)*(x114)*(x117)))+(((IkReal(-1.00000000000000))*(sj2)*(x113)*(x114)))+(((IkReal(-0.190000000000000))*(x117)))+(((IkReal(-0.190000000000000))*(x113))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((x112)*(x118)))+(((IkReal(0.190000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x117)*(x119)))+(((cj2)*(x113)*(x114)))+(((pz)*(x116)))+(((x114)*(x115)))+(((IkReal(-1.00000000000000))*(x113)*(x119)))+(((x114)*(x120)))+(((IkReal(-1.00000000000000))*(sj2)*(x112)*(x117)))+(((IkReal(-1.00000000000000))*(sj2)*(x112)*(x113))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x112)*(x115)))+(((IkReal(-1.00000000000000))*(cj2)*(x112)*(x113)))+(((IkReal(-0.139000000000000))*(x115)))+(((x114)*(x118)))+(((IkReal(-1.00000000000000))*(x116)*(x117)))+(((IkReal(-1.00000000000000))*(x112)*(x120)))+(((IkReal(-1.00000000000000))*(x113)*(x116)))+(((IkReal(-1.00000000000000))*(sj2)*(x114)*(x117)))+(((IkReal(-1.00000000000000))*(sj2)*(x113)*(x114)))+(((IkReal(-0.190000000000000))*(x117)))+(((IkReal(-0.190000000000000))*(x113)))))), ((gconst3)*(((((x112)*(x118)))+(((IkReal(0.190000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x117)*(x119)))+(((cj2)*(x113)*(x114)))+(((pz)*(x116)))+(((x114)*(x115)))+(((IkReal(-1.00000000000000))*(x113)*(x119)))+(((x114)*(x120)))+(((IkReal(-1.00000000000000))*(sj2)*(x112)*(x117)))+(((IkReal(-1.00000000000000))*(sj2)*(x112)*(x113)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x121=IKsin(j1);
IkReal x122=IKcos(j1);
IkReal x123=((IkReal(0.273000000000000))*(sj3));
IkReal x124=((cj0)*(px));
IkReal x125=((IkReal(0.273000000000000))*(cj3));
IkReal x126=((py)*(sj0));
IkReal x127=((IkReal(1.00000000000000))*(pz));
IkReal x128=((IkReal(0.139000000000000))*(sj2));
IkReal x129=((sj2)*(x121));
IkReal x130=((IkReal(1.00000000000000))*(x122));
IkReal x131=((cj2)*(x122));
IkReal x132=((cj2)*(x121));
IkReal x133=((IkReal(0.380000000000000))*(x121));
IkReal x134=((sj2)*(x122));
evalcond[0]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x124)*(x133)))+(((IkReal(-0.380000000000000))*(pz)*(x122)))+(((x126)*(x133)))+(((IkReal(0.0758940000000000))*(cj3))));
evalcond[1]=((IkReal(-0.190000000000000))+(((x121)*(x126)))+(((x121)*(x124)))+(((IkReal(-1.00000000000000))*(sj2)*(x123)))+(((IkReal(-1.00000000000000))*(cj2)*(x125)))+(((IkReal(-1.00000000000000))*(x122)*(x127)))+(((IkReal(-0.139000000000000))*(cj2))));
evalcond[2]=((((sj2)*(x125)))+(((IkReal(-1.00000000000000))*(x126)*(x130)))+(((IkReal(-1.00000000000000))*(cj2)*(x123)))+(((IkReal(-1.00000000000000))*(x124)*(x130)))+(x128)+(((IkReal(-1.00000000000000))*(x121)*(x127))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x123)*(x134)))+(((IkReal(-1.00000000000000))*(x123)*(x132)))+(((IkReal(-0.139000000000000))*(x131)))+(((x121)*(x128)))+(((IkReal(-1.00000000000000))*(x127)))+(((x125)*(x129)))+(((IkReal(-1.00000000000000))*(x125)*(x131)))+(((IkReal(-0.190000000000000))*(x122))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x123)*(x131)))+(((IkReal(0.139000000000000))*(x132)))+(((x122)*(x128)))+(((x125)*(x132)))+(((x125)*(x134)))+(((x123)*(x129)))+(((IkReal(-1.00000000000000))*(x124)))+(((IkReal(-1.00000000000000))*(x126)))+(((IkReal(0.190000000000000))*(x121))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x135=((IkReal(50.0000000000000))*(pp));
IkReal x136=((cj0)*(px));
IkReal x137=((py)*(sj0));
IkReal x138=((IkReal(2.64100000000000))*(sj2));
IkReal x139=((IkReal(3.79470000000000))*(cj3));
IkReal x140=((IkReal(5.18700000000000))*(cj3)*(sj2));
IkReal x141=((IkReal(5.18700000000000))*(cj2)*(sj3));
if( IKabs(((gconst2)*(((((pz)*(x141)))+(((IkReal(-1.00000000000000))*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(x135)*(x136)))+(((IkReal(-1.00000000000000))*(pz)*(x138)))+(((IkReal(2.88750000000000))*(x136)))+(((IkReal(2.88750000000000))*(x137)))+(((IkReal(-1.00000000000000))*(pz)*(x140)))+(((x137)*(x139)))+(((x136)*(x139))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-2.88750000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x137)*(x140)))+(((IkReal(-1.00000000000000))*(pz)*(x139)))+(((x136)*(x141)))+(((x137)*(x141)))+(((IkReal(-1.00000000000000))*(x137)*(x138)))+(((pz)*(x135)))+(((IkReal(-1.00000000000000))*(x136)*(x138)))+(((IkReal(-1.00000000000000))*(x136)*(x140))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst2)*(((((pz)*(x141)))+(((IkReal(-1.00000000000000))*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(x135)*(x136)))+(((IkReal(-1.00000000000000))*(pz)*(x138)))+(((IkReal(2.88750000000000))*(x136)))+(((IkReal(2.88750000000000))*(x137)))+(((IkReal(-1.00000000000000))*(pz)*(x140)))+(((x137)*(x139)))+(((x136)*(x139)))))), ((gconst2)*(((((IkReal(-2.88750000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x137)*(x140)))+(((IkReal(-1.00000000000000))*(pz)*(x139)))+(((x136)*(x141)))+(((x137)*(x141)))+(((IkReal(-1.00000000000000))*(x137)*(x138)))+(((pz)*(x135)))+(((IkReal(-1.00000000000000))*(x136)*(x138)))+(((IkReal(-1.00000000000000))*(x136)*(x140)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x142=IKsin(j1);
IkReal x143=IKcos(j1);
IkReal x144=((IkReal(0.273000000000000))*(sj3));
IkReal x145=((cj0)*(px));
IkReal x146=((IkReal(0.273000000000000))*(cj3));
IkReal x147=((py)*(sj0));
IkReal x148=((IkReal(1.00000000000000))*(pz));
IkReal x149=((IkReal(0.139000000000000))*(sj2));
IkReal x150=((sj2)*(x142));
IkReal x151=((IkReal(1.00000000000000))*(x143));
IkReal x152=((cj2)*(x143));
IkReal x153=((cj2)*(x142));
IkReal x154=((IkReal(0.380000000000000))*(x142));
IkReal x155=((sj2)*(x143));
evalcond[0]=((IkReal(0.0577500000000000))+(((x145)*(x154)))+(((IkReal(-0.380000000000000))*(pz)*(x143)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0758940000000000))*(cj3)))+(((x147)*(x154))));
evalcond[1]=((IkReal(-0.190000000000000))+(((x142)*(x145)))+(((x142)*(x147)))+(((IkReal(-1.00000000000000))*(x143)*(x148)))+(((IkReal(-1.00000000000000))*(cj2)*(x146)))+(((IkReal(-1.00000000000000))*(sj2)*(x144)))+(((IkReal(-0.139000000000000))*(cj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x142)*(x148)))+(x149)+(((IkReal(-1.00000000000000))*(cj2)*(x144)))+(((IkReal(-1.00000000000000))*(x147)*(x151)))+(((IkReal(-1.00000000000000))*(x145)*(x151)))+(((sj2)*(x146))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x148)))+(((x142)*(x149)))+(((IkReal(-0.190000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x144)*(x153)))+(((IkReal(-1.00000000000000))*(x144)*(x155)))+(((IkReal(-0.139000000000000))*(x152)))+(((x146)*(x150)))+(((IkReal(-1.00000000000000))*(x146)*(x152))));
evalcond[4]=((((IkReal(0.190000000000000))*(x142)))+(((x144)*(x150)))+(((IkReal(-1.00000000000000))*(x144)*(x152)))+(((x146)*(x153)))+(((x146)*(x155)))+(((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x147)))+(((IkReal(0.139000000000000))*(x153)))+(((x143)*(x149))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "afe50514bf09aff5f2a84beb078bafbd"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
