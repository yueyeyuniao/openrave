#define IKFAST_NAMESPACE ik_barrettwam
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2012-10-29 02:33:55.873827
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.0450000000000000))*(x1));
x15=((IkReal(1.00000000000000))*(x5));
x16=((IkReal(0.300000000000000))*(x1));
x17=((IkReal(1.00000000000000))*(x11));
x18=((IkReal(0.0450000000000000))*(x5));
x19=((IkReal(1.00000000000000))*(x1));
x20=((IkReal(0.220000000000000))*(x8));
x21=((IkReal(1.00000000000000))*(x12));
x22=((IkReal(0.220000000000000))*(x5));
x23=((IkReal(1.00000000000000))*(x6));
x24=((IkReal(0.220000000000000))*(x9));
x25=((IkReal(0.220000000000000))*(x6));
x26=((x0)*(x4));
x27=((x0)*(x2));
x28=((x2)*(x7));
x29=((x3)*(x4));
x30=((x0)*(x7));
x31=((x2)*(x3));
x32=((x3)*(x7));
x33=((IkReal(1.00000000000000))*(x29));
x34=((IkReal(0.0450000000000000))*(x29));
x35=((IkReal(0.0450000000000000))*(x26));
x36=((x19)*(x6));
x37=((x32)*(x6));
x38=((x4)*(x7)*(x9));
x39=((x15)*(x30));
x40=((x23)*(x30));
x41=((x14)*(x27));
x42=((x15)*(x32));
x43=((x23)*(x32));
x44=((x14)*(x31));
x45=((((IkReal(-1.00000000000000))*(x33)))+(((x1)*(x27))));
x46=((x26)+(((x1)*(x31))));
x47=((((IkReal(-1.00000000000000))*(x19)*(x29)))+(x27));
x48=((((IkReal(-1.00000000000000))*(x36)))+(((x28)*(x5))));
x49=((((IkReal(-1.00000000000000))*(x19)*(x27)))+(x33));
x50=((((IkReal(-1.00000000000000))*(x31)))+(((IkReal(-1.00000000000000))*(x19)*(x26))));
x51=((((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x19)*(x31))));
x52=((((x1)*(x15)))+(((x23)*(x28))));
x53=((IkReal(-1.00000000000000))*(x52));
x54=((x35)+(x44));
x55=((x46)*(x6));
x56=((x11)*(x48));
x57=((x45)*(x6));
x58=((x5)*(x51));
x59=((x50)*(x9));
x60=((((IkReal(-1.00000000000000))*(x39)))+(x57));
x61=((((IkReal(-1.00000000000000))*(x42)))+(x55));
x62=((((IkReal(-1.00000000000000))*(x40)))+(((x49)*(x5))));
x63=((((IkReal(-1.00000000000000))*(x43)))+(x58));
x64=((((x4)*(x7)*(x8)))+(((x52)*(x9))));
x65=((((x53)*(x8)))+(x38));
x66=((x11)*(x63));
x67=((((x47)*(x9)))+(((x61)*(x8))));
x68=((((x9)*(((x42)+(((IkReal(-1.00000000000000))*(x23)*(x46)))))))+(((x47)*(x8))));
x69=((((x60)*(x8)))+(x59));
x70=((x12)*(x67));
x71=((((x50)*(x8)))+(((x9)*(((x39)+(((IkReal(-1.00000000000000))*(x57))))))));
eerot[0]=((((x10)*(x71)))+(((x13)*(((((x12)*(x69)))+(((x11)*(x62))))))));
eerot[1]=((((x13)*(x71)))+(((x10)*(((((IkReal(-1.00000000000000))*(x21)*(x69)))+(((IkReal(-1.00000000000000))*(x17)*(x62))))))));
eerot[2]=((((x11)*(x69)))+(((x12)*(((((IkReal(-1.00000000000000))*(x15)*(x49)))+(x40))))));
eetrans[0]=((IkReal(0.220000000000000))+(((IkReal(-1.00000000000000))*(x34)))+(((x11)*(((((x20)*(x60)))+(((x24)*(x50)))))))+(((x5)*(((((IkReal(-0.300000000000000))*(x29)))+(((x16)*(x27)))))))+(((x18)*(x30)))+(((x12)*(((((IkReal(-1.00000000000000))*(x22)*(x49)))+(((x25)*(x30)))))))+(((IkReal(0.300000000000000))*(x30)*(x6)))+(((IkReal(0.550000000000000))*(x30)))+(x41)+(((x6)*(((((IkReal(-1.00000000000000))*(x41)))+(x34))))));
eerot[3]=((((x13)*(((x70)+(x66)))))+(((x10)*(x68))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x21)*(x67)))+(((IkReal(-1.00000000000000))*(x17)*(x63)))))))+(((x13)*(x68))));
eerot[5]=((((x12)*(((x43)+(((IkReal(-1.00000000000000))*(x15)*(x51)))))))+(((x11)*(x67))));
eetrans[1]=((IkReal(0.140000000000000))+(((x18)*(x32)))+(((IkReal(-1.00000000000000))*(x54)*(x6)))+(((x11)*(((((x20)*(x61)))+(((x24)*(x47)))))))+(((x12)*(((((x25)*(x32)))+(((IkReal(-1.00000000000000))*(x22)*(x51)))))))+(((IkReal(0.550000000000000))*(x32)))+(x54)+(((x5)*(((((x16)*(x31)))+(((IkReal(0.300000000000000))*(x26)))))))+(((IkReal(0.300000000000000))*(x37))));
eerot[6]=((((x10)*(x64)))+(((x13)*(((((x12)*(x65)))+(x56))))));
eerot[7]=((((x13)*(x64)))+(((x10)*(((((IkReal(-1.00000000000000))*(x17)*(x48)))+(((IkReal(-1.00000000000000))*(x21)*(x65))))))));
eerot[8]=((((x11)*(x65)))+(((x12)*(((((IkReal(-1.00000000000000))*(x15)*(x28)))+(x36))))));
IkReal x72=((IkReal(0.0450000000000000))*(x28));
eetrans[2]=((IkReal(0.346000000000000))+(((IkReal(-0.300000000000000))*(x28)*(x5)))+(((IkReal(-1.00000000000000))*(x72)))+(((x14)*(x5)))+(((x12)*(((((x1)*(x25)))+(((IkReal(-1.00000000000000))*(x22)*(x28)))))))+(((x16)*(x6)))+(((x6)*(x72)))+(((IkReal(0.550000000000000))*(x1)))+(((x11)*(((((x20)*(x53)))+(((x24)*(x4)*(x7))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.220000000000000))+(((IkReal(-0.220000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.140000000000000))+(((IkReal(-0.220000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.346000000000000))+(((IkReal(-0.220000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x73=IKasin(((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp)))));
j3array[0]=((IkReal(-1.34027003705633))+(((IkReal(-1.00000000000000))*(x73))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.80132261653346))+(x73));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x74=(cj2)*(cj2);
IkReal x75=(sj3)*(sj3);
IkReal x76=(cj3)*(cj3);
IkReal x77=((IkReal(13.3333333333333))*(cj3)*(sj3));
dummyeval[0]=((IkReal(149.382716049383))+(((IkReal(44.4444444444444))*(x76)))+(((IkReal(24.4444444444444))*(sj3)))+(((IkReal(13.3333333333333))*(sj3)*(x74)))+(((IkReal(-2.00000000000000))*(cj3)*(x74)))+(((IkReal(44.4444444444444))*(x74)*(x75)))+(((IkReal(-1.00000000000000))*(x74)*(x77)))+(x77)+(x75)+(x74)+(((x74)*(x76)))+(((IkReal(162.962962962963))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x78=((IkReal(0.0450000000000000))*(cj2));
IkReal x79=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
IkReal x80=((((IkReal(-1.00000000000000))*(cj3)*(x78)))+(((IkReal(0.300000000000000))*(cj2)*(sj3)))+(x78));
if( IKabs(x79) < IKFAST_ATAN2_MAGTHRESH && IKabs(x80) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=((IkReal(1.00000000000000))*(IKatan2(x79, x80)));
if( ((((x79)*(x79))+((x80)*(x80)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x82=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x82)))+(((IkReal(-1.00000000000000))*(x81))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(x82)+(((IkReal(-1.00000000000000))*(x81))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x83=((IkReal(1.00000000000000))*(cj2)*(sj1));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x83)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x83)*((py)*(py))))));
IkReal x84=((IkReal(1.00000000000000))*(cj2)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x84)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x84)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x85=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x85;
evalcond[3]=x85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x86=((IkReal(110.000000000000))*(pz));
IkReal x87=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst5)*(((((px)*(x86)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x87))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x86)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x87))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((px)*(x86)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x87)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x86)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x87)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x88=IKsin(j0);
IkReal x89=IKcos(j0);
IkReal x90=((px)*(x88));
IkReal x91=((py)*(x89));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x90)+(((IkReal(-1.00000000000000))*(x91)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x88)))+(((px)*(x89))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x91)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x90))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x442=((IkReal(0.300000000000000))*(sj3));
IkReal x443=((IkReal(0.0450000000000000))*(px));
IkReal x444=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x443)))+(((px)*(x442)))+(x443))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x444)))+(((cj3)*(x444)))+(((IkReal(-1.00000000000000))*(py)*(x442))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x443)))+(((px)*(x442)))+(x443)))), ((gconst4)*(((((IkReal(-1.00000000000000))*(x444)))+(((cj3)*(x444)))+(((IkReal(-1.00000000000000))*(py)*(x442)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x445=IKsin(j0);
IkReal x446=IKcos(j0);
IkReal x447=((px)*(x445));
IkReal x448=((py)*(x446));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x448)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x447)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x446)))+(((py)*(x445))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x448)))+(((IkReal(-0.0900000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x449=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x449;
evalcond[3]=x449;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x450=((IkReal(110.000000000000))*(pz));
IkReal x451=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst7)*(((((px)*(x450)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x451))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x450)))+(((py)*(x451))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((px)*(x450)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x451)))))), ((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x450)))+(((py)*(x451)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x452=IKsin(j0);
IkReal x453=IKcos(j0);
IkReal x454=((px)*(x452));
IkReal x455=((py)*(x453));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x454)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x453)))+(((py)*(x452))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x455)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x456=((IkReal(0.300000000000000))*(sj3));
IkReal x457=((IkReal(0.0450000000000000))*(px));
IkReal x458=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst6)*(((x457)+(((px)*(x456)))+(((IkReal(-1.00000000000000))*(cj3)*(x457))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((cj3)*(x458)))+(((IkReal(-1.00000000000000))*(x458)))+(((IkReal(-1.00000000000000))*(py)*(x456))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((x457)+(((px)*(x456)))+(((IkReal(-1.00000000000000))*(cj3)*(x457)))))), ((gconst6)*(((((cj3)*(x458)))+(((IkReal(-1.00000000000000))*(x458)))+(((IkReal(-1.00000000000000))*(py)*(x456)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x459=IKsin(j0);
IkReal x460=IKcos(j0);
IkReal x461=((px)*(x459));
IkReal x462=((py)*(x460));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x461)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x460)))+(((py)*(x459))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x461))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x463=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x463;
evalcond[3]=x463;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x464=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x464)))+(((IkReal(2.36111111111111))*(x464)))+(((IkReal(11.1111111111111))*(pp)*(x464))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x465=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x466=((IkReal(0.0450000000000000))*(x465));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x465)))+(x466)+(((IkReal(-1.00000000000000))*(cj3)*(x466))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x467=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x467;
evalcond[3]=x467;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x468=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x468)))+(((IkReal(2.36111111111111))*(x468)))+(((IkReal(11.1111111111111))*(pp)*(x468))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x469=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x470=((IkReal(0.0450000000000000))*(x469));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x469)))+(x470)+(((IkReal(-1.00000000000000))*(cj3)*(x470))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x471=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x471;
evalcond[3]=x471;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x472=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x472)))+(((IkReal(-11.1111111111111))*(pp)*(x472)))+(((IkReal(-2.36111111111111))*(x472))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x473=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x474=((IkReal(0.0450000000000000))*(x473));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x473)))+(((cj3)*(x474)))+(((IkReal(-1.00000000000000))*(x474))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x475=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x475;
evalcond[3]=x475;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x476=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x476)))+(((IkReal(-11.1111111111111))*(pp)*(x476)))+(((IkReal(-2.36111111111111))*(x476))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x477=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x478=((IkReal(0.0450000000000000))*(x477));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x477)))+(((cj3)*(x478)))+(((IkReal(-1.00000000000000))*(x478))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x479=((IkReal(0.0450000000000000))*(sj3));
IkReal x480=((IkReal(0.300000000000000))*(cj3));
IkReal x481=((x480)+(x479));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x481)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x482=((IkReal(110.000000000000))*(pz));
IkReal x483=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(px)*(x482)))+(((IkReal(-1.00000000000000))*(px)*(x483)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((py)*(x482)))+(((py)*(x483)))+(((IkReal(21.2500000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(px)*(x482)))+(((IkReal(-1.00000000000000))*(px)*(x483)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst9)*(((((py)*(x482)))+(((py)*(x483)))+(((IkReal(21.2500000000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x484=IKcos(j0);
IkReal x485=IKsin(j0);
IkReal x486=((px)*(x485));
IkReal x487=((IkReal(1.00000000000000))*(x484));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x486)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x487))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x485)))+(((IkReal(-1.00000000000000))*(px)*(x487))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x486)))+(((IkReal(0.0900000000000000))*(py)*(x484))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x488=((IkReal(0.300000000000000))*(sj3));
IkReal x489=((IkReal(0.0450000000000000))*(px));
IkReal x490=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst8)*(((((px)*(x488)))+(((IkReal(-1.00000000000000))*(cj3)*(x489)))+(x489))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(x490)))+(((cj3)*(x490)))+(((IkReal(-1.00000000000000))*(py)*(x488))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst8)*(((((px)*(x488)))+(((IkReal(-1.00000000000000))*(cj3)*(x489)))+(x489)))), ((gconst8)*(((((IkReal(-1.00000000000000))*(x490)))+(((cj3)*(x490)))+(((IkReal(-1.00000000000000))*(py)*(x488)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x491=IKcos(j0);
IkReal x492=IKsin(j0);
IkReal x493=((px)*(x492));
IkReal x494=((IkReal(1.00000000000000))*(x491));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x493)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x494))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x494)))+(((IkReal(-1.00000000000000))*(py)*(x492))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x491)))+(((IkReal(-0.0900000000000000))*(x493))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x495=((IkReal(0.0450000000000000))*(sj3));
IkReal x496=((IkReal(0.300000000000000))*(cj3));
IkReal x497=((x496)+(x495));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x497)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x497)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x498=((IkReal(110.000000000000))*(pz));
IkReal x499=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(px)*(x499)))+(((IkReal(-1.00000000000000))*(px)*(x498)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((py)*(x499)))+(((py)*(x498)))+(((IkReal(21.2500000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(px)*(x499)))+(((IkReal(-1.00000000000000))*(px)*(x498)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst11)*(((((py)*(x499)))+(((py)*(x498)))+(((IkReal(21.2500000000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x500=IKcos(j0);
IkReal x501=IKsin(j0);
IkReal x502=((px)*(x501));
IkReal x503=((IkReal(1.00000000000000))*(x500));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x503)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x502)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x501)))+(((IkReal(-1.00000000000000))*(px)*(x503))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x502)))+(((IkReal(0.0900000000000000))*(py)*(x500)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x504=((IkReal(0.300000000000000))*(sj3));
IkReal x505=((IkReal(0.0450000000000000))*(px));
IkReal x506=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst10)*(((x505)+(((px)*(x504)))+(((IkReal(-1.00000000000000))*(cj3)*(x505))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(py)*(x504)))+(((cj3)*(x506)))+(((IkReal(-1.00000000000000))*(x506))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst10)*(((x505)+(((px)*(x504)))+(((IkReal(-1.00000000000000))*(cj3)*(x505)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(py)*(x504)))+(((cj3)*(x506)))+(((IkReal(-1.00000000000000))*(x506)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x507=IKcos(j0);
IkReal x508=IKsin(j0);
IkReal x509=((px)*(x508));
IkReal x510=((IkReal(1.00000000000000))*(x507));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x509)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x510))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x510)))+(((IkReal(-1.00000000000000))*(py)*(x508))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x509)))+(((IkReal(0.0900000000000000))*(py)*(x507)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x511=((IkReal(0.0450000000000000))*(sj3));
IkReal x512=((IkReal(0.300000000000000))*(cj3));
IkReal x513=((x512)+(x511));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x513))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x513));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x514=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x514)))+(((IkReal(2.36111111111111))*(x514)))+(((IkReal(12.2222222222222))*(pz)*(x514))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x515=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x516=((IkReal(0.0450000000000000))*(x515));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x515)))+(((IkReal(-1.00000000000000))*(cj3)*(x516)))+(x516));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x517=((IkReal(0.0450000000000000))*(sj3));
IkReal x518=((IkReal(0.300000000000000))*(cj3));
IkReal x519=((x518)+(x517));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x519))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x519));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x520=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x520)))+(((IkReal(12.2222222222222))*(pz)*(x520)))+(((IkReal(11.1111111111111))*(pp)*(x520))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x521=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x522=((IkReal(0.0450000000000000))*(x521));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x522)))+(x522)+(((IkReal(0.300000000000000))*(sj3)*(x521))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x523=((IkReal(0.0450000000000000))*(sj3));
IkReal x524=((IkReal(0.300000000000000))*(cj3));
IkReal x525=((x523)+(x524));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x525)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x525));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x526=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x526)))+(((IkReal(-11.1111111111111))*(pp)*(x526)))+(((IkReal(-12.2222222222222))*(pz)*(x526))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x527=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x528=((IkReal(0.0450000000000000))*(x527));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x527)))+(((IkReal(-1.00000000000000))*(x528)))+(((cj3)*(x528))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x529=((IkReal(0.0450000000000000))*(sj3));
IkReal x530=((IkReal(0.300000000000000))*(cj3));
IkReal x531=((x530)+(x529));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x531));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x532=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x532)))+(((IkReal(-11.1111111111111))*(pp)*(x532)))+(((IkReal(-12.2222222222222))*(pz)*(x532))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x533=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x534=((IkReal(0.0450000000000000))*(x533));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x533)))+(((IkReal(-1.00000000000000))*(x534)))+(((cj3)*(x534))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x535=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x535;
evalcond[3]=x535;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x536=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x536)))+(((IkReal(2.36111111111111))*(x536)))+(((IkReal(-12.2222222222222))*(pz)*(x536))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x537=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x538=((IkReal(0.0450000000000000))*(x537));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x538)))+(x538)+(((IkReal(0.300000000000000))*(sj3)*(x537))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x539=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x539;
evalcond[3]=x539;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x540=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x540)))+(((IkReal(-12.2222222222222))*(pz)*(x540)))+(((IkReal(11.1111111111111))*(pp)*(x540))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x541=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x542=((IkReal(0.0450000000000000))*(x541));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x542)))+(x542)+(((IkReal(0.300000000000000))*(sj3)*(x541))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x543=IKabs(px);
IkReal x544=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x543)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x543)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x544;
evalcond[3]=x544;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x545=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x545)))+(((IkReal(-12.2222222222222))*(pz)*(x545)))+(((IkReal(11.1111111111111))*(pp)*(x545))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x546=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x547=((IkReal(0.0450000000000000))*(x546));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x547)))+(x547)+(((IkReal(0.300000000000000))*(sj3)*(x546))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x548=IKabs(px);
IkReal x549=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x548)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x548)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x549;
evalcond[3]=x549;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x550=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x550)))+(((IkReal(2.36111111111111))*(x550)))+(((IkReal(-12.2222222222222))*(pz)*(x550))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x551=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x552=((IkReal(0.0450000000000000))*(x551));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x551)))+(((IkReal(-1.00000000000000))*(cj3)*(x552)))+(x552));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x553=((IkReal(0.0450000000000000))*(sj3));
IkReal x554=((IkReal(0.300000000000000))*(cj3));
IkReal x555=((x553)+(x554));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x555))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x555));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x556=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x556)))+(((IkReal(2.36111111111111))*(x556)))+(((IkReal(12.2222222222222))*(pz)*(x556))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x557=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x558=((IkReal(0.0450000000000000))*(x557));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x557)))+(((IkReal(-1.00000000000000))*(cj3)*(x558)))+(x558));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x559=((IkReal(0.0450000000000000))*(sj3));
IkReal x560=((IkReal(0.300000000000000))*(cj3));
IkReal x561=((x559)+(x560));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x561))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x561));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x562=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x562)))+(((IkReal(2.36111111111111))*(x562)))+(((IkReal(11.1111111111111))*(pp)*(x562))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x563=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x564=((IkReal(0.0450000000000000))*(x563));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x564)))+(((IkReal(0.300000000000000))*(sj3)*(x563)))+(x564));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x565=IKabs(px);
IkReal x566=((IkReal(0.0450000000000000))*(sj3));
IkReal x567=((IkReal(0.300000000000000))*(cj3));
IkReal x568=((x566)+(x567));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x565))))+(IKabs(((x565)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x568))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x568));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x569=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x569)))+(((IkReal(2.36111111111111))*(x569)))+(((IkReal(11.1111111111111))*(pp)*(x569))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x570=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x571=((IkReal(0.0450000000000000))*(x570));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x571)))+(x571)+(((IkReal(0.300000000000000))*(sj3)*(x570))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x572=IKabs(px);
IkReal x573=((IkReal(0.0450000000000000))*(sj3));
IkReal x574=((IkReal(0.300000000000000))*(cj3));
IkReal x575=((x574)+(x573));
evalcond[0]=((IKabs(((x572)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x572)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x575))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x575));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x576=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x576)))+(((IkReal(11.1111111111111))*(pp)*(x576)))+(((IkReal(12.2222222222222))*(pz)*(x576))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x577=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x578=((IkReal(0.0450000000000000))*(x577));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x578)))+(x578)+(((IkReal(0.300000000000000))*(sj3)*(x577))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x579=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x579;
evalcond[3]=x579;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x580=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x580)))+(((IkReal(12.2222222222222))*(pz)*(x580)))+(((IkReal(-11.1111111111111))*(pp)*(x580))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x581=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x582=((IkReal(0.0450000000000000))*(x581));
sj0array[0]=((((IkReal(-1.00000000000000))*(x582)))+(((IkReal(-0.300000000000000))*(sj3)*(x581)))+(((cj3)*(x582))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x583=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x583;
evalcond[3]=x583;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x584=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x584)))+(((IkReal(12.2222222222222))*(pz)*(x584)))+(((IkReal(-11.1111111111111))*(pp)*(x584))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x585=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x586=((IkReal(0.0450000000000000))*(x585));
sj0array[0]=((((IkReal(-1.00000000000000))*(x586)))+(((IkReal(-0.300000000000000))*(sj3)*(x585)))+(((cj3)*(x586))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x587=IKabs(py);
IkReal x588=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x587)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x587)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x588;
evalcond[3]=x588;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x589=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x589)))+(((IkReal(12.2222222222222))*(pz)*(x589)))+(((IkReal(-11.1111111111111))*(pp)*(x589))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x590=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x591=((IkReal(0.0450000000000000))*(x590));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x590)))+(((IkReal(-1.00000000000000))*(x591)))+(((cj3)*(x591))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x592=IKabs(py);
IkReal x593=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x592)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x592)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x593;
evalcond[3]=x593;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x594=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x594)))+(((IkReal(-2.36111111111111))*(x594)))+(((IkReal(-11.1111111111111))*(pp)*(x594))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x595=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x596=((IkReal(0.0450000000000000))*(x595));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x595)))+(((IkReal(-1.00000000000000))*(x596)))+(((cj3)*(x596))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x597=((IkReal(0.0450000000000000))*(sj3));
IkReal x598=((IkReal(0.300000000000000))*(cj3));
IkReal x599=((x597)+(x598));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x599)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x599));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x600=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x600)))+(((IkReal(-2.36111111111111))*(x600)))+(((IkReal(-11.1111111111111))*(pp)*(x600))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x601=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x602=((IkReal(0.0450000000000000))*(x601));
sj0array[0]=((((cj3)*(x602)))+(((IkReal(-0.300000000000000))*(sj3)*(x601)))+(((IkReal(-1.00000000000000))*(x602))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x603=((IkReal(0.0450000000000000))*(sj3));
IkReal x604=((IkReal(0.300000000000000))*(cj3));
IkReal x605=((x603)+(x604));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x605))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x605));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x606=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x606)))+(((IkReal(-2.36111111111111))*(x606)))+(((IkReal(-11.1111111111111))*(pp)*(x606))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x607=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x608=((IkReal(0.0450000000000000))*(x607));
sj0array[0]=((((cj3)*(x608)))+(((IkReal(-0.300000000000000))*(sj3)*(x607)))+(((IkReal(-1.00000000000000))*(x608))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x609=IKabs(py);
IkReal x610=((IkReal(0.0450000000000000))*(sj3));
IkReal x611=((IkReal(0.300000000000000))*(cj3));
IkReal x612=((x610)+(x611));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x609))))+(IKabs(((x609)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x612))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x612));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x613=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x613)))+(((IkReal(-11.1111111111111))*(pp)*(x613)))+(((IkReal(-12.2222222222222))*(pz)*(x613))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x614=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x615=((IkReal(0.0450000000000000))*(x614));
sj0array[0]=((((cj3)*(x615)))+(((IkReal(-0.300000000000000))*(sj3)*(x614)))+(((IkReal(-1.00000000000000))*(x615))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x616=IKabs(py);
IkReal x617=((IkReal(0.0450000000000000))*(sj3));
IkReal x618=((IkReal(0.300000000000000))*(cj3));
IkReal x619=((x618)+(x617));
evalcond[0]=((IKabs(((x616)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x616)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x619))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x619));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x620=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x620)))+(((IkReal(-11.1111111111111))*(pp)*(x620)))+(((IkReal(-2.36111111111111))*(x620))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x621=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x622=((IkReal(0.0450000000000000))*(x621));
sj0array[0]=((((cj3)*(x622)))+(((IkReal(-1.00000000000000))*(x622)))+(((IkReal(-0.300000000000000))*(sj3)*(x621))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x623=((px)*(sj3));
IkReal x624=((py)*(sj1));
IkReal x625=((IkReal(0.300000000000000))*(cj3));
IkReal x626=((IkReal(0.0450000000000000))*(cj3));
IkReal x627=((px)*(sj1));
IkReal x628=((IkReal(1.00000000000000))*(cj1)*(pz));
if( IKabs(((gconst3)*(((((py)*(x625)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-0.0450000000000000))*(x627)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x628)))+(((IkReal(-0.300000000000000))*(sj1)*(x623)))+(((x626)*(x627))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x624)*(x626)))+(((IkReal(-1.00000000000000))*(px)*(x628)))+(((IkReal(0.0450000000000000))*(x624)))+(((IkReal(0.0450000000000000))*(x623)))+(((IkReal(0.550000000000000))*(px)))+(((px)*(x625)))+(((IkReal(0.300000000000000))*(sj3)*(x624))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((py)*(x625)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-0.0450000000000000))*(x627)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x628)))+(((IkReal(-0.300000000000000))*(sj1)*(x623)))+(((x626)*(x627)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x624)*(x626)))+(((IkReal(-1.00000000000000))*(px)*(x628)))+(((IkReal(0.0450000000000000))*(x624)))+(((IkReal(0.0450000000000000))*(x623)))+(((IkReal(0.550000000000000))*(px)))+(((px)*(x625)))+(((IkReal(0.300000000000000))*(sj3)*(x624)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x629=IKsin(j0);
IkReal x630=IKcos(j0);
IkReal x631=((IkReal(0.300000000000000))*(cj3));
IkReal x632=((IkReal(0.0450000000000000))*(sj3));
IkReal x633=((cj1)*(pz));
IkReal x634=((px)*(x629));
IkReal x635=((px)*(x630));
IkReal x636=((py)*(x629));
IkReal x637=((py)*(x630));
IkReal x638=((sj1)*(x636));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x631)))+(((IkReal(-1.00000000000000))*(x632)))+(((sj1)*(x635)))+(x633)+(x638));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x634)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x637))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj1)*(x635)))+(((cj1)*(x636))));
evalcond[3]=((((sj1)*(x631)))+(((sj1)*(x632)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x635)))+(((IkReal(-1.00000000000000))*(x636))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x635)))+(((IkReal(1.10000000000000))*(x638)))+(((IkReal(1.10000000000000))*(x633)))+(((IkReal(-0.0900000000000000))*(x634)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x637))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x639=((IkReal(0.0450000000000000))*(cj1));
IkReal x640=((pz)*(sj1));
IkReal x641=((IkReal(0.300000000000000))*(cj1)*(sj3));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(px)*(x641)))+(((cj3)*(px)*(x639)))+(((py)*(x640)))+(((IkReal(-1.00000000000000))*(px)*(x639))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((py)*(x639)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x639)))+(((py)*(x641)))+(((px)*(x640))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(px)*(x641)))+(((cj3)*(px)*(x639)))+(((py)*(x640)))+(((IkReal(-1.00000000000000))*(px)*(x639)))))), ((gconst2)*(((((py)*(x639)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x639)))+(((py)*(x641)))+(((px)*(x640)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x642=IKsin(j0);
IkReal x643=IKcos(j0);
IkReal x644=((IkReal(0.300000000000000))*(cj3));
IkReal x645=((IkReal(0.0450000000000000))*(sj3));
IkReal x646=((cj1)*(pz));
IkReal x647=((px)*(x642));
IkReal x648=((px)*(x643));
IkReal x649=((py)*(x642));
IkReal x650=((py)*(x643));
IkReal x651=((sj1)*(x649));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x648)))+(((IkReal(-1.00000000000000))*(x644)))+(((IkReal(-1.00000000000000))*(x645)))+(x646)+(x651));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x650)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x647)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x649)))+(((cj1)*(x648)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x649)))+(((IkReal(-1.00000000000000))*(x648)))+(((sj1)*(x644)))+(((sj1)*(x645)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x647)))+(((IkReal(0.0900000000000000))*(x650)))+(((IkReal(1.10000000000000))*(sj1)*(x648)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x651)))+(((IkReal(1.10000000000000))*(x646))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x652=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x652;
evalcond[3]=x652;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x653=((IkReal(110.000000000000))*(pz));
IkReal x654=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x654)))+(((px)*(x653)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x654)))+(((IkReal(-1.00000000000000))*(py)*(x653))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x654)))+(((px)*(x653)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst15)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x654)))+(((IkReal(-1.00000000000000))*(py)*(x653)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x655=IKcos(j0);
IkReal x656=IKsin(j0);
IkReal x657=((px)*(x656));
IkReal x658=((IkReal(1.00000000000000))*(x655));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x657)+(((IkReal(-1.00000000000000))*(py)*(x658)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x658)))+(((IkReal(-1.00000000000000))*(py)*(x656))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(py)*(x655))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x659=((IkReal(0.300000000000000))*(sj3));
IkReal x660=((IkReal(0.0450000000000000))*(px));
IkReal x661=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x659)))+(((cj3)*(x660)))+(((IkReal(-1.00000000000000))*(x660))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x661)))+(((py)*(x659)))+(x661))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x659)))+(((cj3)*(x660)))+(((IkReal(-1.00000000000000))*(x660)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x661)))+(((py)*(x659)))+(x661)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x662=IKcos(j0);
IkReal x663=IKsin(j0);
IkReal x664=((px)*(x663));
IkReal x665=((IkReal(1.00000000000000))*(x662));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x665)))+(x664)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x663)))+(((IkReal(-1.00000000000000))*(px)*(x665))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x664)))+(((IkReal(-0.0900000000000000))*(py)*(x662)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x666=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x666;
evalcond[3]=x666;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x667=((IkReal(110.000000000000))*(pz));
IkReal x668=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst17)*(((((px)*(x667)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x668))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x668)))+(((IkReal(-1.00000000000000))*(py)*(x667))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst17)*(((((px)*(x667)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x668)))))), ((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x668)))+(((IkReal(-1.00000000000000))*(py)*(x667)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x669=IKcos(j0);
IkReal x670=IKsin(j0);
IkReal x671=((px)*(x670));
IkReal x672=((IkReal(1.00000000000000))*(x669));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x672)))+(x671)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x670)))+(((IkReal(-1.00000000000000))*(px)*(x672))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x669)))+(((IkReal(0.0900000000000000))*(x671)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x673=((IkReal(0.300000000000000))*(sj3));
IkReal x674=((IkReal(0.0450000000000000))*(px));
IkReal x675=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst16)*(((((cj3)*(x674)))+(((IkReal(-1.00000000000000))*(px)*(x673)))+(((IkReal(-1.00000000000000))*(x674))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((py)*(x673)))+(((IkReal(-1.00000000000000))*(cj3)*(x675)))+(x675))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((((cj3)*(x674)))+(((IkReal(-1.00000000000000))*(px)*(x673)))+(((IkReal(-1.00000000000000))*(x674)))))), ((gconst16)*(((((py)*(x673)))+(((IkReal(-1.00000000000000))*(cj3)*(x675)))+(x675)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x676=IKcos(j0);
IkReal x677=IKsin(j0);
IkReal x678=((px)*(x677));
IkReal x679=((IkReal(1.00000000000000))*(x676));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x679)))+(x678)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x677)))+(((IkReal(-1.00000000000000))*(px)*(x679))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x678)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(py)*(x676))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x680=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x680;
evalcond[3]=x680;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x681=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x681)))+(((IkReal(-11.1111111111111))*(pp)*(x681)))+(((IkReal(-2.36111111111111))*(x681))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x682=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x683=((IkReal(0.0450000000000000))*(x682));
cj0array[0]=((((IkReal(-1.00000000000000))*(x683)))+(((IkReal(-0.300000000000000))*(sj3)*(x682)))+(((cj3)*(x683))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x684=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x684;
evalcond[3]=x684;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x685=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x685)))+(((IkReal(-11.1111111111111))*(pp)*(x685)))+(((IkReal(-2.36111111111111))*(x685))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x686=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x687=((IkReal(0.0450000000000000))*(x686));
cj0array[0]=((((IkReal(-1.00000000000000))*(x687)))+(((IkReal(-0.300000000000000))*(sj3)*(x686)))+(((cj3)*(x687))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x688=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x688;
evalcond[3]=x688;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x689=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x689)))+(((IkReal(2.36111111111111))*(x689)))+(((IkReal(11.1111111111111))*(pp)*(x689))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x690=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x691=((IkReal(0.0450000000000000))*(x690));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x690)))+(((IkReal(-1.00000000000000))*(cj3)*(x691)))+(x691));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x692=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x692;
evalcond[3]=x692;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x693=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x693)))+(((IkReal(-12.2222222222222))*(pz)*(x693)))+(((IkReal(11.1111111111111))*(pp)*(x693))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x694=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x695=((IkReal(0.0450000000000000))*(x694));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x694)))+(((IkReal(-1.00000000000000))*(cj3)*(x695)))+(x695));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x696=((IkReal(0.0450000000000000))*(sj3));
IkReal x697=((IkReal(0.300000000000000))*(cj3));
IkReal x698=((x696)+(x697));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x698))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x698));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x699=((IkReal(110.000000000000))*(pz));
IkReal x700=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(px)*(x700)))+(((IkReal(-1.00000000000000))*(px)*(x699)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x699)))+(((py)*(x700))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst19)*(((((IkReal(-1.00000000000000))*(px)*(x700)))+(((IkReal(-1.00000000000000))*(px)*(x699)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst19)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x699)))+(((py)*(x700)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x701=IKsin(j0);
IkReal x702=IKcos(j0);
IkReal x703=((px)*(x701));
IkReal x704=((py)*(x702));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x704)))+(x703)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x702)))+(((py)*(x701))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x703)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x704))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x705=((IkReal(0.300000000000000))*(sj3));
IkReal x706=((IkReal(0.0450000000000000))*(px));
IkReal x707=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(px)*(x705)))+(((IkReal(-1.00000000000000))*(x706)))+(((cj3)*(x706))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(cj3)*(x707)))+(x707)+(((py)*(x705))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(px)*(x705)))+(((IkReal(-1.00000000000000))*(x706)))+(((cj3)*(x706)))))), ((gconst18)*(((((IkReal(-1.00000000000000))*(cj3)*(x707)))+(x707)+(((py)*(x705)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x708=IKsin(j0);
IkReal x709=IKcos(j0);
IkReal x710=((px)*(x708));
IkReal x711=((py)*(x709));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x711)))+(x710)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x709)))+(((py)*(x708))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x710)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x711))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x712=((IkReal(0.0450000000000000))*(sj3));
IkReal x713=((IkReal(0.300000000000000))*(cj3));
IkReal x714=((x713)+(x712));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x714))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x714));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x715=((IkReal(110.000000000000))*(pz));
IkReal x716=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(px)*(x716)))+(((IkReal(-1.00000000000000))*(px)*(x715)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x716)))+(((py)*(x715))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst21)*(((((IkReal(-1.00000000000000))*(px)*(x716)))+(((IkReal(-1.00000000000000))*(px)*(x715)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst21)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x716)))+(((py)*(x715)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x717=IKsin(j0);
IkReal x718=IKcos(j0);
IkReal x719=((px)*(x717));
IkReal x720=((py)*(x718));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x720)))+(x719)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x718)))+(((py)*(x717))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x720))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x721=((IkReal(0.300000000000000))*(sj3));
IkReal x722=((IkReal(0.0450000000000000))*(px));
IkReal x723=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(px)*(x721)))+(((IkReal(-1.00000000000000))*(x722)))+(((cj3)*(x722))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(cj3)*(x723)))+(((py)*(x721)))+(x723))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(px)*(x721)))+(((IkReal(-1.00000000000000))*(x722)))+(((cj3)*(x722)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(cj3)*(x723)))+(((py)*(x721)))+(x723)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x724=IKsin(j0);
IkReal x725=IKcos(j0);
IkReal x726=((px)*(x724));
IkReal x727=((py)*(x725));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x727)))+(x726)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x724)))+(((px)*(x725))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x727))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x728=((IkReal(0.0450000000000000))*(sj3));
IkReal x729=((IkReal(0.300000000000000))*(cj3));
IkReal x730=((x728)+(x729));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x730))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x730));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x731=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x731)))+(((IkReal(-2.36111111111111))*(x731)))+(((IkReal(-11.1111111111111))*(pp)*(x731))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x732=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x733=((IkReal(0.0450000000000000))*(x732));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x732)))+(((IkReal(-1.00000000000000))*(x733)))+(((cj3)*(x733))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x734=((IkReal(0.0450000000000000))*(sj3));
IkReal x735=((IkReal(0.300000000000000))*(cj3));
IkReal x736=((x735)+(x734));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x736))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x736));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x737=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x737)))+(((IkReal(-2.36111111111111))*(x737)))+(((IkReal(-11.1111111111111))*(pp)*(x737))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x738=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x739=((IkReal(0.0450000000000000))*(x738));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x738)))+(((IkReal(-1.00000000000000))*(x739)))+(((cj3)*(x739))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x740=((IkReal(0.0450000000000000))*(sj3));
IkReal x741=((IkReal(0.300000000000000))*(cj3));
IkReal x742=((x740)+(x741));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x742))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x742));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x743=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x743)))+(((IkReal(2.36111111111111))*(x743)))+(((IkReal(11.1111111111111))*(pp)*(x743))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x744=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x745=((IkReal(0.0450000000000000))*(x744));
sj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x745)))+(((IkReal(0.300000000000000))*(sj3)*(x744)))+(x745));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x746=((IkReal(0.0450000000000000))*(sj3));
IkReal x747=((IkReal(0.300000000000000))*(cj3));
IkReal x748=((x746)+(x747));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x748))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x748));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x749=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x749)))+(((IkReal(2.36111111111111))*(x749)))+(((IkReal(11.1111111111111))*(pp)*(x749))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x750=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x751=((IkReal(0.0450000000000000))*(x750));
sj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x751)))+(((IkReal(0.300000000000000))*(sj3)*(x750)))+(x751));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x752=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x752;
evalcond[3]=x752;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x753=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x753)))+(((IkReal(-11.1111111111111))*(pp)*(x753)))+(((IkReal(12.2222222222222))*(pz)*(x753))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x754=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x755=((IkReal(0.0450000000000000))*(x754));
cj0array[0]=((((cj3)*(x755)))+(((IkReal(-0.300000000000000))*(sj3)*(x754)))+(((IkReal(-1.00000000000000))*(x755))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x756=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x756;
evalcond[3]=x756;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x757=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x757)))+(((IkReal(-11.1111111111111))*(pp)*(x757)))+(((IkReal(12.2222222222222))*(pz)*(x757))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x758=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x759=((IkReal(0.0450000000000000))*(x758));
cj0array[0]=((((cj3)*(x759)))+(((IkReal(-0.300000000000000))*(sj3)*(x758)))+(((IkReal(-1.00000000000000))*(x759))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x760=IKabs(px);
IkReal x761=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x760))))+(IKabs(((x760)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x761;
evalcond[3]=x761;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x762=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x762)))+(((IkReal(12.2222222222222))*(pz)*(x762)))+(((IkReal(-2.36111111111111))*(x762))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x763=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x764=((IkReal(0.0450000000000000))*(x763));
cj0array[0]=((((cj3)*(x764)))+(((IkReal(-0.300000000000000))*(sj3)*(x763)))+(((IkReal(-1.00000000000000))*(x764))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x765=IKabs(px);
IkReal x766=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x765))))+(IKabs(((x765)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x766;
evalcond[3]=x766;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x767=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x767)))+(((IkReal(12.2222222222222))*(pz)*(x767)))+(((IkReal(-2.36111111111111))*(x767))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x768=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x769=((IkReal(0.0450000000000000))*(x768));
cj0array[0]=((((cj3)*(x769)))+(((IkReal(-0.300000000000000))*(sj3)*(x768)))+(((IkReal(-1.00000000000000))*(x769))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x770=((IkReal(0.0450000000000000))*(sj3));
IkReal x771=((IkReal(0.300000000000000))*(cj3));
IkReal x772=((x771)+(x770));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x772))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x772));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x773=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x773)))+(((IkReal(-11.1111111111111))*(pp)*(x773)))+(((IkReal(-2.36111111111111))*(x773))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x774=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x775=((IkReal(0.0450000000000000))*(x774));
cj0array[0]=((((cj3)*(x775)))+(((IkReal(-0.300000000000000))*(sj3)*(x774)))+(((IkReal(-1.00000000000000))*(x775))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x776=((IkReal(0.0450000000000000))*(sj3));
IkReal x777=((IkReal(0.300000000000000))*(cj3));
IkReal x778=((x777)+(x776));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x778))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x778));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x779=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x779)))+(((IkReal(-11.1111111111111))*(pp)*(x779)))+(((IkReal(-2.36111111111111))*(x779))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x780=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x781=((IkReal(0.0450000000000000))*(x780));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x780)))+(((IkReal(-1.00000000000000))*(x781)))+(((cj3)*(x781))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x782=IKabs(px);
IkReal x783=((IkReal(0.0450000000000000))*(sj3));
IkReal x784=((IkReal(0.300000000000000))*(cj3));
IkReal x785=((x783)+(x784));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x782))))+(IKabs(((x782)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x785)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x785));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x786=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x786)))+(((IkReal(-12.2222222222222))*(pz)*(x786)))+(((IkReal(-11.1111111111111))*(pp)*(x786))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x787=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x788=((IkReal(0.0450000000000000))*(x787));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x787)))+(((IkReal(-1.00000000000000))*(x788)))+(((cj3)*(x788))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x789=IKabs(px);
IkReal x790=((IkReal(0.0450000000000000))*(sj3));
IkReal x791=((IkReal(0.300000000000000))*(cj3));
IkReal x792=((x791)+(x790));
evalcond[0]=((IKabs(((x789)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x789)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x792)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x792));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x793=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x793)))+(((IkReal(-12.2222222222222))*(pz)*(x793)))+(((IkReal(-11.1111111111111))*(pp)*(x793))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x794=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x795=((IkReal(0.0450000000000000))*(x794));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x794)))+(((IkReal(-1.00000000000000))*(x795)))+(((cj3)*(x795))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x796=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x796;
evalcond[3]=x796;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x797=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x797)))+(((IkReal(2.36111111111111))*(x797)))+(((IkReal(-12.2222222222222))*(pz)*(x797))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x798=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x799=((IkReal(0.0450000000000000))*(x798));
sj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x799)))+(((IkReal(0.300000000000000))*(sj3)*(x798)))+(x799));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x800=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x800;
evalcond[3]=x800;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x801=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x801)))+(((IkReal(-12.2222222222222))*(pz)*(x801)))+(((IkReal(11.1111111111111))*(pp)*(x801))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x802=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x803=((IkReal(0.0450000000000000))*(x802));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x802)))+(((IkReal(-1.00000000000000))*(cj3)*(x803)))+(x803));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x804=IKabs(py);
IkReal x805=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))+(x804))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x804)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x805;
evalcond[3]=x805;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x806=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x806)))+(((IkReal(-12.2222222222222))*(pz)*(x806)))+(((IkReal(11.1111111111111))*(pp)*(x806))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x807=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x808=((IkReal(0.0450000000000000))*(x807));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x807)))+(((IkReal(-1.00000000000000))*(cj3)*(x808)))+(x808));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x809=IKabs(py);
IkReal x810=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x809))))+(IKabs(((x809)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x810;
evalcond[3]=x810;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x811=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x811)))+(((IkReal(11.1111111111111))*(pp)*(x811)))+(((IkReal(2.36111111111111))*(x811))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x812=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x813=((IkReal(0.0450000000000000))*(x812));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x812)))+(((IkReal(-1.00000000000000))*(cj3)*(x813)))+(x813));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x814=((IkReal(0.0450000000000000))*(sj3));
IkReal x815=((IkReal(0.300000000000000))*(cj3));
IkReal x816=((x814)+(x815));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x816)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x816));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x817=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x817)))+(((IkReal(12.2222222222222))*(pz)*(x817)))+(((IkReal(2.36111111111111))*(x817))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x818=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x819=((IkReal(0.0450000000000000))*(x818));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x818)))+(((IkReal(-1.00000000000000))*(cj3)*(x819)))+(x819));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x820=((IkReal(0.0450000000000000))*(sj3));
IkReal x821=((IkReal(0.300000000000000))*(cj3));
IkReal x822=((x821)+(x820));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x822));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x823=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x823)))+(((IkReal(12.2222222222222))*(pz)*(x823)))+(((IkReal(2.36111111111111))*(x823))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x824=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x825=((IkReal(0.0450000000000000))*(x824));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x824)))+(x825)+(((IkReal(-1.00000000000000))*(cj3)*(x825))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x826=IKabs(py);
IkReal x827=((IkReal(0.0450000000000000))*(sj3));
IkReal x828=((IkReal(0.300000000000000))*(cj3));
IkReal x829=((x828)+(x827));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))+(x826))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x826)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x829)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x829));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x830=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x830)))+(((IkReal(11.1111111111111))*(pp)*(x830)))+(((IkReal(12.2222222222222))*(pz)*(x830))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x831=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x832=((IkReal(0.0450000000000000))*(x831));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x831)))+(x832)+(((IkReal(-1.00000000000000))*(cj3)*(x832))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x833=IKabs(py);
IkReal x834=((IkReal(0.0450000000000000))*(sj3));
IkReal x835=((IkReal(0.300000000000000))*(cj3));
IkReal x836=((x834)+(x835));
evalcond[0]=((IKabs(((x833)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x833)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x836))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x836));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x837=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x837)))+(((IkReal(11.1111111111111))*(pp)*(x837)))+(((IkReal(12.2222222222222))*(pz)*(x837))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x838=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x839=((IkReal(0.0450000000000000))*(x838));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x838)))+(x839)+(((IkReal(-1.00000000000000))*(cj3)*(x839))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x840=((px)*(sj3));
IkReal x841=((IkReal(0.300000000000000))*(cj3));
IkReal x842=((IkReal(0.300000000000000))*(sj1));
IkReal x843=((py)*(sj3));
IkReal x844=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x845=((IkReal(0.0450000000000000))*(py)*(sj1));
IkReal x846=((IkReal(0.0450000000000000))*(px)*(sj1));
if( IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x844)))+(((x840)*(x842)))+(((py)*(x841)))+(((IkReal(0.0450000000000000))*(x843)))+(x846)+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x846))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(px)*(x844)))+(((IkReal(-1.00000000000000))*(x842)*(x843)))+(((IkReal(-1.00000000000000))*(x845)))+(((IkReal(0.0450000000000000))*(x840)))+(((cj3)*(x845)))+(((IkReal(0.550000000000000))*(px)))+(((px)*(x841))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x844)))+(((x840)*(x842)))+(((py)*(x841)))+(((IkReal(0.0450000000000000))*(x843)))+(x846)+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x846)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(px)*(x844)))+(((IkReal(-1.00000000000000))*(x842)*(x843)))+(((IkReal(-1.00000000000000))*(x845)))+(((IkReal(0.0450000000000000))*(x840)))+(((cj3)*(x845)))+(((IkReal(0.550000000000000))*(px)))+(((px)*(x841)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x847=IKsin(j0);
IkReal x848=IKcos(j0);
IkReal x849=((IkReal(0.300000000000000))*(cj3));
IkReal x850=((IkReal(0.0450000000000000))*(sj3));
IkReal x851=((IkReal(1.00000000000000))*(py));
IkReal x852=((cj1)*(pz));
IkReal x853=((px)*(x847));
IkReal x854=((px)*(x848));
IkReal x855=((py)*(sj1)*(x847));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x850)))+(((sj1)*(x854)))+(((IkReal(-1.00000000000000))*(x849)))+(x852)+(x855));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x848)*(x851)))+(x853)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x847)*(x851)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x854))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x854)))+(((sj1)*(x850)))+(((IkReal(-1.00000000000000))*(x847)*(x851)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x849))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x848)))+(((IkReal(1.10000000000000))*(x855)))+(((IkReal(1.10000000000000))*(x852)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x853)))+(((IkReal(1.10000000000000))*(sj1)*(x854))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x856=((IkReal(0.0450000000000000))*(cj1));
IkReal x857=((pz)*(sj1));
IkReal x858=((IkReal(0.300000000000000))*(cj1)*(sj3));
if( IKabs(((gconst12)*(((((px)*(x856)))+(((px)*(x858)))+(((py)*(x857)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x856))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((px)*(x857)))+(((IkReal(-1.00000000000000))*(py)*(x856)))+(((IkReal(-1.00000000000000))*(py)*(x858)))+(((cj3)*(py)*(x856))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst12)*(((((px)*(x856)))+(((px)*(x858)))+(((py)*(x857)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x856)))))), ((gconst12)*(((((px)*(x857)))+(((IkReal(-1.00000000000000))*(py)*(x856)))+(((IkReal(-1.00000000000000))*(py)*(x858)))+(((cj3)*(py)*(x856)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x859=IKsin(j0);
IkReal x860=IKcos(j0);
IkReal x861=((IkReal(0.300000000000000))*(cj3));
IkReal x862=((IkReal(0.0450000000000000))*(sj3));
IkReal x863=((IkReal(1.00000000000000))*(py));
IkReal x864=((cj1)*(pz));
IkReal x865=((px)*(x859));
IkReal x866=((px)*(x860));
IkReal x867=((py)*(sj1)*(x859));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x861)))+(((IkReal(-1.00000000000000))*(x862)))+(((sj1)*(x866)))+(x867)+(x864));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x860)*(x863)))+(x865)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x859)*(x863)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x866))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x866)))+(((sj1)*(x861)))+(((sj1)*(x862)))+(((IkReal(-1.00000000000000))*(x859)*(x863)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x867)))+(((IkReal(1.10000000000000))*(x864)))+(((IkReal(-0.0900000000000000))*(py)*(x860)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x865)))+(((IkReal(1.10000000000000))*(sj1)*(x866))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x868=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x868;
evalcond[3]=x868;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
IkReal x869=((IkReal(1.00000000000000))*(sj2));
gconst22=IKsign(((((IkReal(-1.00000000000000))*(x869)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x869)*((px)*(px))))));
IkReal x870=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x870)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x870)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x871=(sj2)*(sj2);
IkReal x872=((cj2)*(sj2));
IkReal x873=((IkReal(0.300000000000000))*(sj3));
IkReal x874=((IkReal(0.0450000000000000))*(py));
IkReal x875=((IkReal(0.0450000000000000))*(cj3)*(px));
IkReal x876=((px)*(x871));
IkReal x877=((x871)*(x874));
if( IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x872)*(x874)))+(((IkReal(-1.00000000000000))*(x871)*(x875)))+(((cj3)*(x872)*(x874)))+(((IkReal(0.0450000000000000))*(x876)))+(((x873)*(x876)))+(((IkReal(-1.00000000000000))*(py)*(x872)*(x873))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((x872)*(x875)))+(((IkReal(-1.00000000000000))*(py)*(x871)*(x873)))+(((cj3)*(x877)))+(((IkReal(-1.00000000000000))*(px)*(x872)*(x873)))+(((IkReal(-0.0450000000000000))*(px)*(x872)))+(((IkReal(-1.00000000000000))*(x877))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst22)*(((((IkReal(-1.00000000000000))*(x872)*(x874)))+(((IkReal(-1.00000000000000))*(x871)*(x875)))+(((cj3)*(x872)*(x874)))+(((IkReal(0.0450000000000000))*(x876)))+(((x873)*(x876)))+(((IkReal(-1.00000000000000))*(py)*(x872)*(x873)))))), ((gconst22)*(((((x872)*(x875)))+(((IkReal(-1.00000000000000))*(py)*(x871)*(x873)))+(((cj3)*(x877)))+(((IkReal(-1.00000000000000))*(px)*(x872)*(x873)))+(((IkReal(-0.0450000000000000))*(px)*(x872)))+(((IkReal(-1.00000000000000))*(x877)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x878=IKcos(j0);
IkReal x879=IKsin(j0);
IkReal x880=((IkReal(0.0450000000000000))*(cj2));
IkReal x881=((IkReal(0.0900000000000000))*(sj2));
IkReal x882=((IkReal(0.300000000000000))*(sj3));
IkReal x883=((IkReal(0.0450000000000000))*(cj3));
IkReal x884=((IkReal(0.0900000000000000))*(cj2));
IkReal x885=((IkReal(1.00000000000000))*(cj2));
IkReal x886=((px)*(x879));
IkReal x887=((px)*(x878));
IkReal x888=((py)*(x878));
IkReal x889=((py)*(x879));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x888)))+(((sj2)*(x882)))+(x886)+(((IkReal(-1.00000000000000))*(sj2)*(x883))));
evalcond[1]=((((cj2)*(x886)))+(((sj2)*(x887)))+(((sj2)*(x889)))+(((IkReal(-1.00000000000000))*(x885)*(x888))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x888)))+(((IkReal(-1.00000000000000))*(x883)))+(((sj2)*(x886)))+(x882)+(((IkReal(-1.00000000000000))*(x885)*(x887)))+(((IkReal(-1.00000000000000))*(x885)*(x889))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x880)))+(((cj2)*(x882)))+(((IkReal(-1.00000000000000))*(x889)))+(((IkReal(-1.00000000000000))*(x887)))+(x880));
evalcond[4]=((IkReal(-0.212500000000000))+(((x881)*(x888)))+(((IkReal(-1.00000000000000))*(x881)*(x886)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((x884)*(x889)))+(((x884)*(x887))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x890=((px)*(sj2));
IkReal x891=((IkReal(0.300000000000000))*(sj3));
IkReal x892=((cj2)*(py));
IkReal x893=((cj2)*(px));
IkReal x894=((IkReal(0.0450000000000000))*(cj3));
IkReal x895=((py)*(sj2));
IkReal x896=((cj2)*(x894));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x892)*(x894)))+(((IkReal(-0.0450000000000000))*(x890)))+(((x890)*(x894)))+(((x891)*(x892)))+(((IkReal(0.0450000000000000))*(x892)))+(((IkReal(-1.00000000000000))*(x890)*(x891))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x894)*(x895)))+(((IkReal(-1.00000000000000))*(x893)*(x894)))+(((x891)*(x893)))+(((x891)*(x895)))+(((IkReal(0.0450000000000000))*(x895)))+(((IkReal(0.0450000000000000))*(x893))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(x892)*(x894)))+(((IkReal(-0.0450000000000000))*(x890)))+(((x890)*(x894)))+(((x891)*(x892)))+(((IkReal(0.0450000000000000))*(x892)))+(((IkReal(-1.00000000000000))*(x890)*(x891)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x894)*(x895)))+(((IkReal(-1.00000000000000))*(x893)*(x894)))+(((x891)*(x893)))+(((x891)*(x895)))+(((IkReal(0.0450000000000000))*(x895)))+(((IkReal(0.0450000000000000))*(x893)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x897=IKcos(j0);
IkReal x898=IKsin(j0);
IkReal x899=((IkReal(0.0450000000000000))*(cj2));
IkReal x900=((IkReal(0.0900000000000000))*(sj2));
IkReal x901=((IkReal(0.300000000000000))*(sj3));
IkReal x902=((IkReal(0.0450000000000000))*(cj3));
IkReal x903=((IkReal(0.0900000000000000))*(cj2));
IkReal x904=((IkReal(1.00000000000000))*(cj2));
IkReal x905=((px)*(x898));
IkReal x906=((px)*(x897));
IkReal x907=((py)*(x897));
IkReal x908=((py)*(x898));
evalcond[0]=((((sj2)*(x901)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x902)))+(((IkReal(-1.00000000000000))*(x907)))+(x905));
evalcond[1]=((((sj2)*(x906)))+(((sj2)*(x908)))+(((cj2)*(x905)))+(((IkReal(-1.00000000000000))*(x904)*(x907))));
evalcond[2]=((IkReal(0.0450000000000000))+(((sj2)*(x905)))+(((IkReal(-1.00000000000000))*(x902)))+(((IkReal(-1.00000000000000))*(sj2)*(x907)))+(((IkReal(-1.00000000000000))*(x904)*(x906)))+(((IkReal(-1.00000000000000))*(x904)*(x908)))+(x901));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x899)))+(((cj2)*(x901)))+(((IkReal(-1.00000000000000))*(x908)))+(((IkReal(-1.00000000000000))*(x906)))+(x899));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x900)*(x905)))+(((x903)*(x906)))+(((x903)*(x908)))+(((x900)*(x907)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x909=((IkReal(0.0450000000000000))*(sj3));
IkReal x910=((IkReal(0.300000000000000))*(cj3));
IkReal x911=((x910)+(x909));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x911)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x911));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x912=(sj2)*(sj2);
IkReal x913=((IkReal(0.0450000000000000))*(cj3));
IkReal x914=((IkReal(0.300000000000000))*(sj3));
IkReal x915=((cj2)*(px)*(sj2));
IkReal x916=((px)*(x912));
IkReal x917=((py)*(x912));
IkReal x918=((cj2)*(py)*(sj2));
if( IKabs(((gconst25)*(((((IkReal(-0.0450000000000000))*(x916)))+(((IkReal(-0.0450000000000000))*(x918)))+(((IkReal(-1.00000000000000))*(x914)*(x918)))+(((IkReal(-1.00000000000000))*(x914)*(x916)))+(((x913)*(x916)))+(((x913)*(x918))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(x913)*(x917)))+(((x914)*(x917)))+(((IkReal(0.0450000000000000))*(x917)))+(((IkReal(-0.0450000000000000))*(x915)))+(((IkReal(-1.00000000000000))*(x914)*(x915)))+(((x913)*(x915))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst25)*(((((IkReal(-0.0450000000000000))*(x916)))+(((IkReal(-0.0450000000000000))*(x918)))+(((IkReal(-1.00000000000000))*(x914)*(x918)))+(((IkReal(-1.00000000000000))*(x914)*(x916)))+(((x913)*(x916)))+(((x913)*(x918)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(x913)*(x917)))+(((x914)*(x917)))+(((IkReal(0.0450000000000000))*(x917)))+(((IkReal(-0.0450000000000000))*(x915)))+(((IkReal(-1.00000000000000))*(x914)*(x915)))+(((x913)*(x915)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x919=IKsin(j0);
IkReal x920=IKcos(j0);
IkReal x921=((IkReal(0.0450000000000000))*(cj2));
IkReal x922=((IkReal(0.0900000000000000))*(sj2));
IkReal x923=((IkReal(0.300000000000000))*(sj3));
IkReal x924=((IkReal(0.0450000000000000))*(cj3));
IkReal x925=((IkReal(1.00000000000000))*(sj2));
IkReal x926=((IkReal(0.0900000000000000))*(cj2));
IkReal x927=((px)*(x919));
IkReal x928=((px)*(x920));
IkReal x929=((py)*(x920));
IkReal x930=((py)*(x919));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x924)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x929)))+(x927)+(((sj2)*(x923))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x925)*(x928)))+(((IkReal(-1.00000000000000))*(x925)*(x930)))+(((IkReal(-1.00000000000000))*(cj2)*(x929)))+(((cj2)*(x927))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x924)))+(((IkReal(-1.00000000000000))*(x925)*(x929)))+(((cj2)*(x930)))+(((cj2)*(x928)))+(x923)+(((sj2)*(x927))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x921)))+(((IkReal(-1.00000000000000))*(cj2)*(x923)))+(((IkReal(-1.00000000000000))*(x928)))+(((IkReal(-1.00000000000000))*(x930)))+(((cj3)*(x921))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x926)*(x928)))+(((IkReal(-1.00000000000000))*(x926)*(x930)))+(((x922)*(x929)))+(((IkReal(-1.00000000000000))*(x922)*(x927))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x931=((px)*(sj2));
IkReal x932=((IkReal(0.300000000000000))*(sj3));
IkReal x933=((cj2)*(py));
IkReal x934=((py)*(sj2));
IkReal x935=((IkReal(0.0450000000000000))*(cj3)*(py));
IkReal x936=((IkReal(0.0450000000000000))*(cj2)*(px));
if( IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(x931)*(x932)))+(((IkReal(-0.0450000000000000))*(x931)))+(((IkReal(-0.0450000000000000))*(x933)))+(((IkReal(0.0450000000000000))*(cj3)*(x933)))+(((IkReal(0.0450000000000000))*(cj3)*(x931)))+(((IkReal(-1.00000000000000))*(x932)*(x933))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj2)*(px)*(x932)))+(((IkReal(-0.0450000000000000))*(cj3)*(x934)))+(((cj3)*(x936)))+(((IkReal(0.0450000000000000))*(x934)))+(((x932)*(x934)))+(((IkReal(-1.00000000000000))*(x936))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst24)*(((((IkReal(-1.00000000000000))*(x931)*(x932)))+(((IkReal(-0.0450000000000000))*(x931)))+(((IkReal(-0.0450000000000000))*(x933)))+(((IkReal(0.0450000000000000))*(cj3)*(x933)))+(((IkReal(0.0450000000000000))*(cj3)*(x931)))+(((IkReal(-1.00000000000000))*(x932)*(x933)))))), ((gconst24)*(((((IkReal(-1.00000000000000))*(cj2)*(px)*(x932)))+(((IkReal(-0.0450000000000000))*(cj3)*(x934)))+(((cj3)*(x936)))+(((IkReal(0.0450000000000000))*(x934)))+(((x932)*(x934)))+(((IkReal(-1.00000000000000))*(x936)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x937=IKsin(j0);
IkReal x938=IKcos(j0);
IkReal x939=((IkReal(0.0450000000000000))*(cj2));
IkReal x940=((IkReal(0.0900000000000000))*(sj2));
IkReal x941=((IkReal(0.300000000000000))*(sj3));
IkReal x942=((IkReal(0.0450000000000000))*(cj3));
IkReal x943=((IkReal(1.00000000000000))*(sj2));
IkReal x944=((IkReal(0.0900000000000000))*(cj2));
IkReal x945=((px)*(x937));
IkReal x946=((px)*(x938));
IkReal x947=((py)*(x938));
IkReal x948=((py)*(x937));
evalcond[0]=((((sj2)*(x941)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x947)))+(x945)+(((IkReal(-1.00000000000000))*(sj2)*(x942))));
evalcond[1]=((((cj2)*(x945)))+(((IkReal(-1.00000000000000))*(x943)*(x946)))+(((IkReal(-1.00000000000000))*(x943)*(x948)))+(((IkReal(-1.00000000000000))*(cj2)*(x947))));
evalcond[2]=((IkReal(0.0450000000000000))+(((sj2)*(x945)))+(((IkReal(-1.00000000000000))*(x942)))+(((cj2)*(x948)))+(((cj2)*(x946)))+(((IkReal(-1.00000000000000))*(x943)*(x947)))+(x941));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x941)))+(((IkReal(-1.00000000000000))*(x946)))+(((IkReal(-1.00000000000000))*(x948)))+(((cj3)*(x939)))+(((IkReal(-1.00000000000000))*(x939))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x944)*(x948)))+(((IkReal(-1.00000000000000))*(x944)*(x946)))+(((x940)*(x947)))+(((IkReal(-1.00000000000000))*(x940)*(x945))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x949=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x949;
evalcond[3]=x949;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x950=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x950)))+(((IkReal(-12.2222222222222))*(pz)*(x950)))+(((IkReal(2.36111111111111))*(x950))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x951=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x952=((IkReal(0.0450000000000000))*(x951));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x952)))+(((IkReal(0.300000000000000))*(sj3)*(x951)))+(x952));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x953=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x953;
evalcond[3]=x953;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x954=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x954)))+(((IkReal(-12.2222222222222))*(pz)*(x954)))+(((IkReal(2.36111111111111))*(x954))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x955=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x956=((IkReal(0.0450000000000000))*(x955));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x956)))+(((IkReal(0.300000000000000))*(sj3)*(x955)))+(x956));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x957=((IkReal(0.0450000000000000))*(sj3));
IkReal x958=((IkReal(0.300000000000000))*(cj3));
IkReal x959=((x958)+(x957));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x959))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x959));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x960=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x960)))+(((IkReal(12.2222222222222))*(pz)*(x960)))+(((IkReal(2.36111111111111))*(x960))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x961=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x962=((IkReal(0.0450000000000000))*(x961));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x962)))+(((IkReal(0.300000000000000))*(sj3)*(x961)))+(x962));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x963=((IkReal(0.0450000000000000))*(sj3));
IkReal x964=((IkReal(0.300000000000000))*(cj3));
IkReal x965=((x963)+(x964));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x965))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x965));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x966=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x966)))+(((IkReal(12.2222222222222))*(pz)*(x966)))+(((IkReal(2.36111111111111))*(x966))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x967=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x968=((IkReal(0.0450000000000000))*(x967));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x968)))+(((IkReal(0.300000000000000))*(sj3)*(x967)))+(x968));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x969=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((x969)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x969)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x969)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))+IKsqr(((x969)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x969)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))), ((x969)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x970=IKsin(j0);
IkReal x971=IKcos(j0);
IkReal x972=((cj1)*(pz));
IkReal x973=((IkReal(0.300000000000000))*(cj3));
IkReal x974=((IkReal(0.0450000000000000))*(sj3));
IkReal x975=((py)*(x970));
IkReal x976=((py)*(x971));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x975)))+(x972)+(((IkReal(-1.00000000000000))*(x974)))+(((IkReal(-1.00000000000000))*(x973))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x976)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x975)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x975)))+(((sj1)*(x974)))+(((sj1)*(x973)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x976)))+(((IkReal(1.10000000000000))*(sj1)*(x975)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x972))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x977=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((pz)*(sj1)*(x977)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x977)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((pz)*(sj1)*(x977)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((x977)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((pz)*(sj1)*(x977)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((x977)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x978=IKsin(j0);
IkReal x979=IKcos(j0);
IkReal x980=((cj1)*(pz));
IkReal x981=((IkReal(0.300000000000000))*(cj3));
IkReal x982=((IkReal(0.0450000000000000))*(sj3));
IkReal x983=((py)*(x978));
IkReal x984=((py)*(x979));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x982)))+(((IkReal(-1.00000000000000))*(x981)))+(((sj1)*(x983)))+(x980));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x984)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x983)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x983)))+(((sj1)*(x982)))+(((sj1)*(x981)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x983)))+(((IkReal(0.0900000000000000))*(x984)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x980))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst26)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst26)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))), ((gconst26)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x985=IKsin(j0);
IkReal x986=IKcos(j0);
IkReal x987=((cj1)*(pz));
IkReal x988=((IkReal(0.300000000000000))*(cj3));
IkReal x989=((IkReal(0.0450000000000000))*(sj3));
IkReal x990=((py)*(x985));
IkReal x991=((py)*(x986));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x988)))+(x987)+(((sj1)*(x990))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x991)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x990)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x990)))+(((sj1)*(x989)))+(((sj1)*(x988)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x991)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x987)))+(((IkReal(1.10000000000000))*(sj1)*(x990))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x992=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x992;
evalcond[3]=x992;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x993=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x993)))+(((IkReal(12.2222222222222))*(pz)*(x993)))+(((IkReal(-11.1111111111111))*(pp)*(x993))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x994=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x995=((IkReal(0.0450000000000000))*(x994));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x994)))+(((IkReal(-1.00000000000000))*(x995)))+(((cj3)*(x995))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x996=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x996;
evalcond[3]=x996;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x997=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x997)))+(((IkReal(12.2222222222222))*(pz)*(x997)))+(((IkReal(-11.1111111111111))*(pp)*(x997))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x998=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x999=((IkReal(0.0450000000000000))*(x998));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x998)))+(((IkReal(-1.00000000000000))*(x999)))+(((cj3)*(x999))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1000=((IkReal(0.0450000000000000))*(sj3));
IkReal x1001=((IkReal(0.300000000000000))*(cj3));
IkReal x1002=((x1001)+(x1000));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1002)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1003=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x1003)))+(((IkReal(-12.2222222222222))*(pz)*(x1003)))+(((IkReal(-11.1111111111111))*(pp)*(x1003))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1004=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1005=((IkReal(0.0450000000000000))*(x1004));
cj0array[0]=((((cj3)*(x1005)))+(((IkReal(-1.00000000000000))*(x1005)))+(((IkReal(-0.300000000000000))*(sj3)*(x1004))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1006=((IkReal(0.0450000000000000))*(sj3));
IkReal x1007=((IkReal(0.300000000000000))*(cj3));
IkReal x1008=((x1007)+(x1006));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1008)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1008)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1009=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x1009)))+(((IkReal(-12.2222222222222))*(pz)*(x1009)))+(((IkReal(-11.1111111111111))*(pp)*(x1009))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1010=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1011=((IkReal(0.0450000000000000))*(x1010));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1010)))+(((IkReal(-1.00000000000000))*(x1011)))+(((cj3)*(x1011))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1012=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((x1012)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1012)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1012)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))+IKsqr(((x1012)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1012)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))), ((x1012)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1013=IKsin(j0);
IkReal x1014=IKcos(j0);
IkReal x1015=((cj1)*(pz));
IkReal x1016=((IkReal(0.0450000000000000))*(sj3));
IkReal x1017=((IkReal(0.300000000000000))*(cj3));
IkReal x1018=((py)*(x1013));
IkReal x1019=((py)*(x1014));
evalcond[0]=((IkReal(-0.550000000000000))+(x1015)+(((IkReal(-1.00000000000000))*(x1017)))+(((IkReal(-1.00000000000000))*(x1016)))+(((sj1)*(x1018))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1019))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1018)))+(((pz)*(sj1))));
evalcond[3]=((((sj1)*(x1017)))+(((sj1)*(x1016)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1018))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1015)))+(((IkReal(1.10000000000000))*(sj1)*(x1018)))+(((IkReal(-0.0900000000000000))*(x1019)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1020=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((pz)*(sj1)*(x1020)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1020)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((pz)*(sj1)*(x1020)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((x1020)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((pz)*(sj1)*(x1020)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((x1020)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1021=IKsin(j0);
IkReal x1022=IKcos(j0);
IkReal x1023=((cj1)*(pz));
IkReal x1024=((IkReal(0.0450000000000000))*(sj3));
IkReal x1025=((IkReal(0.300000000000000))*(cj3));
IkReal x1026=((py)*(x1021));
IkReal x1027=((py)*(x1022));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x1026)))+(x1023)+(((IkReal(-1.00000000000000))*(x1024)))+(((IkReal(-1.00000000000000))*(x1025))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1027)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1026)))+(((pz)*(sj1))));
evalcond[3]=((((sj1)*(x1024)))+(((sj1)*(x1025)))+(((IkReal(-1.00000000000000))*(x1026)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1027)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1026)))+(((IkReal(1.10000000000000))*(x1023))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst27)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst27)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))), ((gconst27)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1028=IKsin(j0);
IkReal x1029=IKcos(j0);
IkReal x1030=((cj1)*(pz));
IkReal x1031=((IkReal(0.0450000000000000))*(sj3));
IkReal x1032=((IkReal(0.300000000000000))*(cj3));
IkReal x1033=((py)*(x1028));
IkReal x1034=((py)*(x1029));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1031)))+(((IkReal(-1.00000000000000))*(x1032)))+(x1030)+(((sj1)*(x1033))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1034)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1033)))+(((pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1033)))+(((sj1)*(x1031)))+(((sj1)*(x1032)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1030)))+(((IkReal(1.10000000000000))*(sj1)*(x1033)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1034))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1035=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1035;
evalcond[3]=x1035;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2))))));
dummyeval[0]=((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1036=x1035;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1036;
evalcond[3]=x1036;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1037=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1037)))+(((IkReal(2.36111111111111))*(x1037)))+(((IkReal(11.1111111111111))*(pp)*(x1037))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1038=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1039=((IkReal(0.0450000000000000))*(x1038));
cj0array[0]=((x1039)+(((IkReal(0.300000000000000))*(sj3)*(x1038)))+(((IkReal(-1.00000000000000))*(cj3)*(x1039))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1040=x1035;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1040;
evalcond[3]=x1040;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1041=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x1041)))+(((IkReal(-12.2222222222222))*(pz)*(x1041)))+(((IkReal(11.1111111111111))*(pp)*(x1041))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1042=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1043=((IkReal(0.0450000000000000))*(x1042));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1043)))+(x1043)+(((IkReal(0.300000000000000))*(sj3)*(x1042))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1044=x1035;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1044;
evalcond[3]=x1044;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1045=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1045)))+(((IkReal(-11.1111111111111))*(pp)*(x1045)))+(((IkReal(-2.36111111111111))*(x1045))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1046=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1047=((IkReal(0.0450000000000000))*(x1046));
cj0array[0]=((((cj3)*(x1047)))+(((IkReal(-0.300000000000000))*(sj3)*(x1046)))+(((IkReal(-1.00000000000000))*(x1047))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1048=x1035;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1048;
evalcond[3]=x1048;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1049=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1049)))+(((IkReal(-11.1111111111111))*(pp)*(x1049)))+(((IkReal(-2.36111111111111))*(x1049))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1050=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1051=((IkReal(0.0450000000000000))*(x1050));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1051)))+(((cj3)*(x1051)))+(((IkReal(-0.300000000000000))*(sj3)*(x1050))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1052=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1053=((IkReal(0.0450000000000000))*(cj2));
IkReal x1054=((IkReal(0.300000000000000))*(cj2)*(sj3));
if( IKabs(((x1052)*(((x1053)+(x1054)+(((IkReal(-1.00000000000000))*(cj3)*(x1053))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1052)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1053)))+(((sj2)*(x1054)))+(((sj2)*(x1053))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1052)*(((x1053)+(x1054)+(((IkReal(-1.00000000000000))*(cj3)*(x1053)))))))+IKsqr(((x1052)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1053)))+(((sj2)*(x1054)))+(((sj2)*(x1053)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1052)*(((x1053)+(x1054)+(((IkReal(-1.00000000000000))*(cj3)*(x1053)))))), ((x1052)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1053)))+(((sj2)*(x1054)))+(((sj2)*(x1053)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1055=IKcos(j0);
IkReal x1056=IKsin(j0);
IkReal x1057=((IkReal(0.0450000000000000))*(cj2));
IkReal x1058=((IkReal(0.300000000000000))*(sj3));
IkReal x1059=((IkReal(1.00000000000000))*(py));
IkReal x1060=((IkReal(0.0450000000000000))*(cj3));
IkReal x1061=((py)*(x1056));
IkReal x1062=((py)*(sj2)*(x1055));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1058)))+(((IkReal(-1.00000000000000))*(sj2)*(x1060)))+(((IkReal(-1.00000000000000))*(x1055)*(x1059))));
evalcond[1]=((((sj2)*(x1061)))+(((IkReal(-1.00000000000000))*(cj2)*(x1055)*(x1059))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(x1056)*(x1059)))+(x1058)+(((IkReal(-1.00000000000000))*(x1060)))+(((IkReal(-1.00000000000000))*(sj2)*(x1055)*(x1059))));
evalcond[3]=((x1057)+(((cj2)*(x1058)))+(((IkReal(-1.00000000000000))*(x1056)*(x1059)))+(((IkReal(-1.00000000000000))*(cj3)*(x1057))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1062)))+(((IkReal(0.0900000000000000))*(cj2)*(x1061)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1063=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1064=((IkReal(0.0450000000000000))*(sj2));
IkReal x1065=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1066=((cj3)*(x1064));
if( IKabs(((x1063)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1065)))+(((cj2)*(x1064)))+(((IkReal(-1.00000000000000))*(cj2)*(x1066))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1063)*(((x1065)+(x1064)+(((IkReal(-1.00000000000000))*(x1066))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1063)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1065)))+(((cj2)*(x1064)))+(((IkReal(-1.00000000000000))*(cj2)*(x1066)))))))+IKsqr(((x1063)*(((x1065)+(x1064)+(((IkReal(-1.00000000000000))*(x1066)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1063)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1065)))+(((cj2)*(x1064)))+(((IkReal(-1.00000000000000))*(cj2)*(x1066)))))), ((x1063)*(((x1065)+(x1064)+(((IkReal(-1.00000000000000))*(x1066)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1067=IKcos(j0);
IkReal x1068=IKsin(j0);
IkReal x1069=((IkReal(0.0450000000000000))*(cj2));
IkReal x1070=((IkReal(0.300000000000000))*(sj3));
IkReal x1071=((IkReal(1.00000000000000))*(py));
IkReal x1072=((IkReal(0.0450000000000000))*(cj3));
IkReal x1073=((py)*(x1068));
IkReal x1074=((py)*(sj2)*(x1067));
evalcond[0]=((((sj2)*(x1070)))+(((IkReal(-1.00000000000000))*(sj2)*(x1072)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x1067)*(x1071))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x1067)*(x1071)))+(((sj2)*(x1073))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1070)+(((IkReal(-1.00000000000000))*(sj2)*(x1067)*(x1071)))+(((IkReal(-1.00000000000000))*(cj2)*(x1068)*(x1071)))+(((IkReal(-1.00000000000000))*(x1072))));
evalcond[3]=((x1069)+(((cj2)*(x1070)))+(((IkReal(-1.00000000000000))*(x1068)*(x1071)))+(((IkReal(-1.00000000000000))*(cj3)*(x1069))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1074)))+(((IkReal(0.0900000000000000))*(cj2)*(x1073)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1075=((IkReal(0.0450000000000000))*(cj2));
IkReal x1076=((IkReal(0.300000000000000))*(sj3));
IkReal x1077=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((gconst28)*(((x1075)+(((cj2)*(x1076)))+(((IkReal(-1.00000000000000))*(cj3)*(x1075))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((x1077)+(((sj2)*(x1076)))+(((IkReal(-1.00000000000000))*(cj3)*(x1077))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst28)*(((x1075)+(((cj2)*(x1076)))+(((IkReal(-1.00000000000000))*(cj3)*(x1075)))))), ((gconst28)*(((x1077)+(((sj2)*(x1076)))+(((IkReal(-1.00000000000000))*(cj3)*(x1077)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1078=IKcos(j0);
IkReal x1079=IKsin(j0);
IkReal x1080=((IkReal(0.0450000000000000))*(cj2));
IkReal x1081=((IkReal(0.300000000000000))*(sj3));
IkReal x1082=((IkReal(1.00000000000000))*(py));
IkReal x1083=((IkReal(0.0450000000000000))*(cj3));
IkReal x1084=((py)*(x1079));
IkReal x1085=((py)*(sj2)*(x1078));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x1083)))+(((sj2)*(x1081)))+(((IkReal(-1.00000000000000))*(x1078)*(x1082)))+(((IkReal(0.0450000000000000))*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x1078)*(x1082)))+(((sj2)*(x1084))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1081)+(((IkReal(-1.00000000000000))*(sj2)*(x1078)*(x1082)))+(((IkReal(-1.00000000000000))*(cj2)*(x1079)*(x1082)))+(((IkReal(-1.00000000000000))*(x1083))));
evalcond[3]=((x1080)+(((IkReal(-1.00000000000000))*(x1079)*(x1082)))+(((cj2)*(x1081)))+(((IkReal(-1.00000000000000))*(cj3)*(x1080))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj2)*(x1084)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x1085))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1086=((IkReal(0.0450000000000000))*(sj3));
IkReal x1087=((IkReal(0.300000000000000))*(cj3));
IkReal x1088=((x1087)+(x1086));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1088))));
evalcond[3]=((IkReal(0.550000000000000))+(x1088)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2))))));
dummyeval[0]=((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1089=((IkReal(0.0450000000000000))*(sj3));
IkReal x1090=((IkReal(0.300000000000000))*(cj3));
IkReal x1091=((x1090)+(x1089));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1091)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1091)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1092=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1092)))+(((IkReal(12.2222222222222))*(pz)*(x1092)))+(((IkReal(2.36111111111111))*(x1092))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1093=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1094=((IkReal(0.0450000000000000))*(x1093));
cj0array[0]=((x1094)+(((IkReal(-1.00000000000000))*(cj3)*(x1094)))+(((IkReal(0.300000000000000))*(sj3)*(x1093))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1095=((IkReal(0.0450000000000000))*(sj3));
IkReal x1096=((IkReal(0.300000000000000))*(cj3));
IkReal x1097=((x1095)+(x1096));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1097)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1097)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1098=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1098)))+(((IkReal(12.2222222222222))*(pz)*(x1098)))+(((IkReal(2.36111111111111))*(x1098))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1099=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1100=((IkReal(0.0450000000000000))*(x1099));
cj0array[0]=((x1100)+(((IkReal(0.300000000000000))*(sj3)*(x1099)))+(((IkReal(-1.00000000000000))*(cj3)*(x1100))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1101=((IkReal(0.0450000000000000))*(sj3));
IkReal x1102=((IkReal(0.300000000000000))*(cj3));
IkReal x1103=((x1102)+(x1101));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1103))));
evalcond[3]=((IkReal(0.550000000000000))+(x1103)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1104=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1104)))+(((IkReal(-2.36111111111111))*(x1104)))+(((IkReal(-11.1111111111111))*(pp)*(x1104))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1105=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1106=((IkReal(0.0450000000000000))*(x1105));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1105)))+(((cj3)*(x1106)))+(((IkReal(-1.00000000000000))*(x1106))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1107=((IkReal(0.0450000000000000))*(sj3));
IkReal x1108=((IkReal(0.300000000000000))*(cj3));
IkReal x1109=((x1107)+(x1108));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1109))));
evalcond[3]=((IkReal(0.550000000000000))+(x1109)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1110=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1110)))+(((IkReal(-2.36111111111111))*(x1110)))+(((IkReal(-11.1111111111111))*(pp)*(x1110))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1111=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1112=((IkReal(0.0450000000000000))*(x1111));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1111)))+(((IkReal(-1.00000000000000))*(x1112)))+(((cj3)*(x1112))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1113=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1114=((IkReal(0.0450000000000000))*(cj2));
IkReal x1115=((IkReal(0.300000000000000))*(cj2)*(sj3));
if( IKabs(((x1113)*(((((IkReal(-1.00000000000000))*(x1114)))+(((IkReal(-1.00000000000000))*(x1115)))+(((cj3)*(x1114))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1113)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((sj2)*(x1114)))+(((sj2)*(x1115)))+(((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1114))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1113)*(((((IkReal(-1.00000000000000))*(x1114)))+(((IkReal(-1.00000000000000))*(x1115)))+(((cj3)*(x1114)))))))+IKsqr(((x1113)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((sj2)*(x1114)))+(((sj2)*(x1115)))+(((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1114)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1113)*(((((IkReal(-1.00000000000000))*(x1114)))+(((IkReal(-1.00000000000000))*(x1115)))+(((cj3)*(x1114)))))), ((x1113)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((sj2)*(x1114)))+(((sj2)*(x1115)))+(((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1114)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1116=IKcos(j0);
IkReal x1117=IKsin(j0);
IkReal x1118=((IkReal(0.0450000000000000))*(cj2));
IkReal x1119=((IkReal(0.300000000000000))*(sj3));
IkReal x1120=((IkReal(1.00000000000000))*(py));
IkReal x1121=((IkReal(0.0450000000000000))*(cj3));
IkReal x1122=((py)*(sj2)*(x1116));
IkReal x1123=((cj2)*(py)*(x1117));
evalcond[0]=((((sj2)*(x1119)))+(((IkReal(-1.00000000000000))*(sj2)*(x1121)))+(((IkReal(-1.00000000000000))*(x1116)*(x1120)))+(((IkReal(0.0450000000000000))*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x1117)*(x1120)))+(((IkReal(-1.00000000000000))*(cj2)*(x1116)*(x1120))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1119)+(x1123)+(((IkReal(-1.00000000000000))*(sj2)*(x1116)*(x1120)))+(((IkReal(-1.00000000000000))*(x1121))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1117)*(x1120)))+(((IkReal(-1.00000000000000))*(cj2)*(x1119)))+(((IkReal(-1.00000000000000))*(x1118)))+(((cj3)*(x1118))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1122)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x1123))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1124=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1125=((IkReal(0.0450000000000000))*(sj2));
IkReal x1126=((IkReal(0.300000000000000))*(sj2)*(sj3));
if( IKabs(((x1124)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1126)))+(((IkReal(-1.00000000000000))*(cj2)*(x1125)))+(((cj2)*(cj3)*(x1125))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1124)*(((x1125)+(x1126)+(((IkReal(-1.00000000000000))*(cj3)*(x1125))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1124)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1126)))+(((IkReal(-1.00000000000000))*(cj2)*(x1125)))+(((cj2)*(cj3)*(x1125)))))))+IKsqr(((x1124)*(((x1125)+(x1126)+(((IkReal(-1.00000000000000))*(cj3)*(x1125)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1124)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1126)))+(((IkReal(-1.00000000000000))*(cj2)*(x1125)))+(((cj2)*(cj3)*(x1125)))))), ((x1124)*(((x1125)+(x1126)+(((IkReal(-1.00000000000000))*(cj3)*(x1125)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1127=IKcos(j0);
IkReal x1128=IKsin(j0);
IkReal x1129=((IkReal(0.0450000000000000))*(cj2));
IkReal x1130=((IkReal(0.300000000000000))*(sj3));
IkReal x1131=((IkReal(1.00000000000000))*(py));
IkReal x1132=((IkReal(0.0450000000000000))*(cj3));
IkReal x1133=((py)*(sj2)*(x1127));
IkReal x1134=((cj2)*(py)*(x1128));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x1132)))+(((IkReal(-1.00000000000000))*(x1127)*(x1131)))+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1130))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x1128)*(x1131)))+(((IkReal(-1.00000000000000))*(cj2)*(x1127)*(x1131))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1130)+(x1134)+(((IkReal(-1.00000000000000))*(x1132)))+(((IkReal(-1.00000000000000))*(sj2)*(x1127)*(x1131))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x1130)))+(((IkReal(-1.00000000000000))*(x1129)))+(((IkReal(-1.00000000000000))*(x1128)*(x1131)))+(((cj3)*(x1129))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1133)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x1134))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1135=((IkReal(0.0450000000000000))*(cj2));
IkReal x1136=((IkReal(0.300000000000000))*(sj3));
IkReal x1137=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((gconst29)*(((((cj3)*(x1135)))+(((IkReal(-1.00000000000000))*(x1135)))+(((IkReal(-1.00000000000000))*(cj2)*(x1136))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((x1137)+(((sj2)*(x1136)))+(((IkReal(-1.00000000000000))*(cj3)*(x1137))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst29)*(((((cj3)*(x1135)))+(((IkReal(-1.00000000000000))*(x1135)))+(((IkReal(-1.00000000000000))*(cj2)*(x1136)))))), ((gconst29)*(((x1137)+(((sj2)*(x1136)))+(((IkReal(-1.00000000000000))*(cj3)*(x1137)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1138=IKcos(j0);
IkReal x1139=IKsin(j0);
IkReal x1140=((IkReal(0.0450000000000000))*(cj2));
IkReal x1141=((IkReal(0.300000000000000))*(sj3));
IkReal x1142=((IkReal(1.00000000000000))*(py));
IkReal x1143=((IkReal(0.0450000000000000))*(cj3));
IkReal x1144=((py)*(sj2)*(x1138));
IkReal x1145=((cj2)*(py)*(x1139));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1141)))+(((IkReal(-1.00000000000000))*(sj2)*(x1143)))+(((IkReal(-1.00000000000000))*(x1138)*(x1142))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x1139)*(x1142)))+(((IkReal(-1.00000000000000))*(cj2)*(x1138)*(x1142))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1141)+(x1145)+(((IkReal(-1.00000000000000))*(sj2)*(x1138)*(x1142)))+(((IkReal(-1.00000000000000))*(x1143))));
evalcond[3]=((((cj3)*(x1140)))+(((IkReal(-1.00000000000000))*(x1140)))+(((IkReal(-1.00000000000000))*(x1139)*(x1142)))+(((IkReal(-1.00000000000000))*(cj2)*(x1141))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1145)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x1144))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1146=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1146;
evalcond[3]=x1146;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1147=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x1147)))+(((IkReal(12.2222222222222))*(pz)*(x1147)))+(((IkReal(-11.1111111111111))*(pp)*(x1147))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1148=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1149=((IkReal(0.0450000000000000))*(x1148));
sj0array[0]=((((cj3)*(x1149)))+(((IkReal(-1.00000000000000))*(x1149)))+(((IkReal(-0.300000000000000))*(sj3)*(x1148))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1150=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1150;
evalcond[3]=x1150;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1151=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x1151)))+(((IkReal(-11.1111111111111))*(pp)*(x1151)))+(((IkReal(12.2222222222222))*(pz)*(x1151))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1152=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1153=((IkReal(0.0450000000000000))*(x1152));
sj0array[0]=((((IkReal(-1.00000000000000))*(x1153)))+(((cj3)*(x1153)))+(((IkReal(-0.300000000000000))*(sj3)*(x1152))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1154=((IkReal(0.0450000000000000))*(sj3));
IkReal x1155=((IkReal(0.300000000000000))*(cj3));
IkReal x1156=((x1155)+(x1154));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1156)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1156)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1157=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1157)))+(((IkReal(-2.36111111111111))*(x1157)))+(((IkReal(-11.1111111111111))*(pp)*(x1157))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1158=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1159=((IkReal(0.0450000000000000))*(x1158));
sj0array[0]=((((IkReal(-1.00000000000000))*(x1159)))+(((cj3)*(x1159)))+(((IkReal(-0.300000000000000))*(sj3)*(x1158))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1160=((IkReal(0.0450000000000000))*(sj3));
IkReal x1161=((IkReal(0.300000000000000))*(cj3));
IkReal x1162=((x1160)+(x1161));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1162))));
evalcond[3]=((IkReal(0.550000000000000))+(x1162)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1163=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x1163)))+(((IkReal(-11.1111111111111))*(pp)*(x1163)))+(((IkReal(-12.2222222222222))*(pz)*(x1163))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1164=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1165=((IkReal(0.0450000000000000))*(x1164));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1164)))+(((cj3)*(x1165)))+(((IkReal(-1.00000000000000))*(x1165))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1166=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1166)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1166)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1166)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))+IKsqr(((x1166)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1166)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))), ((x1166)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1167=IKcos(j0);
IkReal x1168=IKsin(j0);
IkReal x1169=((cj1)*(pz));
IkReal x1170=((IkReal(0.300000000000000))*(cj3));
IkReal x1171=((IkReal(0.0450000000000000))*(sj3));
IkReal x1172=((px)*(x1168));
IkReal x1173=((px)*(x1167));
evalcond[0]=((IkReal(-0.550000000000000))+(x1169)+(((sj1)*(x1173)))+(((IkReal(-1.00000000000000))*(x1170)))+(((IkReal(-1.00000000000000))*(x1171))));
evalcond[1]=((IkReal(0.0450000000000000))+(x1172)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x1173)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x1170)))+(((sj1)*(x1171)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1173))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x1173)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1169)))+(((IkReal(-0.0900000000000000))*(x1172))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1174=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1174)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((pz)*(sj1)*(x1174)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1174)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))+IKsqr(((pz)*(sj1)*(x1174)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1174)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))), ((pz)*(sj1)*(x1174)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1175=IKcos(j0);
IkReal x1176=IKsin(j0);
IkReal x1177=((cj1)*(pz));
IkReal x1178=((IkReal(0.300000000000000))*(cj3));
IkReal x1179=((IkReal(0.0450000000000000))*(sj3));
IkReal x1180=((px)*(x1176));
IkReal x1181=((px)*(x1175));
evalcond[0]=((IkReal(-0.550000000000000))+(x1177)+(((sj1)*(x1181)))+(((IkReal(-1.00000000000000))*(x1178)))+(((IkReal(-1.00000000000000))*(x1179))));
evalcond[1]=((IkReal(0.0450000000000000))+(x1180)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj1)*(x1181))));
evalcond[3]=((((sj1)*(x1178)))+(((sj1)*(x1179)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1181))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x1181)))+(((IkReal(-0.0900000000000000))*(x1180)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1177))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst30)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))), ((gconst30)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1182=IKcos(j0);
IkReal x1183=IKsin(j0);
IkReal x1184=((cj1)*(pz));
IkReal x1185=((IkReal(0.300000000000000))*(cj3));
IkReal x1186=((IkReal(0.0450000000000000))*(sj3));
IkReal x1187=((px)*(x1183));
IkReal x1188=((px)*(x1182));
evalcond[0]=((IkReal(-0.550000000000000))+(x1184)+(((sj1)*(x1188)))+(((IkReal(-1.00000000000000))*(x1185)))+(((IkReal(-1.00000000000000))*(x1186))));
evalcond[1]=((IkReal(0.0450000000000000))+(x1187)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj1)*(x1188))));
evalcond[3]=((((sj1)*(x1185)))+(((sj1)*(x1186)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1188))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x1188)))+(((IkReal(-0.0900000000000000))*(x1187)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1184))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1189=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1189;
evalcond[3]=x1189;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1190=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1190)))+(((IkReal(2.36111111111111))*(x1190)))+(((IkReal(11.1111111111111))*(pp)*(x1190))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1191=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1192=((IkReal(0.0450000000000000))*(x1191));
sj0array[0]=((x1192)+(((IkReal(0.300000000000000))*(sj3)*(x1191)))+(((IkReal(-1.00000000000000))*(cj3)*(x1192))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1193=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1193;
evalcond[3]=x1193;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1194=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1194)))+(((IkReal(2.36111111111111))*(x1194)))+(((IkReal(11.1111111111111))*(pp)*(x1194))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1195=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1196=((IkReal(0.0450000000000000))*(x1195));
sj0array[0]=((x1196)+(((IkReal(0.300000000000000))*(sj3)*(x1195)))+(((IkReal(-1.00000000000000))*(cj3)*(x1196))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1197=((IkReal(0.0450000000000000))*(sj3));
IkReal x1198=((IkReal(0.300000000000000))*(cj3));
IkReal x1199=((x1198)+(x1197));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1199)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1199)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1200=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1200)))+(((IkReal(2.36111111111111))*(x1200)))+(((IkReal(11.1111111111111))*(pp)*(x1200))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1201=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1202=((IkReal(0.0450000000000000))*(x1201));
sj0array[0]=((x1202)+(((IkReal(-1.00000000000000))*(cj3)*(x1202)))+(((IkReal(0.300000000000000))*(sj3)*(x1201))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1203=((IkReal(0.0450000000000000))*(sj3));
IkReal x1204=((IkReal(0.300000000000000))*(cj3));
IkReal x1205=((x1204)+(x1203));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1205))));
evalcond[3]=((IkReal(0.550000000000000))+(x1205)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1206=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1206)))+(((IkReal(2.36111111111111))*(x1206)))+(((IkReal(11.1111111111111))*(pp)*(x1206))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1207=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1208=((IkReal(0.0450000000000000))*(x1207));
sj0array[0]=((x1208)+(((IkReal(-1.00000000000000))*(cj3)*(x1208)))+(((IkReal(0.300000000000000))*(sj3)*(x1207))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1209=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1209)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1209)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1209)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))+IKsqr(((x1209)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1209)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))), ((x1209)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1210=IKcos(j0);
IkReal x1211=IKsin(j0);
IkReal x1212=((cj1)*(pz));
IkReal x1213=((IkReal(0.0450000000000000))*(sj3));
IkReal x1214=((IkReal(0.300000000000000))*(cj3));
IkReal x1215=((px)*(x1211));
IkReal x1216=((px)*(x1210));
evalcond[0]=((IkReal(-0.550000000000000))+(x1212)+(((sj1)*(x1216)))+(((IkReal(-1.00000000000000))*(x1214)))+(((IkReal(-1.00000000000000))*(x1213))));
evalcond[1]=((IkReal(-0.0450000000000000))+(x1215)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1216)))+(((pz)*(sj1))));
evalcond[3]=((((sj1)*(x1214)))+(((sj1)*(x1213)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1216))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x1216)))+(((IkReal(0.0900000000000000))*(x1215)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1217=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1217)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((pz)*(sj1)*(x1217)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1217)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))+IKsqr(((pz)*(sj1)*(x1217)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1217)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))), ((pz)*(sj1)*(x1217)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1218=IKcos(j0);
IkReal x1219=IKsin(j0);
IkReal x1220=((cj1)*(pz));
IkReal x1221=((IkReal(0.0450000000000000))*(sj3));
IkReal x1222=((IkReal(0.300000000000000))*(cj3));
IkReal x1223=((px)*(x1219));
IkReal x1224=((px)*(x1218));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x1224)))+(x1220)+(((IkReal(-1.00000000000000))*(x1221)))+(((IkReal(-1.00000000000000))*(x1222))));
evalcond[1]=((IkReal(-0.0450000000000000))+(x1223)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1224)))+(((pz)*(sj1))));
evalcond[3]=((((sj1)*(x1221)))+(((sj1)*(x1222)))+(((IkReal(-1.00000000000000))*(x1224)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1220)))+(((IkReal(1.10000000000000))*(sj1)*(x1224)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1223))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst31)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))), ((gconst31)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1225=IKcos(j0);
IkReal x1226=IKsin(j0);
IkReal x1227=((cj1)*(pz));
IkReal x1228=((IkReal(0.0450000000000000))*(sj3));
IkReal x1229=((IkReal(0.300000000000000))*(cj3));
IkReal x1230=((px)*(x1226));
IkReal x1231=((px)*(x1225));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x1231)))+(x1227)+(((IkReal(-1.00000000000000))*(x1228)))+(((IkReal(-1.00000000000000))*(x1229))));
evalcond[1]=((IkReal(-0.0450000000000000))+(x1230)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1231)))+(((pz)*(sj1))));
evalcond[3]=((((sj1)*(x1228)))+(((sj1)*(x1229)))+(((IkReal(-1.00000000000000))*(x1231)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1227)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1231)))+(((IkReal(0.0900000000000000))*(x1230))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1232=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1232;
evalcond[3]=x1232;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2))))));
dummyeval[0]=((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1233=x1232;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1233;
evalcond[3]=x1233;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1234=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1234)))+(((IkReal(-11.1111111111111))*(pp)*(x1234)))+(((IkReal(-2.36111111111111))*(x1234))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1235=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1236=((IkReal(0.0450000000000000))*(x1235));
sj0array[0]=((((cj3)*(x1236)))+(((IkReal(-1.00000000000000))*(x1236)))+(((IkReal(-0.300000000000000))*(sj3)*(x1235))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1237=x1232;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1237;
evalcond[3]=x1237;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1238=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1238)))+(((IkReal(-11.1111111111111))*(pp)*(x1238)))+(((IkReal(-2.36111111111111))*(x1238))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1239=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1240=((IkReal(0.0450000000000000))*(x1239));
sj0array[0]=((((IkReal(-1.00000000000000))*(x1240)))+(((IkReal(-0.300000000000000))*(sj3)*(x1239)))+(((cj3)*(x1240))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1241=x1232;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1241;
evalcond[3]=x1241;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1242=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1242)))+(((IkReal(11.1111111111111))*(pp)*(x1242)))+(((IkReal(-12.2222222222222))*(pz)*(x1242))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1243=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1244=((IkReal(0.0450000000000000))*(x1243));
sj0array[0]=((x1244)+(((IkReal(0.300000000000000))*(sj3)*(x1243)))+(((IkReal(-1.00000000000000))*(cj3)*(x1244))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1245=x1232;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1245;
evalcond[3]=x1245;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1246=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1246)))+(((IkReal(11.1111111111111))*(pp)*(x1246)))+(((IkReal(-12.2222222222222))*(pz)*(x1246))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1247=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1248=((IkReal(0.0450000000000000))*(x1247));
sj0array[0]=((x1248)+(((IkReal(0.300000000000000))*(sj3)*(x1247)))+(((IkReal(-1.00000000000000))*(cj3)*(x1248))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1249=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1250=((IkReal(0.0450000000000000))*(cj2));
IkReal x1251=((IkReal(0.300000000000000))*(cj2)*(sj3));
if( IKabs(((x1249)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x1251)))+(((IkReal(-1.00000000000000))*(sj2)*(x1250)))+(((cj3)*(sj2)*(x1250))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1249)*(((x1250)+(x1251)+(((IkReal(-1.00000000000000))*(cj3)*(x1250))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1249)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x1251)))+(((IkReal(-1.00000000000000))*(sj2)*(x1250)))+(((cj3)*(sj2)*(x1250)))))))+IKsqr(((x1249)*(((x1250)+(x1251)+(((IkReal(-1.00000000000000))*(cj3)*(x1250)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1249)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x1251)))+(((IkReal(-1.00000000000000))*(sj2)*(x1250)))+(((cj3)*(sj2)*(x1250)))))), ((x1249)*(((x1250)+(x1251)+(((IkReal(-1.00000000000000))*(cj3)*(x1250)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1252=IKsin(j0);
IkReal x1253=IKcos(j0);
IkReal x1254=((IkReal(0.0450000000000000))*(cj2));
IkReal x1255=((IkReal(0.300000000000000))*(sj3));
IkReal x1256=((IkReal(0.0450000000000000))*(cj3));
IkReal x1257=((px)*(x1252));
IkReal x1258=((px)*(x1253));
evalcond[0]=((x1257)+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1256)))+(((sj2)*(x1255))));
evalcond[1]=((((cj2)*(x1257)))+(((sj2)*(x1258))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1256)))+(x1255)+(((IkReal(-1.00000000000000))*(cj2)*(x1258)))+(((sj2)*(x1257))));
evalcond[3]=((x1254)+(((IkReal(-1.00000000000000))*(cj3)*(x1254)))+(((cj2)*(x1255)))+(((IkReal(-1.00000000000000))*(x1258))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj2)*(x1258)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1257)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1259=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1260=((IkReal(0.0450000000000000))*(sj2));
IkReal x1261=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1262=((cj3)*(x1260));
if( IKabs(((x1259)*(((x1262)+(((IkReal(-1.00000000000000))*(x1260)))+(((IkReal(-1.00000000000000))*(x1261))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1259)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1262)))+(((cj2)*(x1261)))+(((cj2)*(x1260))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1259)*(((x1262)+(((IkReal(-1.00000000000000))*(x1260)))+(((IkReal(-1.00000000000000))*(x1261)))))))+IKsqr(((x1259)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1262)))+(((cj2)*(x1261)))+(((cj2)*(x1260)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1259)*(((x1262)+(((IkReal(-1.00000000000000))*(x1260)))+(((IkReal(-1.00000000000000))*(x1261)))))), ((x1259)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1262)))+(((cj2)*(x1261)))+(((cj2)*(x1260)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1263=IKsin(j0);
IkReal x1264=IKcos(j0);
IkReal x1265=((IkReal(0.0450000000000000))*(cj2));
IkReal x1266=((IkReal(0.300000000000000))*(sj3));
IkReal x1267=((IkReal(0.0450000000000000))*(cj3));
IkReal x1268=((px)*(x1263));
IkReal x1269=((px)*(x1264));
evalcond[0]=((x1268)+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1267)))+(((sj2)*(x1266))));
evalcond[1]=((((cj2)*(x1268)))+(((sj2)*(x1269))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1266)+(((IkReal(-1.00000000000000))*(cj2)*(x1269)))+(((sj2)*(x1268)))+(((IkReal(-1.00000000000000))*(x1267))));
evalcond[3]=((x1265)+(((IkReal(-1.00000000000000))*(cj3)*(x1265)))+(((cj2)*(x1266)))+(((IkReal(-1.00000000000000))*(x1269))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj2)*(x1269)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1268)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1270=((IkReal(0.0450000000000000))*(cj2));
IkReal x1271=((IkReal(0.300000000000000))*(sj3));
IkReal x1272=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(x1272)))+(((cj3)*(x1272)))+(((IkReal(-1.00000000000000))*(sj2)*(x1271))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((x1270)+(((IkReal(-1.00000000000000))*(cj3)*(x1270)))+(((cj2)*(x1271))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst32)*(((((IkReal(-1.00000000000000))*(x1272)))+(((cj3)*(x1272)))+(((IkReal(-1.00000000000000))*(sj2)*(x1271)))))), ((gconst32)*(((x1270)+(((IkReal(-1.00000000000000))*(cj3)*(x1270)))+(((cj2)*(x1271)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1273=IKsin(j0);
IkReal x1274=IKcos(j0);
IkReal x1275=((IkReal(0.0450000000000000))*(cj2));
IkReal x1276=((IkReal(0.300000000000000))*(sj3));
IkReal x1277=((IkReal(0.0450000000000000))*(cj3));
IkReal x1278=((px)*(x1273));
IkReal x1279=((px)*(x1274));
evalcond[0]=((x1278)+(((sj2)*(x1276)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1277))));
evalcond[1]=((((sj2)*(x1279)))+(((cj2)*(x1278))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1276)+(((sj2)*(x1278)))+(((IkReal(-1.00000000000000))*(x1277)))+(((IkReal(-1.00000000000000))*(cj2)*(x1279))));
evalcond[3]=((x1275)+(((IkReal(-1.00000000000000))*(cj3)*(x1275)))+(((cj2)*(x1276)))+(((IkReal(-1.00000000000000))*(x1279))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj2)*(x1279)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1278)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1280=((IkReal(0.0450000000000000))*(sj3));
IkReal x1281=((IkReal(0.300000000000000))*(cj3));
IkReal x1282=((x1281)+(x1280));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1282))));
evalcond[3]=((IkReal(0.550000000000000))+(x1282)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2))))));
dummyeval[0]=((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1283=((IkReal(0.0450000000000000))*(sj3));
IkReal x1284=((IkReal(0.300000000000000))*(cj3));
IkReal x1285=((x1284)+(x1283));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1285))));
evalcond[3]=((IkReal(0.550000000000000))+(x1285)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1286=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1286)))+(((IkReal(-2.36111111111111))*(x1286)))+(((IkReal(-11.1111111111111))*(pp)*(x1286))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((px)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1287=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1288=((IkReal(0.0450000000000000))*(x1287));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1288)))+(((cj3)*(x1288)))+(((IkReal(-0.300000000000000))*(sj3)*(x1287))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(px)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1289=((IkReal(0.0450000000000000))*(sj3));
IkReal x1290=((IkReal(0.300000000000000))*(cj3));
IkReal x1291=((x1289)+(x1290));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1291)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1291)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1292=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1292)))+(((IkReal(11.1111111111111))*(pp)*(x1292)))+(((IkReal(2.36111111111111))*(x1292))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1293=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1294=((IkReal(0.0450000000000000))*(x1293));
cj0array[0]=((x1294)+(((IkReal(0.300000000000000))*(sj3)*(x1293)))+(((IkReal(-1.00000000000000))*(cj3)*(x1294))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1295=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1296=((IkReal(0.0450000000000000))*(sj2));
IkReal x1297=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1298=((cj3)*(x1296));
if( IKabs(((x1295)*(((x1298)+(((IkReal(-1.00000000000000))*(x1297)))+(((IkReal(-1.00000000000000))*(x1296))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1295)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1298)))+(((IkReal(-1.00000000000000))*(cj2)*(x1296)))+(((IkReal(-1.00000000000000))*(cj2)*(x1297))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1295)*(((x1298)+(((IkReal(-1.00000000000000))*(x1297)))+(((IkReal(-1.00000000000000))*(x1296)))))))+IKsqr(((x1295)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1298)))+(((IkReal(-1.00000000000000))*(cj2)*(x1296)))+(((IkReal(-1.00000000000000))*(cj2)*(x1297)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1295)*(((x1298)+(((IkReal(-1.00000000000000))*(x1297)))+(((IkReal(-1.00000000000000))*(x1296)))))), ((x1295)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1298)))+(((IkReal(-1.00000000000000))*(cj2)*(x1296)))+(((IkReal(-1.00000000000000))*(cj2)*(x1297)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1299=IKsin(j0);
IkReal x1300=IKcos(j0);
IkReal x1301=((IkReal(0.0450000000000000))*(cj2));
IkReal x1302=((IkReal(0.300000000000000))*(sj3));
IkReal x1303=((IkReal(0.0450000000000000))*(cj3));
IkReal x1304=((px)*(x1299));
IkReal x1305=((px)*(x1300));
evalcond[0]=((x1304)+(((sj2)*(x1302)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1303))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x1305)))+(((cj2)*(x1304))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1302)+(((sj2)*(x1304)))+(((IkReal(-1.00000000000000))*(x1303)))+(((cj2)*(x1305))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x1302)))+(((IkReal(-1.00000000000000))*(x1305)))+(((IkReal(-1.00000000000000))*(x1301)))+(((cj3)*(x1301))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1304)))+(((IkReal(-0.0900000000000000))*(cj2)*(x1305))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1306=((IkReal(0.0450000000000000))*(cj2));
IkReal x1307=((IkReal(0.300000000000000))*(sj3));
IkReal x1308=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(x1308)))+(((cj3)*(x1308)))+(((IkReal(-1.00000000000000))*(sj2)*(x1307))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(cj2)*(x1307)))+(((IkReal(-1.00000000000000))*(x1306)))+(((cj3)*(x1306))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(x1308)))+(((cj3)*(x1308)))+(((IkReal(-1.00000000000000))*(sj2)*(x1307)))))), ((gconst33)*(((((IkReal(-1.00000000000000))*(cj2)*(x1307)))+(((IkReal(-1.00000000000000))*(x1306)))+(((cj3)*(x1306)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1309=IKsin(j0);
IkReal x1310=IKcos(j0);
IkReal x1311=((IkReal(0.0450000000000000))*(cj2));
IkReal x1312=((IkReal(0.300000000000000))*(sj3));
IkReal x1313=((IkReal(0.0450000000000000))*(cj3));
IkReal x1314=((px)*(x1309));
IkReal x1315=((px)*(x1310));
evalcond[0]=((x1314)+(((sj2)*(x1312)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1313))));
evalcond[1]=((((cj2)*(x1314)))+(((IkReal(-1.00000000000000))*(sj2)*(x1315))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1312)+(((sj2)*(x1314)))+(((IkReal(-1.00000000000000))*(x1313)))+(((cj2)*(x1315))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x1312)))+(((IkReal(-1.00000000000000))*(x1315)))+(((IkReal(-1.00000000000000))*(x1311)))+(((cj3)*(x1311))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(cj2)*(x1315)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1314)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1316=(sj1)*(sj1);
IkReal x1317=(cj1)*(cj1);
IkReal x1318=((px)*(sj2));
IkReal x1319=((IkReal(0.550000000000000))*(cj1));
IkReal x1320=((IkReal(1.00000000000000))*(pz));
IkReal x1321=((cj2)*(py));
IkReal x1322=((IkReal(0.300000000000000))*(cj3));
IkReal x1323=((py)*(sj2));
IkReal x1324=((cj2)*(px));
IkReal x1325=((IkReal(0.0450000000000000))*(sj3));
IkReal x1326=((cj1)*(pz));
if( IKabs(((gconst1)*(((((x1318)*(x1319)))+(((IkReal(-1.00000000000000))*(x1321)*(x1325)))+(((IkReal(-1.00000000000000))*(x1321)*(x1322)))+(((IkReal(-1.00000000000000))*(x1316)*(x1318)*(x1320)))+(((IkReal(-0.550000000000000))*(x1321)))+(((IkReal(-1.00000000000000))*(x1317)*(x1318)*(x1320)))+(((x1321)*(x1326)))+(((cj1)*(x1318)*(x1322)))+(((cj1)*(x1318)*(x1325))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x1319)*(x1323)))+(((pz)*(x1317)*(x1323)))+(((IkReal(-1.00000000000000))*(x1324)*(x1325)))+(((IkReal(-1.00000000000000))*(x1322)*(x1324)))+(((x1324)*(x1326)))+(((IkReal(-0.550000000000000))*(x1324)))+(((IkReal(-1.00000000000000))*(cj1)*(x1323)*(x1325)))+(((IkReal(-1.00000000000000))*(cj1)*(x1322)*(x1323)))+(((pz)*(x1316)*(x1323))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((x1318)*(x1319)))+(((IkReal(-1.00000000000000))*(x1321)*(x1325)))+(((IkReal(-1.00000000000000))*(x1321)*(x1322)))+(((IkReal(-1.00000000000000))*(x1316)*(x1318)*(x1320)))+(((IkReal(-0.550000000000000))*(x1321)))+(((IkReal(-1.00000000000000))*(x1317)*(x1318)*(x1320)))+(((x1321)*(x1326)))+(((cj1)*(x1318)*(x1322)))+(((cj1)*(x1318)*(x1325)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(x1319)*(x1323)))+(((pz)*(x1317)*(x1323)))+(((IkReal(-1.00000000000000))*(x1324)*(x1325)))+(((IkReal(-1.00000000000000))*(x1322)*(x1324)))+(((x1324)*(x1326)))+(((IkReal(-0.550000000000000))*(x1324)))+(((IkReal(-1.00000000000000))*(cj1)*(x1323)*(x1325)))+(((IkReal(-1.00000000000000))*(cj1)*(x1322)*(x1323)))+(((pz)*(x1316)*(x1323)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1327=IKsin(j0);
IkReal x1328=IKcos(j0);
IkReal x1329=((cj1)*(sj2));
IkReal x1330=((IkReal(0.0900000000000000))*(sj2));
IkReal x1331=((IkReal(0.300000000000000))*(sj3));
IkReal x1332=((IkReal(0.0450000000000000))*(cj3));
IkReal x1333=((IkReal(1.10000000000000))*(sj1));
IkReal x1334=((IkReal(0.300000000000000))*(cj3));
IkReal x1335=((cj1)*(cj2));
IkReal x1336=((IkReal(0.0450000000000000))*(sj3));
IkReal x1337=((IkReal(1.00000000000000))*(sj2));
IkReal x1338=((cj1)*(pz));
IkReal x1339=((px)*(x1327));
IkReal x1340=((px)*(x1328));
IkReal x1341=((py)*(x1328));
IkReal x1342=((py)*(x1327));
IkReal x1343=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(x1338)+(((sj1)*(x1342)))+(((sj1)*(x1340)))+(((IkReal(-1.00000000000000))*(x1336)))+(((IkReal(-1.00000000000000))*(x1334))));
evalcond[1]=((x1339)+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1331)))+(((IkReal(-1.00000000000000))*(sj2)*(x1332)))+(((IkReal(-1.00000000000000))*(x1341))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1337)))+(((x1329)*(x1342)))+(((x1329)*(x1340)))+(((IkReal(-1.00000000000000))*(cj2)*(x1341)))+(((cj2)*(x1339))));
evalcond[3]=((IkReal(0.0450000000000000))+(x1343)+(x1331)+(((sj2)*(x1339)))+(((IkReal(-1.00000000000000))*(x1337)*(x1341)))+(((IkReal(-1.00000000000000))*(x1332)))+(((IkReal(-1.00000000000000))*(x1335)*(x1340)))+(((IkReal(-1.00000000000000))*(x1335)*(x1342))));
evalcond[4]=((((x1331)*(x1335)))+(((IkReal(0.0450000000000000))*(x1335)))+(((sj1)*(x1336)))+(((sj1)*(x1334)))+(((IkReal(-1.00000000000000))*(x1332)*(x1335)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1340)))+(((IkReal(-1.00000000000000))*(x1342))));
evalcond[5]=((IkReal(-0.212500000000000))+(((x1330)*(x1341)))+(((x1333)*(x1342)))+(((x1333)*(x1340)))+(((IkReal(-1.00000000000000))*(x1330)*(x1339)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1338)))+(((IkReal(0.0900000000000000))*(x1335)*(x1340)))+(((IkReal(0.0900000000000000))*(x1335)*(x1342)))+(((IkReal(-0.0900000000000000))*(x1343))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1344=((IkReal(0.0450000000000000))*(px));
IkReal x1345=((sj1)*(sj2));
IkReal x1346=((IkReal(0.300000000000000))*(cj3));
IkReal x1347=((IkReal(0.300000000000000))*(sj3));
IkReal x1348=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x1349=((IkReal(0.0450000000000000))*(py)*(x1345));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(py)*(x1348)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x1345)*(x1347)))+(((cj3)*(x1344)*(x1345)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x1344)*(x1345)))+(((py)*(x1346))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((x1349)+(((IkReal(-1.00000000000000))*(px)*(x1348)))+(((px)*(x1346)))+(((IkReal(-1.00000000000000))*(cj3)*(x1349)))+(((py)*(x1345)*(x1347)))+(((IkReal(0.550000000000000))*(px)))+(((sj3)*(x1344))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(py)*(x1348)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x1345)*(x1347)))+(((cj3)*(x1344)*(x1345)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x1344)*(x1345)))+(((py)*(x1346)))))), ((gconst0)*(((x1349)+(((IkReal(-1.00000000000000))*(px)*(x1348)))+(((px)*(x1346)))+(((IkReal(-1.00000000000000))*(cj3)*(x1349)))+(((py)*(x1345)*(x1347)))+(((IkReal(0.550000000000000))*(px)))+(((sj3)*(x1344)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1350=IKsin(j0);
IkReal x1351=IKcos(j0);
IkReal x1352=((cj1)*(sj2));
IkReal x1353=((IkReal(0.0900000000000000))*(sj2));
IkReal x1354=((IkReal(0.300000000000000))*(sj3));
IkReal x1355=((IkReal(0.0450000000000000))*(cj3));
IkReal x1356=((IkReal(1.10000000000000))*(sj1));
IkReal x1357=((IkReal(0.300000000000000))*(cj3));
IkReal x1358=((cj1)*(cj2));
IkReal x1359=((IkReal(0.0450000000000000))*(sj3));
IkReal x1360=((IkReal(1.00000000000000))*(sj2));
IkReal x1361=((cj1)*(pz));
IkReal x1362=((px)*(x1350));
IkReal x1363=((px)*(x1351));
IkReal x1364=((py)*(x1351));
IkReal x1365=((py)*(x1350));
IkReal x1366=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(x1361)+(((IkReal(-1.00000000000000))*(x1359)))+(((IkReal(-1.00000000000000))*(x1357)))+(((sj1)*(x1363)))+(((sj1)*(x1365))));
evalcond[1]=((x1362)+(((IkReal(-1.00000000000000))*(x1364)))+(((IkReal(-1.00000000000000))*(sj2)*(x1355)))+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1354))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1360)))+(((IkReal(-1.00000000000000))*(cj2)*(x1364)))+(((cj2)*(x1362)))+(((x1352)*(x1363)))+(((x1352)*(x1365))));
evalcond[3]=((IkReal(0.0450000000000000))+(x1354)+(x1366)+(((IkReal(-1.00000000000000))*(x1355)))+(((IkReal(-1.00000000000000))*(x1358)*(x1365)))+(((IkReal(-1.00000000000000))*(x1358)*(x1363)))+(((sj2)*(x1362)))+(((IkReal(-1.00000000000000))*(x1360)*(x1364))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1363)))+(((IkReal(-1.00000000000000))*(x1365)))+(((IkReal(0.0450000000000000))*(x1358)))+(((sj1)*(x1357)))+(((sj1)*(x1359)))+(((x1354)*(x1358)))+(((IkReal(-1.00000000000000))*(x1355)*(x1358)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1361)))+(((x1356)*(x1365)))+(((x1356)*(x1363)))+(((IkReal(-1.00000000000000))*(x1353)*(x1362)))+(((IkReal(0.0900000000000000))*(x1358)*(x1365)))+(((IkReal(0.0900000000000000))*(x1358)*(x1363)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1366)))+(((x1353)*(x1364))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1367=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1368=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((x1367)+(((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x1367))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((x1367)+(((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x1367))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1369=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((x1367)+(((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x1367)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x1369)))+(((IkReal(-1.00000000000000))*(x1368))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x1369)+(((IkReal(-1.00000000000000))*(x1368))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1370=(py)*(py);
IkReal x1371=(cj2)*(cj2);
IkReal x1372=(sj2)*(sj2);
IkReal x1373=IKcos(j0);
IkReal x1374=IKsin(j0);
IkReal x1375=(px)*(px);
IkReal x1376=((IkReal(0.0450000000000000))*(sj2));
IkReal x1377=((IkReal(1.00000000000000))*(x1375));
IkReal x1378=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1379=((px)*(py)*(x1372));
IkReal x1380=((px)*(py)*(x1371));
evalcond[0]=((((x1373)*(((((x1370)*(x1371)))+(((x1370)*(x1372)))))))+(((x1374)*(((((IkReal(-1.00000000000000))*(x1379)))+(((IkReal(-1.00000000000000))*(x1380)))))))+(((cj3)*(py)*(x1376)))+(((IkReal(-1.00000000000000))*(py)*(x1376)))+(((IkReal(-1.00000000000000))*(py)*(x1378))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1378)))+(((IkReal(-1.00000000000000))*(px)*(x1376)))+(((cj3)*(px)*(x1376)))+(((x1373)*(((x1379)+(x1380)))))+(((x1374)*(((((IkReal(-1.00000000000000))*(x1371)*(x1377)))+(((IkReal(-1.00000000000000))*(x1372)*(x1377))))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x1381=((py)*(sj0));
IkReal x1382=((IkReal(0.300000000000000))*(cj3));
IkReal x1383=((cj0)*(px));
IkReal x1384=((cj2)*(pz));
IkReal x1385=((IkReal(0.0450000000000000))*(sj3));
gconst34=IKsign(((((IkReal(-1.00000000000000))*(x1383)*(x1385)))+(((IkReal(-1.00000000000000))*(x1382)*(x1383)))+(((IkReal(0.0450000000000000))*(cj3)*(x1384)))+(((IkReal(-1.00000000000000))*(x1381)*(x1382)))+(((IkReal(-1.00000000000000))*(x1381)*(x1385)))+(((IkReal(-0.0450000000000000))*(x1384)))+(((IkReal(-0.550000000000000))*(x1381)))+(((IkReal(-0.550000000000000))*(x1383)))+(((IkReal(-0.300000000000000))*(sj3)*(x1384)))));
IkReal x1386=((py)*(sj0));
IkReal x1387=((cj2)*(pz));
IkReal x1388=((IkReal(6.66666666666667))*(cj3));
IkReal x1389=((cj0)*(px));
IkReal x1390=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1389)*(x1390)))+(((cj3)*(x1387)))+(((IkReal(-12.2222222222222))*(x1386)))+(((IkReal(-12.2222222222222))*(x1389)))+(((IkReal(-1.00000000000000))*(x1387)))+(((IkReal(-6.66666666666667))*(sj3)*(x1387)))+(((IkReal(-1.00000000000000))*(x1388)*(x1389)))+(((IkReal(-1.00000000000000))*(x1386)*(x1388)))+(((IkReal(-1.00000000000000))*(x1386)*(x1390))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1391=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1391;
evalcond[3]=x1391;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x1392=((cj0)*(px));
IkReal x1393=((IkReal(0.0450000000000000))*(pz));
IkReal x1394=((py)*(sj0));
IkReal x1395=((IkReal(0.300000000000000))*(cj3));
IkReal x1396=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-0.550000000000000))*(x1392)))+(((IkReal(-0.550000000000000))*(x1394)))+(((IkReal(-1.00000000000000))*(x1392)*(x1396)))+(((IkReal(-1.00000000000000))*(x1392)*(x1395)))+(((IkReal(-1.00000000000000))*(x1394)*(x1395)))+(((IkReal(-1.00000000000000))*(x1394)*(x1396)))+(((cj3)*(x1393)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x1393)))));
IkReal x1397=((py)*(sj0));
IkReal x1398=((IkReal(6.66666666666667))*(cj3));
IkReal x1399=((cj0)*(px));
IkReal x1400=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x1399)*(x1400)))+(((IkReal(-1.00000000000000))*(x1397)*(x1398)))+(((IkReal(-12.2222222222222))*(x1397)))+(((IkReal(-12.2222222222222))*(x1399)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1398)*(x1399)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x1397)*(x1400))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1401=((py)*(sj0));
IkReal x1402=((pz)*(sj3));
IkReal x1403=((cj0)*(px));
IkReal x1404=((IkReal(0.300000000000000))*(sj3));
IkReal x1405=((IkReal(0.0450000000000000))*(cj3));
IkReal x1406=((IkReal(0.300000000000000))*(cj3));
IkReal x1407=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-0.550000000000000))*(x1401)))+(((IkReal(-0.550000000000000))*(x1403)))+(((IkReal(0.300000000000000))*(x1402)))+(((IkReal(-1.00000000000000))*(x1401)*(x1407)))+(((IkReal(-1.00000000000000))*(x1401)*(x1406)))+(((IkReal(-1.00000000000000))*(pz)*(x1405)))+(((IkReal(-1.00000000000000))*(x1403)*(x1406)))+(((IkReal(-1.00000000000000))*(x1403)*(x1407))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x1403)*(x1405)))+(((IkReal(-1.00000000000000))*(x1401)*(x1404)))+(((IkReal(-0.0450000000000000))*(x1403)))+(((IkReal(-0.0450000000000000))*(x1402)))+(((IkReal(-0.0450000000000000))*(x1401)))+(((IkReal(-1.00000000000000))*(pz)*(x1406)))+(((IkReal(-1.00000000000000))*(x1403)*(x1404)))+(((x1401)*(x1405))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-0.550000000000000))*(x1401)))+(((IkReal(-0.550000000000000))*(x1403)))+(((IkReal(0.300000000000000))*(x1402)))+(((IkReal(-1.00000000000000))*(x1401)*(x1407)))+(((IkReal(-1.00000000000000))*(x1401)*(x1406)))+(((IkReal(-1.00000000000000))*(pz)*(x1405)))+(((IkReal(-1.00000000000000))*(x1403)*(x1406)))+(((IkReal(-1.00000000000000))*(x1403)*(x1407)))))), ((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x1403)*(x1405)))+(((IkReal(-1.00000000000000))*(x1401)*(x1404)))+(((IkReal(-0.0450000000000000))*(x1403)))+(((IkReal(-0.0450000000000000))*(x1402)))+(((IkReal(-0.0450000000000000))*(x1401)))+(((IkReal(-1.00000000000000))*(pz)*(x1406)))+(((IkReal(-1.00000000000000))*(x1403)*(x1404)))+(((x1401)*(x1405)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1408=IKsin(j1);
IkReal x1409=IKcos(j1);
IkReal x1410=((IkReal(0.300000000000000))*(cj3));
IkReal x1411=((IkReal(0.0450000000000000))*(cj3));
IkReal x1412=((cj0)*(px));
IkReal x1413=((py)*(sj0));
IkReal x1414=((IkReal(0.0450000000000000))*(sj3));
IkReal x1415=((IkReal(0.300000000000000))*(sj3));
IkReal x1416=((IkReal(0.0450000000000000))*(x1408));
IkReal x1417=((IkReal(1.00000000000000))*(x1409));
IkReal x1418=((pz)*(x1408));
IkReal x1419=((pz)*(x1409));
IkReal x1420=((IkReal(0.0900000000000000))*(x1409));
IkReal x1421=((IkReal(1.10000000000000))*(x1408));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1410)))+(((IkReal(-1.00000000000000))*(x1414)))+(x1419)+(((x1408)*(x1413)))+(((x1408)*(x1412))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x1409)))+(((IkReal(-1.00000000000000))*(x1408)*(x1411)))+(pz)+(x1416)+(((IkReal(-1.00000000000000))*(x1409)*(x1414)))+(((IkReal(-1.00000000000000))*(x1409)*(x1410)))+(((x1408)*(x1415))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1411)))+(((IkReal(-1.00000000000000))*(x1412)*(x1417)))+(((IkReal(-1.00000000000000))*(x1413)*(x1417)))+(x1418)+(x1415));
evalcond[3]=((((IkReal(0.0450000000000000))*(x1409)))+(((IkReal(-1.00000000000000))*(x1409)*(x1411)))+(((x1409)*(x1415)))+(((x1408)*(x1410)))+(((x1408)*(x1414)))+(((IkReal(0.550000000000000))*(x1408)))+(((IkReal(-1.00000000000000))*(x1412)))+(((IkReal(-1.00000000000000))*(x1413))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1419)))+(((x1412)*(x1420)))+(((x1412)*(x1421)))+(((IkReal(-0.0900000000000000))*(x1418)))+(((x1413)*(x1421)))+(((x1413)*(x1420))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1422=(cj3)*(cj3);
IkReal x1423=(sj3)*(sj3);
IkReal x1424=((cj3)*(sj3));
IkReal x1425=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x1424)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x1423)))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x1422))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(-0.0135000000000000))*(x1423)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1425)))+(((IkReal(-0.0879750000000000))*(x1424)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1425)))+(((IkReal(0.0135000000000000))*(x1422)))+(((IkReal(-0.167025000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x1424)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x1423)))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x1422)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(-0.0135000000000000))*(x1423)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1425)))+(((IkReal(-0.0879750000000000))*(x1424)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1425)))+(((IkReal(0.0135000000000000))*(x1422)))+(((IkReal(-0.167025000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1426=IKsin(j1);
IkReal x1427=IKcos(j1);
IkReal x1428=((IkReal(0.300000000000000))*(cj3));
IkReal x1429=((IkReal(0.0450000000000000))*(cj3));
IkReal x1430=((cj0)*(px));
IkReal x1431=((py)*(sj0));
IkReal x1432=((IkReal(0.0450000000000000))*(sj3));
IkReal x1433=((IkReal(0.300000000000000))*(sj3));
IkReal x1434=((IkReal(0.0450000000000000))*(x1426));
IkReal x1435=((IkReal(1.00000000000000))*(x1427));
IkReal x1436=((pz)*(x1426));
IkReal x1437=((pz)*(x1427));
IkReal x1438=((IkReal(0.0900000000000000))*(x1427));
IkReal x1439=((IkReal(1.10000000000000))*(x1426));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1432)))+(((x1426)*(x1431)))+(((x1426)*(x1430)))+(x1437)+(((IkReal(-1.00000000000000))*(x1428))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x1427)))+(((IkReal(-1.00000000000000))*(x1426)*(x1429)))+(((IkReal(-1.00000000000000))*(x1427)*(x1428)))+(pz)+(((x1426)*(x1433)))+(x1434)+(((IkReal(-1.00000000000000))*(x1427)*(x1432))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1431)*(x1435)))+(x1436)+(x1433)+(((IkReal(-1.00000000000000))*(x1430)*(x1435)))+(((IkReal(-1.00000000000000))*(x1429))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1431)))+(((IkReal(-1.00000000000000))*(x1430)))+(((IkReal(-1.00000000000000))*(x1427)*(x1429)))+(((x1426)*(x1428)))+(((x1427)*(x1433)))+(((IkReal(0.550000000000000))*(x1426)))+(((IkReal(0.0450000000000000))*(x1427)))+(((x1426)*(x1432))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1430)*(x1438)))+(((x1430)*(x1439)))+(((IkReal(-0.0900000000000000))*(x1436)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1437)))+(((x1431)*(x1439)))+(((x1431)*(x1438))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1440=((px)*(sj0));
IkReal x1441=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1441)))+(x1440));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1440)))+(x1441));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x1442=((cj0)*(px));
IkReal x1443=((IkReal(0.0450000000000000))*(pz));
IkReal x1444=((py)*(sj0));
IkReal x1445=((IkReal(0.300000000000000))*(cj3));
IkReal x1446=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((x1443)+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x1444)))+(((IkReal(-0.550000000000000))*(x1442)))+(((IkReal(-1.00000000000000))*(x1444)*(x1445)))+(((IkReal(-1.00000000000000))*(x1444)*(x1446)))+(((IkReal(-1.00000000000000))*(x1442)*(x1445)))+(((IkReal(-1.00000000000000))*(x1442)*(x1446)))+(((IkReal(-1.00000000000000))*(cj3)*(x1443)))));
IkReal x1447=((py)*(sj0));
IkReal x1448=((IkReal(6.66666666666667))*(cj3));
IkReal x1449=((cj0)*(px));
IkReal x1450=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1447)*(x1450)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x1447)*(x1448)))+(pz)+(((IkReal(-1.00000000000000))*(x1449)*(x1450)))+(((IkReal(-12.2222222222222))*(x1449)))+(((IkReal(-12.2222222222222))*(x1447)))+(((IkReal(-1.00000000000000))*(x1448)*(x1449))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1451=((py)*(sj0));
IkReal x1452=((cj0)*(px));
IkReal x1453=((IkReal(0.300000000000000))*(sj3));
IkReal x1454=((IkReal(0.0450000000000000))*(cj3));
IkReal x1455=((IkReal(0.0450000000000000))*(pz));
IkReal x1456=((IkReal(0.300000000000000))*(cj3));
IkReal x1457=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst39)*(((((IkReal(0.550000000000000))*(x1452)))+(((IkReal(0.550000000000000))*(x1451)))+(((pz)*(x1453)))+(x1455)+(((IkReal(-1.00000000000000))*(pz)*(x1454)))+(((x1452)*(x1456)))+(((x1452)*(x1457)))+(((x1451)*(x1456)))+(((x1451)*(x1457))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((pz)*(x1456)))+(((sj3)*(x1455)))+(((IkReal(-0.0450000000000000))*(x1451)))+(((IkReal(-0.0450000000000000))*(x1452)))+(((IkReal(-1.00000000000000))*(x1452)*(x1453)))+(((IkReal(-1.00000000000000))*(x1451)*(x1453)))+(((IkReal(0.550000000000000))*(pz)))+(((x1452)*(x1454)))+(((x1451)*(x1454))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((IkReal(0.550000000000000))*(x1452)))+(((IkReal(0.550000000000000))*(x1451)))+(((pz)*(x1453)))+(x1455)+(((IkReal(-1.00000000000000))*(pz)*(x1454)))+(((x1452)*(x1456)))+(((x1452)*(x1457)))+(((x1451)*(x1456)))+(((x1451)*(x1457)))))), ((gconst39)*(((((pz)*(x1456)))+(((sj3)*(x1455)))+(((IkReal(-0.0450000000000000))*(x1451)))+(((IkReal(-0.0450000000000000))*(x1452)))+(((IkReal(-1.00000000000000))*(x1452)*(x1453)))+(((IkReal(-1.00000000000000))*(x1451)*(x1453)))+(((IkReal(0.550000000000000))*(pz)))+(((x1452)*(x1454)))+(((x1451)*(x1454)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1458=IKsin(j1);
IkReal x1459=IKcos(j1);
IkReal x1460=((IkReal(0.300000000000000))*(cj3));
IkReal x1461=((IkReal(0.0450000000000000))*(cj3));
IkReal x1462=((cj0)*(px));
IkReal x1463=((py)*(sj0));
IkReal x1464=((IkReal(0.0450000000000000))*(sj3));
IkReal x1465=((IkReal(0.300000000000000))*(sj3));
IkReal x1466=((IkReal(0.0450000000000000))*(x1458));
IkReal x1467=((pz)*(x1458));
IkReal x1468=((pz)*(x1459));
IkReal x1469=((IkReal(0.0900000000000000))*(x1459));
IkReal x1470=((IkReal(1.10000000000000))*(x1458));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1460)))+(((IkReal(-1.00000000000000))*(x1464)))+(((x1458)*(x1463)))+(((x1458)*(x1462)))+(x1468));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1458)*(x1465)))+(((IkReal(-1.00000000000000))*(x1466)))+(((IkReal(-1.00000000000000))*(x1459)*(x1464)))+(((IkReal(-1.00000000000000))*(x1459)*(x1460)))+(((x1458)*(x1461)))+(pz)+(((IkReal(-0.550000000000000))*(x1459))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1461)))+(((x1459)*(x1462)))+(((x1459)*(x1463)))+(x1465)+(((IkReal(-1.00000000000000))*(x1467))));
evalcond[3]=((((IkReal(0.550000000000000))*(x1458)))+(((IkReal(-1.00000000000000))*(x1459)*(x1465)))+(((x1459)*(x1461)))+(((x1458)*(x1460)))+(((x1458)*(x1464)))+(((IkReal(-0.0450000000000000))*(x1459)))+(((IkReal(-1.00000000000000))*(x1463)))+(((IkReal(-1.00000000000000))*(x1462))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1468)))+(((x1462)*(x1470)))+(((IkReal(0.0900000000000000))*(x1467)))+(((IkReal(-1.00000000000000))*(x1462)*(x1469)))+(((IkReal(-1.00000000000000))*(x1463)*(x1469)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1463)*(x1470))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1471=(sj3)*(sj3);
IkReal x1472=(cj3)*(cj3);
IkReal x1473=((cj3)*(sj3));
IkReal x1474=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x1472)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x1471)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x1473)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1474)))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x1471)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1474)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x1472)))+(((IkReal(0.0879750000000000))*(x1473))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x1472)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x1471)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x1473)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1474)))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x1471)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1474)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x1472)))+(((IkReal(0.0879750000000000))*(x1473)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1475=IKsin(j1);
IkReal x1476=IKcos(j1);
IkReal x1477=((IkReal(0.300000000000000))*(cj3));
IkReal x1478=((IkReal(0.0450000000000000))*(cj3));
IkReal x1479=((cj0)*(px));
IkReal x1480=((py)*(sj0));
IkReal x1481=((IkReal(0.0450000000000000))*(sj3));
IkReal x1482=((IkReal(0.300000000000000))*(sj3));
IkReal x1483=((IkReal(0.0450000000000000))*(x1475));
IkReal x1484=((pz)*(x1475));
IkReal x1485=((pz)*(x1476));
IkReal x1486=((IkReal(0.0900000000000000))*(x1476));
IkReal x1487=((IkReal(1.10000000000000))*(x1475));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1481)))+(x1485)+(((IkReal(-1.00000000000000))*(x1477)))+(((x1475)*(x1480)))+(((x1475)*(x1479))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1483)))+(((IkReal(-1.00000000000000))*(x1476)*(x1477)))+(pz)+(((IkReal(-1.00000000000000))*(x1475)*(x1482)))+(((IkReal(-0.550000000000000))*(x1476)))+(((x1475)*(x1478)))+(((IkReal(-1.00000000000000))*(x1476)*(x1481))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x1476)*(x1480)))+(((IkReal(-1.00000000000000))*(x1484)))+(((x1476)*(x1479)))+(x1482)+(((IkReal(-1.00000000000000))*(x1478))));
evalcond[3]=((((IkReal(0.550000000000000))*(x1475)))+(((IkReal(-1.00000000000000))*(x1479)))+(((IkReal(-1.00000000000000))*(x1480)))+(((x1476)*(x1478)))+(((x1475)*(x1481)))+(((x1475)*(x1477)))+(((IkReal(-0.0450000000000000))*(x1476)))+(((IkReal(-1.00000000000000))*(x1476)*(x1482))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1479)*(x1486)))+(((x1480)*(x1487)))+(((IkReal(0.0900000000000000))*(x1484)))+(((IkReal(-1.00000000000000))*(x1480)*(x1486)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1485)))+(((x1479)*(x1487))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1488=((IkReal(-1.00000000000000))*(cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1488;
evalcond[3]=x1488;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x1489=((IkReal(0.0450000000000000))*(pz));
IkReal x1490=((py)*(sj0));
gconst41=IKsign(((((cj3)*(x1489)))+(((IkReal(-1.00000000000000))*(x1489)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.0450000000000000))*(sj3)*(x1490)))+(((IkReal(-0.550000000000000))*(x1490)))+(((IkReal(-0.300000000000000))*(cj3)*(x1490)))));
IkReal x1491=((py)*(sj0));
dummyeval[0]=((((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-6.66666666666667))*(cj3)*(x1491)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x1491)))+(((IkReal(-12.2222222222222))*(x1491)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1492=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1492))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1492))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1493=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1493)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1493))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1493)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1493)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1493)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1493)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1494=IKcos(j1);
IkReal x1495=IKsin(j1);
IkReal x1496=((pz)*(x1495));
IkReal x1497=((pz)*(x1494));
evalcond[0]=((IkReal(-0.850000000000000))+(x1497));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1494)))+(pz));
evalcond[2]=x1496;
evalcond[3]=((IkReal(0.850000000000000))*(x1495));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1496)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1497))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1498=IKcos(j1);
IkReal x1499=IKsin(j1);
IkReal x1500=((pz)*(x1499));
IkReal x1501=((pz)*(x1498));
evalcond[0]=((IkReal(-0.850000000000000))+(x1501));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1498)))+(pz));
evalcond[2]=x1500;
evalcond[3]=((IkReal(0.850000000000000))*(x1499));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1500)))+(((IkReal(1.10000000000000))*(x1501)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1502=((IkReal(1.00000000000000))*(pp));
IkReal x1503=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x1502)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x1503;
evalcond[4]=x1503;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1502))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1504=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1504));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1504))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1505=IKsin(j1);
IkReal x1506=IKcos(j1);
IkReal x1507=((IkReal(0.0450000000000000))*(x1506));
evalcond[0]=((((IkReal(0.550000000000000))*(x1505)))+(((IkReal(0.300000000000000))*(sj3)*(x1506)))+(((IkReal(0.300000000000000))*(cj3)*(x1505)))+(((IkReal(0.0450000000000000))*(sj3)*(x1505)))+(x1507)+(((IkReal(-1.00000000000000))*(cj3)*(x1507))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1508=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x1508)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1508))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1509=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1509));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1509))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1510=IKsin(j1);
IkReal x1511=IKcos(j1);
IkReal x1512=((IkReal(0.0450000000000000))*(x1511));
evalcond[0]=((((IkReal(0.550000000000000))*(x1510)))+(((IkReal(0.300000000000000))*(sj3)*(x1511)))+(((IkReal(0.300000000000000))*(cj3)*(x1510)))+(((IkReal(0.0450000000000000))*(sj3)*(x1510)))+(x1512)+(((IkReal(-1.00000000000000))*(cj3)*(x1512))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1513=(cj3)*(cj3);
IkReal x1514=(sj3)*(sj3);
IkReal x1515=((cj3)*(sj3));
if( IKabs(((gconst41)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x1513)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x1515)))+(((IkReal(-0.00202500000000000))*(x1514)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x1515)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x1513)))+(((IkReal(-0.0135000000000000))*(x1514)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst41)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x1513)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x1515)))+(((IkReal(-0.00202500000000000))*(x1514)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst41)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x1515)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x1513)))+(((IkReal(-0.0135000000000000))*(x1514)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1516=IKsin(j1);
IkReal x1517=IKcos(j1);
IkReal x1518=((IkReal(0.300000000000000))*(cj3));
IkReal x1519=((IkReal(0.0450000000000000))*(cj3));
IkReal x1520=((py)*(sj0));
IkReal x1521=((IkReal(0.0450000000000000))*(sj3));
IkReal x1522=((IkReal(0.300000000000000))*(sj3));
IkReal x1523=((IkReal(0.0450000000000000))*(x1516));
IkReal x1524=((pz)*(x1516));
IkReal x1525=((pz)*(x1517));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1518)))+(((IkReal(-1.00000000000000))*(x1521)))+(x1525)+(((x1516)*(x1520))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1516)*(x1519)))+(x1523)+(pz)+(((IkReal(-1.00000000000000))*(x1517)*(x1518)))+(((x1516)*(x1522)))+(((IkReal(-1.00000000000000))*(x1517)*(x1521)))+(((IkReal(-0.550000000000000))*(x1517))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1517)*(x1520)))+(((IkReal(-1.00000000000000))*(x1519)))+(x1524)+(x1522));
evalcond[3]=((((IkReal(0.550000000000000))*(x1516)))+(((x1516)*(x1518)))+(((x1517)*(x1522)))+(((IkReal(-1.00000000000000))*(x1517)*(x1519)))+(((x1516)*(x1521)))+(((IkReal(-1.00000000000000))*(x1520)))+(((IkReal(0.0450000000000000))*(x1517))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1516)*(x1520)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1525)))+(((IkReal(0.0900000000000000))*(x1517)*(x1520)))+(((IkReal(-0.0900000000000000))*(x1524))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1526=((IkReal(0.300000000000000))*(sj3));
IkReal x1527=((py)*(sj0));
IkReal x1528=((IkReal(0.0450000000000000))*(cj3));
IkReal x1529=((IkReal(0.0450000000000000))*(pz));
IkReal x1530=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst40)*(((((IkReal(-0.0450000000000000))*(sj3)*(x1527)))+(x1529)+(((IkReal(-1.00000000000000))*(x1527)*(x1530)))+(((pz)*(x1526)))+(((IkReal(-0.550000000000000))*(x1527)))+(((IkReal(-1.00000000000000))*(pz)*(x1528))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x1529)))+(((IkReal(-0.0450000000000000))*(x1527)))+(((x1527)*(x1528)))+(((IkReal(-1.00000000000000))*(x1526)*(x1527)))+(((IkReal(-1.00000000000000))*(pz)*(x1530))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst40)*(((((IkReal(-0.0450000000000000))*(sj3)*(x1527)))+(x1529)+(((IkReal(-1.00000000000000))*(x1527)*(x1530)))+(((pz)*(x1526)))+(((IkReal(-0.550000000000000))*(x1527)))+(((IkReal(-1.00000000000000))*(pz)*(x1528)))))), ((gconst40)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x1529)))+(((IkReal(-0.0450000000000000))*(x1527)))+(((x1527)*(x1528)))+(((IkReal(-1.00000000000000))*(x1526)*(x1527)))+(((IkReal(-1.00000000000000))*(pz)*(x1530)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1531=IKsin(j1);
IkReal x1532=IKcos(j1);
IkReal x1533=((IkReal(0.300000000000000))*(cj3));
IkReal x1534=((IkReal(0.0450000000000000))*(cj3));
IkReal x1535=((py)*(sj0));
IkReal x1536=((IkReal(0.0450000000000000))*(sj3));
IkReal x1537=((IkReal(0.300000000000000))*(sj3));
IkReal x1538=((IkReal(0.0450000000000000))*(x1531));
IkReal x1539=((pz)*(x1531));
IkReal x1540=((pz)*(x1532));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1533)))+(((IkReal(-1.00000000000000))*(x1536)))+(((x1531)*(x1535)))+(x1540));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1531)*(x1534)))+(((IkReal(-1.00000000000000))*(x1532)*(x1533)))+(((IkReal(-1.00000000000000))*(x1532)*(x1536)))+(((x1531)*(x1537)))+(x1538)+(pz)+(((IkReal(-0.550000000000000))*(x1532))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1532)*(x1535)))+(((IkReal(-1.00000000000000))*(x1534)))+(x1537)+(x1539));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1535)))+(((IkReal(-1.00000000000000))*(x1532)*(x1534)))+(((x1531)*(x1536)))+(((x1531)*(x1533)))+(((x1532)*(x1537)))+(((IkReal(0.0450000000000000))*(x1532)))+(((IkReal(0.550000000000000))*(x1531))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1531)*(x1535)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1532)*(x1535)))+(((IkReal(1.10000000000000))*(x1540)))+(((IkReal(-0.0900000000000000))*(x1539))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1541=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(x1541));
evalcond[3]=x1541;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x1542=((py)*(sj0));
IkReal x1543=((IkReal(0.0450000000000000))*(pz));
gconst43=IKsign(((((IkReal(-0.0450000000000000))*(sj3)*(x1542)))+(x1543)+(((IkReal(-0.550000000000000))*(x1542)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)*(x1542)))+(((IkReal(-1.00000000000000))*(cj3)*(x1543)))));
IkReal x1544=((py)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(pz)+(((IkReal(-1.00000000000000))*(sj3)*(x1544)))+(((IkReal(-12.2222222222222))*(x1544)))+(((IkReal(-6.66666666666667))*(cj3)*(x1544))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1545=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1545))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1545))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1546=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1546)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1546))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1546)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1546)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1546)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1546)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1547=IKcos(j1);
IkReal x1548=IKsin(j1);
IkReal x1549=((pz)*(x1548));
IkReal x1550=((pz)*(x1547));
evalcond[0]=((IkReal(-0.850000000000000))+(x1550));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1547)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x1549));
evalcond[3]=((IkReal(0.850000000000000))*(x1548));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1549)))+(((IkReal(1.10000000000000))*(x1550)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1551=IKcos(j1);
IkReal x1552=IKsin(j1);
IkReal x1553=((pz)*(x1552));
IkReal x1554=((pz)*(x1551));
evalcond[0]=((IkReal(-0.850000000000000))+(x1554));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1551)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x1553));
evalcond[3]=((IkReal(0.850000000000000))*(x1552));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1554)))+(((IkReal(0.0900000000000000))*(x1553)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1555=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1555)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1555))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1556=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1556));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1556))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1557=IKsin(j1);
IkReal x1558=IKcos(j1);
IkReal x1559=((IkReal(0.0450000000000000))*(x1558));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x1557)))+(((cj3)*(x1559)))+(((IkReal(0.550000000000000))*(x1557)))+(((IkReal(-0.300000000000000))*(sj3)*(x1558)))+(((IkReal(0.0450000000000000))*(sj3)*(x1557)))+(((IkReal(-1.00000000000000))*(x1559))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1560=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1560)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1560))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1561=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1561));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1561))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1562=IKsin(j1);
IkReal x1563=IKcos(j1);
IkReal x1564=((IkReal(0.0450000000000000))*(x1563));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x1562)))+(((cj3)*(x1564)))+(((IkReal(0.550000000000000))*(x1562)))+(((IkReal(0.0450000000000000))*(sj3)*(x1562)))+(((IkReal(-0.300000000000000))*(sj3)*(x1563)))+(((IkReal(-1.00000000000000))*(x1564))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1565=(sj3)*(sj3);
IkReal x1566=(cj3)*(cj3);
IkReal x1567=((cj3)*(sj3));
if( IKabs(((gconst43)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x1567)))+(((IkReal(-0.0900000000000000))*(x1566)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x1565)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x1566)))+(((IkReal(0.0879750000000000))*(x1567)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(0.0135000000000000))*(x1565))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst43)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x1567)))+(((IkReal(-0.0900000000000000))*(x1566)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x1565)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst43)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x1566)))+(((IkReal(0.0879750000000000))*(x1567)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(0.0135000000000000))*(x1565)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1568=IKsin(j1);
IkReal x1569=IKcos(j1);
IkReal x1570=((IkReal(0.300000000000000))*(cj3));
IkReal x1571=((IkReal(0.0450000000000000))*(cj3));
IkReal x1572=((py)*(sj0));
IkReal x1573=((IkReal(0.0450000000000000))*(sj3));
IkReal x1574=((IkReal(0.300000000000000))*(sj3));
IkReal x1575=((IkReal(0.0450000000000000))*(x1568));
IkReal x1576=((pz)*(x1568));
IkReal x1577=((pz)*(x1569));
evalcond[0]=((IkReal(-0.550000000000000))+(((x1568)*(x1572)))+(x1577)+(((IkReal(-1.00000000000000))*(x1570)))+(((IkReal(-1.00000000000000))*(x1573))));
evalcond[1]=((((x1568)*(x1571)))+(((IkReal(-1.00000000000000))*(x1568)*(x1574)))+(((IkReal(-1.00000000000000))*(x1569)*(x1570)))+(((IkReal(-1.00000000000000))*(x1569)*(x1573)))+(((IkReal(-0.550000000000000))*(x1569)))+(pz)+(((IkReal(-1.00000000000000))*(x1575))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x1569)*(x1572)))+(x1574)+(((IkReal(-1.00000000000000))*(x1571)))+(((IkReal(-1.00000000000000))*(x1576))));
evalcond[3]=((((x1569)*(x1571)))+(((IkReal(-0.0450000000000000))*(x1569)))+(((IkReal(0.550000000000000))*(x1568)))+(((x1568)*(x1573)))+(((x1568)*(x1570)))+(((IkReal(-1.00000000000000))*(x1569)*(x1574)))+(((IkReal(-1.00000000000000))*(x1572))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1576)))+(((IkReal(-0.0900000000000000))*(x1569)*(x1572)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1577)))+(((IkReal(1.10000000000000))*(x1568)*(x1572))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1578=((py)*(sj0));
IkReal x1579=((IkReal(0.300000000000000))*(sj3));
IkReal x1580=((IkReal(0.0450000000000000))*(cj3));
IkReal x1581=((IkReal(0.0450000000000000))*(pz));
IkReal x1582=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(pz)*(x1580)))+(((IkReal(0.550000000000000))*(x1578)))+(x1581)+(((IkReal(0.0450000000000000))*(sj3)*(x1578)))+(((pz)*(x1579)))+(((x1578)*(x1582))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((sj3)*(x1581)))+(((IkReal(-0.0450000000000000))*(x1578)))+(((IkReal(-1.00000000000000))*(x1578)*(x1579)))+(((pz)*(x1582)))+(((x1578)*(x1580)))+(((IkReal(0.550000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(pz)*(x1580)))+(((IkReal(0.550000000000000))*(x1578)))+(x1581)+(((IkReal(0.0450000000000000))*(sj3)*(x1578)))+(((pz)*(x1579)))+(((x1578)*(x1582)))))), ((gconst42)*(((((sj3)*(x1581)))+(((IkReal(-0.0450000000000000))*(x1578)))+(((IkReal(-1.00000000000000))*(x1578)*(x1579)))+(((pz)*(x1582)))+(((x1578)*(x1580)))+(((IkReal(0.550000000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1583=IKsin(j1);
IkReal x1584=IKcos(j1);
IkReal x1585=((IkReal(0.300000000000000))*(cj3));
IkReal x1586=((IkReal(0.0450000000000000))*(cj3));
IkReal x1587=((py)*(sj0));
IkReal x1588=((IkReal(0.0450000000000000))*(sj3));
IkReal x1589=((IkReal(0.300000000000000))*(sj3));
IkReal x1590=((IkReal(0.0450000000000000))*(x1583));
IkReal x1591=((pz)*(x1583));
IkReal x1592=((pz)*(x1584));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1588)))+(((IkReal(-1.00000000000000))*(x1585)))+(((x1583)*(x1587)))+(x1592));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1590)))+(((IkReal(-1.00000000000000))*(x1584)*(x1585)))+(((IkReal(-1.00000000000000))*(x1584)*(x1588)))+(((IkReal(-0.550000000000000))*(x1584)))+(((x1583)*(x1586)))+(pz)+(((IkReal(-1.00000000000000))*(x1583)*(x1589))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1586)))+(((x1584)*(x1587)))+(x1589)+(((IkReal(-1.00000000000000))*(x1591))));
evalcond[3]=((((x1584)*(x1586)))+(((IkReal(-0.0450000000000000))*(x1584)))+(((IkReal(-1.00000000000000))*(x1584)*(x1589)))+(((x1583)*(x1588)))+(((x1583)*(x1585)))+(((IkReal(0.550000000000000))*(x1583)))+(((IkReal(-1.00000000000000))*(x1587))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1583)*(x1587)))+(((IkReal(0.0900000000000000))*(x1591)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1592)))+(((IkReal(-0.0900000000000000))*(x1584)*(x1587))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1593=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1593;
evalcond[3]=x1593;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
IkReal x1594=((IkReal(0.0450000000000000))*(pz));
IkReal x1595=((cj0)*(px));
gconst45=IKsign(((((IkReal(-1.00000000000000))*(x1594)))+(((IkReal(-0.0450000000000000))*(sj3)*(x1595)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x1595)))+(((cj3)*(x1594)))+(((IkReal(-0.300000000000000))*(cj3)*(x1595)))));
IkReal x1596=((cj0)*(px));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x1596)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-6.66666666666667))*(cj3)*(x1596)))+(((IkReal(-1.00000000000000))*(sj3)*(x1596)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1597=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1597))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1597))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1598=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1598)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1598))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1598)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1598)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1598)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1598)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1599=IKcos(j1);
IkReal x1600=IKsin(j1);
IkReal x1601=((pz)*(x1600));
IkReal x1602=((pz)*(x1599));
evalcond[0]=((IkReal(-0.850000000000000))+(x1602));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1599)))+(pz));
evalcond[2]=x1601;
evalcond[3]=((IkReal(0.850000000000000))*(x1600));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1601)))+(((IkReal(1.10000000000000))*(x1602))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1603=IKcos(j1);
IkReal x1604=IKsin(j1);
IkReal x1605=((pz)*(x1604));
IkReal x1606=((pz)*(x1603));
evalcond[0]=((IkReal(-0.850000000000000))+(x1606));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x1603))));
evalcond[2]=x1605;
evalcond[3]=((IkReal(0.850000000000000))*(x1604));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1605)))+(((IkReal(1.10000000000000))*(x1606))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1607=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x1607)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1607))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1608=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1608));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1608))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1609=IKsin(j1);
IkReal x1610=IKcos(j1);
IkReal x1611=((IkReal(0.0450000000000000))*(x1610));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1611)))+(((IkReal(0.300000000000000))*(sj3)*(x1610)))+(x1611)+(((IkReal(0.0450000000000000))*(sj3)*(x1609)))+(((IkReal(0.550000000000000))*(x1609)))+(((IkReal(0.300000000000000))*(cj3)*(x1609))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1612=((IkReal(1.00000000000000))*(pp));
IkReal x1613=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x1612)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x1613;
evalcond[4]=x1613;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1612))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1614=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1614));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1614))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1615=IKsin(j1);
IkReal x1616=IKcos(j1);
IkReal x1617=((IkReal(0.0450000000000000))*(x1616));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1617)))+(((IkReal(0.300000000000000))*(sj3)*(x1616)))+(x1617)+(((IkReal(0.550000000000000))*(x1615)))+(((IkReal(0.0450000000000000))*(sj3)*(x1615)))+(((IkReal(0.300000000000000))*(cj3)*(x1615))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1618=(cj3)*(cj3);
IkReal x1619=(sj3)*(sj3);
IkReal x1620=((cj3)*(sj3));
if( IKabs(((gconst45)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x1620)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x1619)))+(((IkReal(-0.0900000000000000))*(x1618)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x1618)))+(((IkReal(-0.0879750000000000))*(x1620)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(-0.0135000000000000))*(x1619)))+(((IkReal(-0.167025000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst45)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x1620)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x1619)))+(((IkReal(-0.0900000000000000))*(x1618)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst45)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x1618)))+(((IkReal(-0.0879750000000000))*(x1620)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(-0.0135000000000000))*(x1619)))+(((IkReal(-0.167025000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1621=IKsin(j1);
IkReal x1622=IKcos(j1);
IkReal x1623=((IkReal(0.300000000000000))*(cj3));
IkReal x1624=((IkReal(0.0450000000000000))*(cj3));
IkReal x1625=((IkReal(0.0450000000000000))*(sj3));
IkReal x1626=((cj0)*(px));
IkReal x1627=((IkReal(0.300000000000000))*(sj3));
IkReal x1628=((IkReal(0.0450000000000000))*(x1621));
IkReal x1629=((IkReal(1.00000000000000))*(x1626));
IkReal x1630=((pz)*(x1621));
IkReal x1631=((pz)*(x1622));
evalcond[0]=((IkReal(-0.550000000000000))+(x1631)+(((IkReal(-1.00000000000000))*(x1623)))+(((IkReal(-1.00000000000000))*(x1625)))+(((x1621)*(x1626))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x1622)))+(x1628)+(((IkReal(-1.00000000000000))*(x1621)*(x1624)))+(((IkReal(-1.00000000000000))*(x1622)*(x1623)))+(((IkReal(-1.00000000000000))*(x1622)*(x1625)))+(pz)+(((x1621)*(x1627))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1627)+(x1630)+(((IkReal(-1.00000000000000))*(x1624)))+(((IkReal(-1.00000000000000))*(x1622)*(x1629))));
evalcond[3]=((((x1622)*(x1627)))+(((IkReal(0.550000000000000))*(x1621)))+(((IkReal(-1.00000000000000))*(x1629)))+(((IkReal(-1.00000000000000))*(x1622)*(x1624)))+(((IkReal(0.0450000000000000))*(x1622)))+(((x1621)*(x1625)))+(((x1621)*(x1623))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1622)*(x1626)))+(((IkReal(-0.0900000000000000))*(x1630)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1631)))+(((IkReal(1.10000000000000))*(x1621)*(x1626))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1632=((IkReal(0.300000000000000))*(sj3));
IkReal x1633=((cj0)*(px));
IkReal x1634=((IkReal(0.0450000000000000))*(cj3));
IkReal x1635=((IkReal(0.0450000000000000))*(pz));
IkReal x1636=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst44)*(((((IkReal(-1.00000000000000))*(pz)*(x1634)))+(x1635)+(((pz)*(x1632)))+(((IkReal(-1.00000000000000))*(x1633)*(x1636)))+(((IkReal(-0.0450000000000000))*(sj3)*(x1633)))+(((IkReal(-0.550000000000000))*(x1633))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x1636)))+(((IkReal(-1.00000000000000))*(sj3)*(x1635)))+(((IkReal(-0.0450000000000000))*(x1633)))+(((IkReal(-1.00000000000000))*(x1632)*(x1633)))+(((x1633)*(x1634))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst44)*(((((IkReal(-1.00000000000000))*(pz)*(x1634)))+(x1635)+(((pz)*(x1632)))+(((IkReal(-1.00000000000000))*(x1633)*(x1636)))+(((IkReal(-0.0450000000000000))*(sj3)*(x1633)))+(((IkReal(-0.550000000000000))*(x1633)))))), ((gconst44)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x1636)))+(((IkReal(-1.00000000000000))*(sj3)*(x1635)))+(((IkReal(-0.0450000000000000))*(x1633)))+(((IkReal(-1.00000000000000))*(x1632)*(x1633)))+(((x1633)*(x1634)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1637=IKsin(j1);
IkReal x1638=IKcos(j1);
IkReal x1639=((IkReal(0.300000000000000))*(cj3));
IkReal x1640=((IkReal(0.0450000000000000))*(cj3));
IkReal x1641=((IkReal(0.0450000000000000))*(sj3));
IkReal x1642=((cj0)*(px));
IkReal x1643=((IkReal(0.300000000000000))*(sj3));
IkReal x1644=((IkReal(0.0450000000000000))*(x1637));
IkReal x1645=((IkReal(1.00000000000000))*(x1642));
IkReal x1646=((pz)*(x1637));
IkReal x1647=((pz)*(x1638));
evalcond[0]=((IkReal(-0.550000000000000))+(((x1637)*(x1642)))+(x1647)+(((IkReal(-1.00000000000000))*(x1639)))+(((IkReal(-1.00000000000000))*(x1641))));
evalcond[1]=((((x1637)*(x1643)))+(x1644)+(((IkReal(-1.00000000000000))*(x1638)*(x1641)))+(((IkReal(-1.00000000000000))*(x1638)*(x1639)))+(((IkReal(-1.00000000000000))*(x1637)*(x1640)))+(pz)+(((IkReal(-0.550000000000000))*(x1638))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1646)+(x1643)+(((IkReal(-1.00000000000000))*(x1638)*(x1645)))+(((IkReal(-1.00000000000000))*(x1640))));
evalcond[3]=((((x1637)*(x1639)))+(((x1637)*(x1641)))+(((IkReal(-1.00000000000000))*(x1638)*(x1640)))+(((IkReal(-1.00000000000000))*(x1645)))+(((IkReal(0.0450000000000000))*(x1638)))+(((IkReal(0.550000000000000))*(x1637)))+(((x1638)*(x1643))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1646)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1647)))+(((IkReal(0.0900000000000000))*(x1638)*(x1642)))+(((IkReal(1.10000000000000))*(x1637)*(x1642))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1648=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1648;
evalcond[3]=((IkReal(-1.00000000000000))*(x1648));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign((((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=(((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x1649=((IkReal(0.0450000000000000))*(pz));
IkReal x1650=((cj0)*(px));
gconst47=IKsign(((((IkReal(-0.300000000000000))*(cj3)*(x1650)))+(x1649)+(((IkReal(-1.00000000000000))*(cj3)*(x1649)))+(((IkReal(-0.550000000000000))*(x1650)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.0450000000000000))*(sj3)*(x1650)))));
IkReal x1651=((cj0)*(px));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x1651)))+(((IkReal(-6.66666666666667))*(cj3)*(x1651)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x1651)))+(pz));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1652=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1652))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1652))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1653=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1653)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1653))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1653)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1653)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1653)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1653)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1654=IKcos(j1);
IkReal x1655=IKsin(j1);
IkReal x1656=((pz)*(x1655));
IkReal x1657=((pz)*(x1654));
evalcond[0]=((IkReal(-0.850000000000000))+(x1657));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x1654))));
evalcond[2]=((IkReal(-1.00000000000000))*(x1656));
evalcond[3]=((IkReal(0.850000000000000))*(x1655));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1656)))+(((IkReal(1.10000000000000))*(x1657))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1658=IKcos(j1);
IkReal x1659=IKsin(j1);
IkReal x1660=((pz)*(x1659));
IkReal x1661=((pz)*(x1658));
evalcond[0]=((IkReal(-0.850000000000000))+(x1661));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x1658))));
evalcond[2]=((IkReal(-1.00000000000000))*(x1660));
evalcond[3]=((IkReal(0.850000000000000))*(x1659));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1660)))+(((IkReal(1.10000000000000))*(x1661))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1662=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1662)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1662))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1663=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1663));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1663))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1664=IKsin(j1);
IkReal x1665=IKcos(j1);
IkReal x1666=((IkReal(0.0450000000000000))*(x1665));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x1664)))+(((IkReal(0.0450000000000000))*(sj3)*(x1664)))+(((cj3)*(x1666)))+(((IkReal(0.550000000000000))*(x1664)))+(((IkReal(-1.00000000000000))*(x1666)))+(((IkReal(-0.300000000000000))*(sj3)*(x1665))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1667=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1667)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1667))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1668=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1668));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1668))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1669=IKsin(j1);
IkReal x1670=IKcos(j1);
IkReal x1671=((IkReal(0.0450000000000000))*(x1670));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x1669)))+(((IkReal(0.0450000000000000))*(sj3)*(x1669)))+(((cj3)*(x1671)))+(((IkReal(-0.300000000000000))*(sj3)*(x1670)))+(((IkReal(0.550000000000000))*(x1669)))+(((IkReal(-1.00000000000000))*(x1671))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1672=(sj3)*(sj3);
IkReal x1673=(cj3)*(cj3);
IkReal x1674=((cj3)*(sj3));
if( IKabs(((gconst47)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x1673)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x1672)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x1674)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0135000000000000))*(x1672)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x1673)))+(((IkReal(0.0879750000000000))*(x1674))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x1673)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x1672)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x1674)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst47)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0135000000000000))*(x1672)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x1673)))+(((IkReal(0.0879750000000000))*(x1674)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1675=IKsin(j1);
IkReal x1676=IKcos(j1);
IkReal x1677=((IkReal(0.300000000000000))*(cj3));
IkReal x1678=((IkReal(0.0450000000000000))*(cj3));
IkReal x1679=((cj0)*(px));
IkReal x1680=((IkReal(0.0450000000000000))*(sj3));
IkReal x1681=((IkReal(0.300000000000000))*(sj3));
IkReal x1682=((IkReal(0.0450000000000000))*(x1675));
IkReal x1683=((pz)*(x1675));
IkReal x1684=((pz)*(x1676));
evalcond[0]=((IkReal(-0.550000000000000))+(((x1675)*(x1679)))+(((IkReal(-1.00000000000000))*(x1680)))+(x1684)+(((IkReal(-1.00000000000000))*(x1677))));
evalcond[1]=((((x1675)*(x1678)))+(((IkReal(-1.00000000000000))*(x1682)))+(((IkReal(-1.00000000000000))*(x1675)*(x1681)))+(((IkReal(-1.00000000000000))*(x1676)*(x1680)))+(pz)+(((IkReal(-0.550000000000000))*(x1676)))+(((IkReal(-1.00000000000000))*(x1676)*(x1677))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x1676)*(x1679)))+(x1681)+(((IkReal(-1.00000000000000))*(x1683)))+(((IkReal(-1.00000000000000))*(x1678))));
evalcond[3]=((((x1676)*(x1678)))+(((x1675)*(x1677)))+(((IkReal(0.550000000000000))*(x1675)))+(((IkReal(-1.00000000000000))*(x1676)*(x1681)))+(((x1675)*(x1680)))+(((IkReal(-1.00000000000000))*(x1679)))+(((IkReal(-0.0450000000000000))*(x1676))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1684)))+(((IkReal(1.10000000000000))*(x1675)*(x1679)))+(((IkReal(-0.0900000000000000))*(x1676)*(x1679)))+(((IkReal(0.0900000000000000))*(x1683)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1685=((pz)*(sj3));
IkReal x1686=((cj0)*(px));
IkReal x1687=((IkReal(0.0450000000000000))*(pz));
IkReal x1688=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst46)*(((((IkReal(0.0450000000000000))*(sj3)*(x1686)))+(x1687)+(((IkReal(0.550000000000000))*(x1686)))+(((x1686)*(x1688)))+(((IkReal(-1.00000000000000))*(cj3)*(x1687)))+(((IkReal(0.300000000000000))*(x1685))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((IkReal(-0.300000000000000))*(sj3)*(x1686)))+(((pz)*(x1688)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x1686)))+(((IkReal(0.0450000000000000))*(x1685)))+(((IkReal(0.0450000000000000))*(cj3)*(x1686))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst46)*(((((IkReal(0.0450000000000000))*(sj3)*(x1686)))+(x1687)+(((IkReal(0.550000000000000))*(x1686)))+(((x1686)*(x1688)))+(((IkReal(-1.00000000000000))*(cj3)*(x1687)))+(((IkReal(0.300000000000000))*(x1685)))))), ((gconst46)*(((((IkReal(-0.300000000000000))*(sj3)*(x1686)))+(((pz)*(x1688)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x1686)))+(((IkReal(0.0450000000000000))*(x1685)))+(((IkReal(0.0450000000000000))*(cj3)*(x1686)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1689=IKsin(j1);
IkReal x1690=IKcos(j1);
IkReal x1691=((IkReal(0.300000000000000))*(cj3));
IkReal x1692=((IkReal(0.0450000000000000))*(cj3));
IkReal x1693=((cj0)*(px));
IkReal x1694=((IkReal(0.0450000000000000))*(sj3));
IkReal x1695=((IkReal(0.300000000000000))*(sj3));
IkReal x1696=((IkReal(0.0450000000000000))*(x1689));
IkReal x1697=((pz)*(x1689));
IkReal x1698=((pz)*(x1690));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1694)))+(((IkReal(-1.00000000000000))*(x1691)))+(x1698)+(((x1689)*(x1693))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1696)))+(((IkReal(-0.550000000000000))*(x1690)))+(((IkReal(-1.00000000000000))*(x1690)*(x1694)))+(((IkReal(-1.00000000000000))*(x1690)*(x1691)))+(((x1689)*(x1692)))+(pz)+(((IkReal(-1.00000000000000))*(x1689)*(x1695))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x1690)*(x1693)))+(((IkReal(-1.00000000000000))*(x1692)))+(x1695)+(((IkReal(-1.00000000000000))*(x1697))));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x1690)))+(((x1690)*(x1692)))+(((IkReal(-1.00000000000000))*(x1693)))+(((IkReal(0.550000000000000))*(x1689)))+(((IkReal(-1.00000000000000))*(x1690)*(x1695)))+(((x1689)*(x1691)))+(((x1689)*(x1694))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1697)))+(((IkReal(-0.0900000000000000))*(x1690)*(x1693)))+(((IkReal(1.10000000000000))*(x1689)*(x1693)))+(((IkReal(1.10000000000000))*(x1698)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1699=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1699;
evalcond[3]=x1699;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1700=((cj0)*(px));
IkReal x1701=((py)*(sj0));
IkReal x1702=((IkReal(6.66666666666667))*(cj3));
IkReal x1703=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x1700)+(x1701));
dummyeval[1]=((((IkReal(-12.2222222222222))*(x1701)))+(((IkReal(-12.2222222222222))*(x1700)))+(((IkReal(-1.00000000000000))*(x1700)*(x1702)))+(((IkReal(-1.00000000000000))*(x1700)*(x1703)))+(((IkReal(-1.00000000000000))*(x1701)*(x1703)))+(((IkReal(-1.00000000000000))*(x1701)*(x1702))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1704=((py)*(sj0));
IkReal x1705=((cj0)*(px));
IkReal x1706=((IkReal(6.66666666666667))*(sj3));
IkReal x1707=((IkReal(1.00000000000000))*(x1705));
IkReal x1708=((IkReal(1.00000000000000))*(x1704));
IkReal x1709=((x1707)+(x1708));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1709)))+(((IkReal(-1.00000000000000))*(x1704)*(x1706)))+(((IkReal(-1.00000000000000))*(x1705)*(x1706)))+(((cj3)*(x1704)))+(((cj3)*(x1705))));
dummyeval[1]=((IkReal(-1.00000000000000))*(x1709));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1710=x1699;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1710;
evalcond[3]=x1710;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1711=((cj0)*(px));
IkReal x1712=((py)*(sj0));
dummyeval[0]=((x1712)+(x1711));
dummyeval[1]=(((x1712)*(x1712))+((x1711)*(x1711))+(((IkReal(2.00000000000000))*(x1711)*(x1712))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1713=((IkReal(1.00000000000000))*(pp));
IkReal x1714=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1713))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x1714;
evalcond[4]=x1714;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1713))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1715=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1715))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1715))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1716=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1716))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1716))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1717=((IkReal(1.00000000000000))*(pp));
IkReal x1718=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1717))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x1718;
evalcond[4]=x1718;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1717))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1719=((cj0)*(px));
IkReal x1720=((py)*(sj0));
IkReal x1721=((IkReal(20.0000000000000))*(pp));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x1719)))+(((IkReal(20.0000000000000))*(x1720))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x1719)))+(((IkReal(20.0000000000000))*(x1720)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(3.60000000000000))*(x1719)*(x1720)))+(((IkReal(1.80000000000000))*((x1720)*(x1720))))+(((IkReal(1.80000000000000))*((x1719)*(x1719)))))) != 0)?((IkReal)1/(((((IkReal(3.60000000000000))*(x1719)*(x1720)))+(((IkReal(1.80000000000000))*((x1720)*(x1720))))+(((IkReal(1.80000000000000))*((x1719)*(x1719))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x1720)))+(((x1720)*(x1721)))+(((x1719)*(x1721)))+(((IkReal(-14.4500000000000))*(x1719))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x1719)))+(((IkReal(20.0000000000000))*(x1720))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x1719)))+(((IkReal(20.0000000000000))*(x1720)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(3.60000000000000))*(x1719)*(x1720)))+(((IkReal(1.80000000000000))*((x1720)*(x1720))))+(((IkReal(1.80000000000000))*((x1719)*(x1719)))))) != 0)?((IkReal)1/(((((IkReal(3.60000000000000))*(x1719)*(x1720)))+(((IkReal(1.80000000000000))*((x1720)*(x1720))))+(((IkReal(1.80000000000000))*((x1719)*(x1719))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x1720)))+(((x1720)*(x1721)))+(((x1719)*(x1721)))+(((IkReal(-14.4500000000000))*(x1719)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x1719)))+(((IkReal(20.0000000000000))*(x1720))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x1719)))+(((IkReal(20.0000000000000))*(x1720)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(3.60000000000000))*(x1719)*(x1720)))+(((IkReal(1.80000000000000))*((x1720)*(x1720))))+(((IkReal(1.80000000000000))*((x1719)*(x1719)))))) != 0)?((IkReal)1/(((((IkReal(3.60000000000000))*(x1719)*(x1720)))+(((IkReal(1.80000000000000))*((x1720)*(x1720))))+(((IkReal(1.80000000000000))*((x1719)*(x1719))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x1720)))+(((x1720)*(x1721)))+(((x1719)*(x1721)))+(((IkReal(-14.4500000000000))*(x1719)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1722=IKsin(j1);
IkReal x1723=IKcos(j1);
IkReal x1724=((py)*(sj0));
IkReal x1725=((cj0)*(px));
IkReal x1726=((IkReal(0.0900000000000000))*(x1723));
IkReal x1727=((IkReal(1.00000000000000))*(x1723));
IkReal x1728=((IkReal(1.10000000000000))*(x1722));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1722)*(x1724)))+(((x1722)*(x1725))));
evalcond[1]=((IkReal(-0.850000000000000))*(x1723));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1725)*(x1727)))+(((IkReal(-1.00000000000000))*(x1724)*(x1727))));
evalcond[3]=((((IkReal(0.850000000000000))*(x1722)))+(((IkReal(-1.00000000000000))*(x1724)))+(((IkReal(-1.00000000000000))*(x1725))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1724)*(x1726)))+(((x1724)*(x1728)))+(((x1725)*(x1728)))+(((x1725)*(x1726)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1729=((cj0)*(px));
IkReal x1730=((py)*(sj0));
if( IKabs(((((IkReal(1.17647058823529))*(x1729)))+(((IkReal(1.17647058823529))*(x1730))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x1729)))+(((IkReal(1.53000000000000))*(x1730))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x1729)))+(((IkReal(1.53000000000000))*(x1730)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x1730)*(x1730))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x1729)*(x1730)))+(((IkReal(-22.0000000000000))*((x1729)*(x1729)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x1729)))+(((IkReal(1.17647058823529))*(x1730)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x1729)))+(((IkReal(1.53000000000000))*(x1730))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x1729)))+(((IkReal(1.53000000000000))*(x1730)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x1730)*(x1730))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x1729)*(x1730)))+(((IkReal(-22.0000000000000))*((x1729)*(x1729))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x1729)))+(((IkReal(1.17647058823529))*(x1730)))), ((((IKabs(((((IkReal(1.53000000000000))*(x1729)))+(((IkReal(1.53000000000000))*(x1730))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x1729)))+(((IkReal(1.53000000000000))*(x1730)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x1730)*(x1730))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x1729)*(x1730)))+(((IkReal(-22.0000000000000))*((x1729)*(x1729))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1731=IKsin(j1);
IkReal x1732=IKcos(j1);
IkReal x1733=((py)*(sj0));
IkReal x1734=((cj0)*(px));
IkReal x1735=((IkReal(0.0900000000000000))*(x1732));
IkReal x1736=((IkReal(1.00000000000000))*(x1732));
IkReal x1737=((IkReal(1.10000000000000))*(x1731));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1731)*(x1734)))+(((x1731)*(x1733))));
evalcond[1]=((IkReal(-0.850000000000000))*(x1732));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1733)*(x1736)))+(((IkReal(-1.00000000000000))*(x1734)*(x1736))));
evalcond[3]=((((IkReal(0.850000000000000))*(x1731)))+(((IkReal(-1.00000000000000))*(x1734)))+(((IkReal(-1.00000000000000))*(x1733))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1734)*(x1735)))+(((x1734)*(x1737)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1733)*(x1737)))+(((x1733)*(x1735))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1738=((IkReal(-1.00000000000000))*(cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1738;
evalcond[3]=x1738;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1739=((IkReal(1.00000000000000))*(pp));
IkReal x1740=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1739))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x1740;
evalcond[4]=x1740;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1739))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1741=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1741))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1741))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1742=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1742))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1742))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1743=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1744=((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30);
IkReal x1745=((x1743)*(x1744));
if( IKabs(((IkReal(0.850000000000000))*(x1745))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x1745)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x1745)))+IKsqr(((IkReal(0.0555555555555556))*(x1745)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x1745)), ((IkReal(0.0555555555555556))*(x1745)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1746=IKcos(j1);
IkReal x1747=IKsin(j1);
IkReal x1748=((py)*(sj0)*(x1747));
IkReal x1749=((py)*(sj0)*(x1746));
evalcond[0]=((IkReal(-0.850000000000000))+(x1748));
evalcond[1]=((IkReal(-0.850000000000000))*(x1746));
evalcond[2]=((IkReal(-1.00000000000000))*(x1749));
evalcond[3]=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(0.850000000000000))*(x1747))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1749)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1748))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(py)*(sj0))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((py)*(py))*((sj0)*(sj0)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(sj0)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((py)*(py))*((sj0)*(sj0))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(sj0)), ((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((py)*(py))*((sj0)*(sj0))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1750=IKcos(j1);
IkReal x1751=IKsin(j1);
IkReal x1752=((py)*(sj0)*(x1751));
IkReal x1753=((py)*(sj0)*(x1750));
evalcond[0]=((IkReal(-0.850000000000000))+(x1752));
evalcond[1]=((IkReal(-0.850000000000000))*(x1750));
evalcond[2]=((IkReal(-1.00000000000000))*(x1753));
evalcond[3]=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(0.850000000000000))*(x1751))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1752)))+(((IkReal(0.0900000000000000))*(x1753))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1754=((IkReal(1.00000000000000))*(pp));
IkReal x1755=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1754)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x1755;
evalcond[4]=x1755;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1754))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1756=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1756));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1756))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1757=IKsin(j1);
IkReal x1758=IKcos(j1);
IkReal x1759=((IkReal(0.0450000000000000))*(x1758));
evalcond[0]=((x1759)+(((IkReal(0.550000000000000))*(x1757)))+(((IkReal(0.300000000000000))*(cj3)*(x1757)))+(((IkReal(-1.00000000000000))*(cj3)*(x1759)))+(((IkReal(0.300000000000000))*(sj3)*(x1758)))+(((IkReal(0.0450000000000000))*(sj3)*(x1757))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1760=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x1760)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1760))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1761=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1761));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1761))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1762=IKsin(j1);
IkReal x1763=IKcos(j1);
IkReal x1764=((IkReal(0.0450000000000000))*(x1763));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1764)))+(x1764)+(((IkReal(0.300000000000000))*(sj3)*(x1763)))+(((IkReal(0.0450000000000000))*(sj3)*(x1762)))+(((IkReal(0.550000000000000))*(x1762)))+(((IkReal(0.300000000000000))*(cj3)*(x1762))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1765=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1765;
evalcond[3]=x1765;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1766=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1766))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1766))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1767=((IkReal(1.00000000000000))*(pp));
IkReal x1768=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1767))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x1768;
evalcond[4]=x1768;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1767))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1769=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1769))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1769))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1770=((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30);
IkReal x1771=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1772=((x1770)*(x1771));
if( IKabs(((IkReal(0.850000000000000))*(x1772))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x1772)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x1772)))+IKsqr(((IkReal(0.0555555555555556))*(x1772)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x1772)), ((IkReal(0.0555555555555556))*(x1772)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1773=IKcos(j1);
IkReal x1774=IKsin(j1);
IkReal x1775=((cj0)*(px));
IkReal x1776=((x1773)*(x1775));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1774)*(x1775))));
evalcond[1]=((IkReal(-0.850000000000000))*(x1773));
evalcond[2]=((IkReal(-1.00000000000000))*(x1776));
evalcond[3]=((((IkReal(0.850000000000000))*(x1774)))+(((IkReal(-1.00000000000000))*(x1775))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1776)))+(((IkReal(1.10000000000000))*(x1774)*(x1775))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(cj0)*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((cj0)*(cj0))*((px)*(px)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(cj0)*(px)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((cj0)*(cj0))*((px)*(px))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(cj0)*(px)), ((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((cj0)*(cj0))*((px)*(px))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1777=IKcos(j1);
IkReal x1778=IKsin(j1);
IkReal x1779=((cj0)*(px));
IkReal x1780=((x1777)*(x1779));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1778)*(x1779))));
evalcond[1]=((IkReal(-0.850000000000000))*(x1777));
evalcond[2]=((IkReal(-1.00000000000000))*(x1780));
evalcond[3]=((((IkReal(0.850000000000000))*(x1778)))+(((IkReal(-1.00000000000000))*(x1779))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1780)))+(((IkReal(1.10000000000000))*(x1778)*(x1779)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1781=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x1781)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1781))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1782=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1782));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1782))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1783=IKsin(j1);
IkReal x1784=IKcos(j1);
IkReal x1785=((IkReal(0.0450000000000000))*(x1784));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x1783)))+(((IkReal(0.0450000000000000))*(sj3)*(x1783)))+(x1785)+(((IkReal(0.550000000000000))*(x1783)))+(((IkReal(0.300000000000000))*(sj3)*(x1784)))+(((IkReal(-1.00000000000000))*(cj3)*(x1785))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1786=((IkReal(1.00000000000000))*(pp));
IkReal x1787=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x1786)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x1787;
evalcond[4]=x1787;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1786))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1788=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1788));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1788))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1789=IKsin(j1);
IkReal x1790=IKcos(j1);
IkReal x1791=((IkReal(0.0450000000000000))*(x1790));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x1789)))+(((IkReal(0.0450000000000000))*(sj3)*(x1789)))+(x1791)+(((IkReal(0.300000000000000))*(sj3)*(x1790)))+(((IkReal(0.550000000000000))*(x1789)))+(((IkReal(-1.00000000000000))*(cj3)*(x1791))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1792=((IkReal(0.300000000000000))*(sj3));
IkReal x1793=((py)*(sj0));
IkReal x1794=((IkReal(0.0450000000000000))*(cj3));
IkReal x1795=((cj0)*(px));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x1792)*(x1795)))+(((IkReal(-1.00000000000000))*(x1792)*(x1793)))+(((x1793)*(x1794)))+(((x1794)*(x1795)))+(((IkReal(-0.0450000000000000))*(x1793)))+(((IkReal(-0.0450000000000000))*(x1795))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1792)*(x1795)))+(((IkReal(-1.00000000000000))*(x1792)*(x1793)))+(((x1793)*(x1794)))+(((x1794)*(x1795)))+(((IkReal(-0.0450000000000000))*(x1793)))+(((IkReal(-0.0450000000000000))*(x1795)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x1795)))+(((IkReal(-1.00000000000000))*(x1793))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1795)))+(((IkReal(-1.00000000000000))*(x1793)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1792)))+(x1794))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x1792)*(x1795)))+(((IkReal(-1.00000000000000))*(x1792)*(x1793)))+(((x1793)*(x1794)))+(((x1794)*(x1795)))+(((IkReal(-0.0450000000000000))*(x1793)))+(((IkReal(-0.0450000000000000))*(x1795))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1792)*(x1795)))+(((IkReal(-1.00000000000000))*(x1792)*(x1793)))+(((x1793)*(x1794)))+(((x1794)*(x1795)))+(((IkReal(-0.0450000000000000))*(x1793)))+(((IkReal(-0.0450000000000000))*(x1795)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x1795)))+(((IkReal(-1.00000000000000))*(x1793))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1795)))+(((IkReal(-1.00000000000000))*(x1793)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1792)))+(x1794)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x1792)*(x1795)))+(((IkReal(-1.00000000000000))*(x1792)*(x1793)))+(((x1793)*(x1794)))+(((x1794)*(x1795)))+(((IkReal(-0.0450000000000000))*(x1793)))+(((IkReal(-0.0450000000000000))*(x1795))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1792)*(x1795)))+(((IkReal(-1.00000000000000))*(x1792)*(x1793)))+(((x1793)*(x1794)))+(((x1794)*(x1795)))+(((IkReal(-0.0450000000000000))*(x1793)))+(((IkReal(-0.0450000000000000))*(x1795)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x1795)))+(((IkReal(-1.00000000000000))*(x1793))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1795)))+(((IkReal(-1.00000000000000))*(x1793)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1792)))+(x1794)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1796=IKsin(j1);
IkReal x1797=IKcos(j1);
IkReal x1798=((IkReal(0.300000000000000))*(cj3));
IkReal x1799=((IkReal(0.0450000000000000))*(cj3));
IkReal x1800=((cj0)*(px));
IkReal x1801=((py)*(sj0));
IkReal x1802=((IkReal(0.0450000000000000))*(sj3));
IkReal x1803=((IkReal(0.300000000000000))*(sj3));
IkReal x1804=((IkReal(0.0450000000000000))*(x1796));
IkReal x1805=((IkReal(1.00000000000000))*(x1797));
IkReal x1806=((IkReal(0.0900000000000000))*(x1797));
IkReal x1807=((IkReal(1.10000000000000))*(x1796));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1798)))+(((IkReal(-1.00000000000000))*(x1802)))+(((x1796)*(x1800)))+(((x1796)*(x1801))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1796)*(x1799)))+(((IkReal(-1.00000000000000))*(x1797)*(x1802)))+(((x1796)*(x1803)))+(((IkReal(-0.550000000000000))*(x1797)))+(x1804)+(((IkReal(-1.00000000000000))*(x1797)*(x1798))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1799)))+(((IkReal(-1.00000000000000))*(x1801)*(x1805)))+(((IkReal(-1.00000000000000))*(x1800)*(x1805)))+(x1803));
evalcond[3]=((((IkReal(0.0450000000000000))*(x1797)))+(((IkReal(0.550000000000000))*(x1796)))+(((x1796)*(x1798)))+(((x1797)*(x1803)))+(((x1796)*(x1802)))+(((IkReal(-1.00000000000000))*(x1797)*(x1799)))+(((IkReal(-1.00000000000000))*(x1801)))+(((IkReal(-1.00000000000000))*(x1800))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1801)*(x1807)))+(((x1801)*(x1806)))+(((x1800)*(x1807)))+(((x1800)*(x1806)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1808=((cj0)*(px));
IkReal x1809=((IkReal(0.0450000000000000))*(sj3));
IkReal x1810=((py)*(sj0));
IkReal x1811=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x1810)+(x1808))) != 0)?((IkReal)1/(((x1810)+(x1808)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x1811)+(x1809))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x1809)*(x1810)))+(((IkReal(-1.00000000000000))*(x1808)*(x1811)))+(((IkReal(-1.00000000000000))*(x1810)*(x1811)))+(((IkReal(-1.00000000000000))*(x1808)*(x1809)))+(((IkReal(-0.550000000000000))*(x1810)))+(((IkReal(-0.550000000000000))*(x1808))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1809)*(x1810)))+(((IkReal(-1.00000000000000))*(x1808)*(x1811)))+(((IkReal(-1.00000000000000))*(x1810)*(x1811)))+(((IkReal(-1.00000000000000))*(x1808)*(x1809)))+(((IkReal(-0.550000000000000))*(x1810)))+(((IkReal(-0.550000000000000))*(x1808)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x1810)+(x1808))) != 0)?((IkReal)1/(((x1810)+(x1808)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x1811)+(x1809)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x1809)*(x1810)))+(((IkReal(-1.00000000000000))*(x1808)*(x1811)))+(((IkReal(-1.00000000000000))*(x1810)*(x1811)))+(((IkReal(-1.00000000000000))*(x1808)*(x1809)))+(((IkReal(-0.550000000000000))*(x1810)))+(((IkReal(-0.550000000000000))*(x1808))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1809)*(x1810)))+(((IkReal(-1.00000000000000))*(x1808)*(x1811)))+(((IkReal(-1.00000000000000))*(x1810)*(x1811)))+(((IkReal(-1.00000000000000))*(x1808)*(x1809)))+(((IkReal(-0.550000000000000))*(x1810)))+(((IkReal(-0.550000000000000))*(x1808)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x1810)+(x1808))) != 0)?((IkReal)1/(((x1810)+(x1808)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x1811)+(x1809)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x1809)*(x1810)))+(((IkReal(-1.00000000000000))*(x1808)*(x1811)))+(((IkReal(-1.00000000000000))*(x1810)*(x1811)))+(((IkReal(-1.00000000000000))*(x1808)*(x1809)))+(((IkReal(-0.550000000000000))*(x1810)))+(((IkReal(-0.550000000000000))*(x1808))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1809)*(x1810)))+(((IkReal(-1.00000000000000))*(x1808)*(x1811)))+(((IkReal(-1.00000000000000))*(x1810)*(x1811)))+(((IkReal(-1.00000000000000))*(x1808)*(x1809)))+(((IkReal(-0.550000000000000))*(x1810)))+(((IkReal(-0.550000000000000))*(x1808)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1812=IKsin(j1);
IkReal x1813=IKcos(j1);
IkReal x1814=((IkReal(0.300000000000000))*(cj3));
IkReal x1815=((IkReal(0.0450000000000000))*(cj3));
IkReal x1816=((cj0)*(px));
IkReal x1817=((py)*(sj0));
IkReal x1818=((IkReal(0.0450000000000000))*(sj3));
IkReal x1819=((IkReal(0.300000000000000))*(sj3));
IkReal x1820=((IkReal(0.0450000000000000))*(x1812));
IkReal x1821=((IkReal(1.00000000000000))*(x1813));
IkReal x1822=((IkReal(0.0900000000000000))*(x1813));
IkReal x1823=((IkReal(1.10000000000000))*(x1812));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1818)))+(((IkReal(-1.00000000000000))*(x1814)))+(((x1812)*(x1817)))+(((x1812)*(x1816))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1813)*(x1814)))+(((IkReal(-1.00000000000000))*(x1813)*(x1818)))+(((IkReal(-1.00000000000000))*(x1812)*(x1815)))+(((x1812)*(x1819)))+(x1820)+(((IkReal(-0.550000000000000))*(x1813))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1815)))+(((IkReal(-1.00000000000000))*(x1817)*(x1821)))+(x1819)+(((IkReal(-1.00000000000000))*(x1816)*(x1821))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x1813)))+(((IkReal(-1.00000000000000))*(x1813)*(x1815)))+(((x1813)*(x1819)))+(((x1812)*(x1814)))+(((x1812)*(x1818)))+(((IkReal(0.550000000000000))*(x1812)))+(((IkReal(-1.00000000000000))*(x1817)))+(((IkReal(-1.00000000000000))*(x1816))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x1816)*(x1823)))+(((x1816)*(x1822)))+(((x1817)*(x1822)))+(((x1817)*(x1823))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst48)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst48)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))), ((gconst48)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1824=IKsin(j1);
IkReal x1825=IKcos(j1);
IkReal x1826=((IkReal(0.300000000000000))*(cj3));
IkReal x1827=((IkReal(0.0450000000000000))*(cj3));
IkReal x1828=((cj0)*(px));
IkReal x1829=((py)*(sj0));
IkReal x1830=((IkReal(0.0450000000000000))*(sj3));
IkReal x1831=((IkReal(0.300000000000000))*(sj3));
IkReal x1832=((IkReal(0.0450000000000000))*(x1824));
IkReal x1833=((IkReal(1.00000000000000))*(x1825));
IkReal x1834=((IkReal(0.0900000000000000))*(x1825));
IkReal x1835=((IkReal(1.10000000000000))*(x1824));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1826)))+(((IkReal(-1.00000000000000))*(x1830)))+(((x1824)*(x1829)))+(((x1824)*(x1828))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1825)*(x1830)))+(((x1824)*(x1831)))+(((IkReal(-1.00000000000000))*(x1825)*(x1826)))+(((IkReal(-0.550000000000000))*(x1825)))+(x1832)+(((IkReal(-1.00000000000000))*(x1824)*(x1827))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1827)))+(((IkReal(-1.00000000000000))*(x1828)*(x1833)))+(x1831)+(((IkReal(-1.00000000000000))*(x1829)*(x1833))));
evalcond[3]=((((IkReal(0.550000000000000))*(x1824)))+(((IkReal(-1.00000000000000))*(x1828)))+(((IkReal(-1.00000000000000))*(x1829)))+(((x1824)*(x1830)))+(((x1824)*(x1826)))+(((IkReal(-1.00000000000000))*(x1825)*(x1827)))+(((x1825)*(x1831)))+(((IkReal(0.0450000000000000))*(x1825))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1829)*(x1834)))+(((x1829)*(x1835)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1828)*(x1834)))+(((x1828)*(x1835))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1836=((px)*(sj0));
IkReal x1837=((cj0)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1837)))+(x1836));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1836)))+(x1837));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1838=((cj0)*(px));
IkReal x1839=((py)*(sj0));
IkReal x1840=((IkReal(6.66666666666667))*(cj3));
IkReal x1841=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x1838)+(x1839));
dummyeval[1]=((((IkReal(-12.2222222222222))*(x1839)))+(((IkReal(-12.2222222222222))*(x1838)))+(((IkReal(-1.00000000000000))*(x1839)*(x1840)))+(((IkReal(-1.00000000000000))*(x1839)*(x1841)))+(((IkReal(-1.00000000000000))*(x1838)*(x1841)))+(((IkReal(-1.00000000000000))*(x1838)*(x1840))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1842=((cj0)*(px));
IkReal x1843=((py)*(sj0));
IkReal x1844=((IkReal(6.66666666666667))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1843)*(x1844)))+(((IkReal(-1.00000000000000))*(x1842)*(x1844)))+(((cj3)*(x1843)))+(((cj3)*(x1842)))+(((IkReal(-1.00000000000000))*(x1843)))+(((IkReal(-1.00000000000000))*(x1842))));
dummyeval[1]=((x1843)+(x1842));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1845=((px)*(sj0));
IkReal x1846=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((x1845)+(((IkReal(-1.00000000000000))*(x1846))));
evalcond[3]=((x1846)+(((IkReal(-1.00000000000000))*(x1845))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1847=((cj0)*(px));
IkReal x1848=((py)*(sj0));
dummyeval[0]=((x1848)+(x1847));
dummyeval[1]=((((IkReal(-1.00000000000000))*((x1848)*(x1848))))+(((IkReal(-1.00000000000000))*((x1847)*(x1847))))+(((IkReal(-2.00000000000000))*(x1847)*(x1848))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1849=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1849))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1849))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1850=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1850))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1850))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1851=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1851))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1851))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1852=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1852))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1852))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1853=((cj0)*(px));
IkReal x1854=((py)*(sj0));
IkReal x1855=((IkReal(20.0000000000000))*(pp));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x1853)))+(((IkReal(20.0000000000000))*(x1854))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x1853)))+(((IkReal(20.0000000000000))*(x1854)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.80000000000000))*((x1854)*(x1854))))+(((IkReal(-1.80000000000000))*((x1853)*(x1853))))+(((IkReal(-3.60000000000000))*(x1853)*(x1854))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*((x1854)*(x1854))))+(((IkReal(-1.80000000000000))*((x1853)*(x1853))))+(((IkReal(-3.60000000000000))*(x1853)*(x1854)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x1854)))+(((IkReal(-14.4500000000000))*(x1853)))+(((x1854)*(x1855)))+(((x1853)*(x1855))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x1853)))+(((IkReal(20.0000000000000))*(x1854))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x1853)))+(((IkReal(20.0000000000000))*(x1854)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-1.80000000000000))*((x1854)*(x1854))))+(((IkReal(-1.80000000000000))*((x1853)*(x1853))))+(((IkReal(-3.60000000000000))*(x1853)*(x1854))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*((x1854)*(x1854))))+(((IkReal(-1.80000000000000))*((x1853)*(x1853))))+(((IkReal(-3.60000000000000))*(x1853)*(x1854)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x1854)))+(((IkReal(-14.4500000000000))*(x1853)))+(((x1854)*(x1855)))+(((x1853)*(x1855)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x1853)))+(((IkReal(20.0000000000000))*(x1854))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x1853)))+(((IkReal(20.0000000000000))*(x1854)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-1.80000000000000))*((x1854)*(x1854))))+(((IkReal(-1.80000000000000))*((x1853)*(x1853))))+(((IkReal(-3.60000000000000))*(x1853)*(x1854))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*((x1854)*(x1854))))+(((IkReal(-1.80000000000000))*((x1853)*(x1853))))+(((IkReal(-3.60000000000000))*(x1853)*(x1854)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x1854)))+(((IkReal(-14.4500000000000))*(x1853)))+(((x1854)*(x1855)))+(((x1853)*(x1855)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1856=IKsin(j1);
IkReal x1857=IKcos(j1);
IkReal x1858=((py)*(sj0));
IkReal x1859=((cj0)*(px));
IkReal x1860=((IkReal(0.0900000000000000))*(x1857));
IkReal x1861=((x1856)*(x1858));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1856)*(x1859)))+(x1861));
evalcond[1]=((IkReal(-0.850000000000000))*(x1857));
evalcond[2]=((((x1857)*(x1859)))+(((x1857)*(x1858))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1858)))+(((IkReal(-1.00000000000000))*(x1859)))+(((IkReal(0.850000000000000))*(x1856))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1856)*(x1859)))+(((IkReal(1.10000000000000))*(x1861)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1859)*(x1860)))+(((IkReal(-1.00000000000000))*(x1858)*(x1860))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1862=((cj0)*(px));
IkReal x1863=((py)*(sj0));
if( IKabs(((((IkReal(1.17647058823529))*(x1862)))+(((IkReal(1.17647058823529))*(x1863))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.53000000000000))*(x1862)))+(((IkReal(-1.53000000000000))*(x1863))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x1862)))+(((IkReal(-1.53000000000000))*(x1863)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x1862)*(x1862))))+(((IkReal(-22.0000000000000))*((x1863)*(x1863))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x1862)*(x1863))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x1862)))+(((IkReal(1.17647058823529))*(x1863)))))+IKsqr(((((IKabs(((((IkReal(-1.53000000000000))*(x1862)))+(((IkReal(-1.53000000000000))*(x1863))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x1862)))+(((IkReal(-1.53000000000000))*(x1863)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x1862)*(x1862))))+(((IkReal(-22.0000000000000))*((x1863)*(x1863))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x1862)*(x1863)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x1862)))+(((IkReal(1.17647058823529))*(x1863)))), ((((IKabs(((((IkReal(-1.53000000000000))*(x1862)))+(((IkReal(-1.53000000000000))*(x1863))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x1862)))+(((IkReal(-1.53000000000000))*(x1863)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x1862)*(x1862))))+(((IkReal(-22.0000000000000))*((x1863)*(x1863))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x1862)*(x1863)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1864=IKsin(j1);
IkReal x1865=IKcos(j1);
IkReal x1866=((py)*(sj0));
IkReal x1867=((cj0)*(px));
IkReal x1868=((IkReal(0.0900000000000000))*(x1865));
IkReal x1869=((x1864)*(x1866));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1864)*(x1867)))+(x1869));
evalcond[1]=((IkReal(-0.850000000000000))*(x1865));
evalcond[2]=((((x1865)*(x1867)))+(((x1865)*(x1866))));
evalcond[3]=((((IkReal(0.850000000000000))*(x1864)))+(((IkReal(-1.00000000000000))*(x1867)))+(((IkReal(-1.00000000000000))*(x1866))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1866)*(x1868)))+(((IkReal(-1.00000000000000))*(x1867)*(x1868)))+(((IkReal(1.10000000000000))*(x1869)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1864)*(x1867))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1870=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-1.00000000000000))*(x1870));
evalcond[3]=x1870;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1871=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1871))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1871))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1872=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1872))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1872))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1873=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1873))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1873))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1874=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1875=((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30);
IkReal x1876=((x1874)*(x1875));
if( IKabs(((IkReal(0.850000000000000))*(x1876))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x1876)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x1876)))+IKsqr(((IkReal(0.0555555555555556))*(x1876)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x1876)), ((IkReal(0.0555555555555556))*(x1876)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1877=IKcos(j1);
IkReal x1878=IKsin(j1);
IkReal x1879=((py)*(sj0));
IkReal x1880=((x1878)*(x1879));
evalcond[0]=((IkReal(-0.850000000000000))+(x1880));
evalcond[1]=((IkReal(-0.850000000000000))*(x1877));
evalcond[2]=((x1877)*(x1879));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1879)))+(((IkReal(0.850000000000000))*(x1878))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1880)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1877)*(x1879))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(py)*(sj0))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(sj0)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(sj0)), ((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1881=IKcos(j1);
IkReal x1882=IKsin(j1);
IkReal x1883=((py)*(sj0));
IkReal x1884=((x1882)*(x1883));
evalcond[0]=((IkReal(-0.850000000000000))+(x1884));
evalcond[1]=((IkReal(-0.850000000000000))*(x1881));
evalcond[2]=((x1881)*(x1883));
evalcond[3]=((((IkReal(0.850000000000000))*(x1882)))+(((IkReal(-1.00000000000000))*(x1883))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1881)*(x1883)))+(((IkReal(1.10000000000000))*(x1884)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1885=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1885)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1885))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1886=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1886));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1886))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1887=IKsin(j1);
IkReal x1888=IKcos(j1);
IkReal x1889=((IkReal(0.0450000000000000))*(x1888));
evalcond[0]=((((IkReal(0.550000000000000))*(x1887)))+(((IkReal(0.300000000000000))*(cj3)*(x1887)))+(((IkReal(-0.300000000000000))*(sj3)*(x1888)))+(((cj3)*(x1889)))+(((IkReal(0.0450000000000000))*(sj3)*(x1887)))+(((IkReal(-1.00000000000000))*(x1889))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1890=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1890)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1890))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1891=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1891));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1891))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1892=IKsin(j1);
IkReal x1893=IKcos(j1);
IkReal x1894=((IkReal(0.0450000000000000))*(x1893));
evalcond[0]=((((IkReal(0.550000000000000))*(x1892)))+(((IkReal(0.300000000000000))*(cj3)*(x1892)))+(((IkReal(0.0450000000000000))*(sj3)*(x1892)))+(((cj3)*(x1894)))+(((IkReal(-0.300000000000000))*(sj3)*(x1893)))+(((IkReal(-1.00000000000000))*(x1894))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1895=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1895;
evalcond[3]=((IkReal(-1.00000000000000))*(x1895));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1896=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1896))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1896))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1897=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1897))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1897))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1898=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1898))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1898))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1899=((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30);
IkReal x1900=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1901=((x1899)*(x1900));
if( IKabs(((IkReal(0.850000000000000))*(x1901))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x1901)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x1901)))+IKsqr(((IkReal(0.0555555555555556))*(x1901)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x1901)), ((IkReal(0.0555555555555556))*(x1901)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1902=IKcos(j1);
IkReal x1903=IKsin(j1);
IkReal x1904=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1903)*(x1904))));
evalcond[1]=((IkReal(-0.850000000000000))*(x1902));
evalcond[2]=((x1902)*(x1904));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1904)))+(((IkReal(0.850000000000000))*(x1903))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1902)*(x1904)))+(((IkReal(1.10000000000000))*(x1903)*(x1904))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(cj0)*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(cj0)*(px)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(cj0)*(px)), ((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1905=IKcos(j1);
IkReal x1906=IKsin(j1);
IkReal x1907=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x1906)*(x1907))));
evalcond[1]=((IkReal(-0.850000000000000))*(x1905));
evalcond[2]=((x1905)*(x1907));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1907)))+(((IkReal(0.850000000000000))*(x1906))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1906)*(x1907)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1905)*(x1907))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1908=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1908)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1908))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1909=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1909));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1909))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1910=IKsin(j1);
IkReal x1911=IKcos(j1);
IkReal x1912=((IkReal(0.0450000000000000))*(x1911));
evalcond[0]=((((cj3)*(x1912)))+(((IkReal(0.0450000000000000))*(sj3)*(x1910)))+(((IkReal(-0.300000000000000))*(sj3)*(x1911)))+(((IkReal(0.300000000000000))*(cj3)*(x1910)))+(((IkReal(0.550000000000000))*(x1910)))+(((IkReal(-1.00000000000000))*(x1912))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1913=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1913)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1913))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1914=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x1914));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1914))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1915=IKsin(j1);
IkReal x1916=IKcos(j1);
IkReal x1917=((IkReal(0.0450000000000000))*(x1916));
evalcond[0]=((((cj3)*(x1917)))+(((IkReal(0.0450000000000000))*(sj3)*(x1915)))+(((IkReal(-0.300000000000000))*(sj3)*(x1916)))+(((IkReal(0.300000000000000))*(cj3)*(x1915)))+(((IkReal(0.550000000000000))*(x1915)))+(((IkReal(-1.00000000000000))*(x1917))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1918=((cj0)*(px));
IkReal x1919=((IkReal(0.300000000000000))*(sj3));
IkReal x1920=((py)*(sj0));
IkReal x1921=((IkReal(0.0450000000000000))*(cj3));
if( IKabs(((((IKabs(((((IkReal(-0.0450000000000000))*(x1920)))+(((x1918)*(x1921)))+(((IkReal(-0.0450000000000000))*(x1918)))+(((IkReal(-1.00000000000000))*(x1919)*(x1920)))+(((x1920)*(x1921)))+(((IkReal(-1.00000000000000))*(x1918)*(x1919))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x1920)))+(((x1918)*(x1921)))+(((IkReal(-0.0450000000000000))*(x1918)))+(((IkReal(-1.00000000000000))*(x1919)*(x1920)))+(((x1920)*(x1921)))+(((IkReal(-1.00000000000000))*(x1918)*(x1919)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x1920)+(x1918))) != 0)?((IkReal)1/(((x1920)+(x1918)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x1921)+(((IkReal(-1.00000000000000))*(x1919))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.0450000000000000))*(x1920)))+(((x1918)*(x1921)))+(((IkReal(-0.0450000000000000))*(x1918)))+(((IkReal(-1.00000000000000))*(x1919)*(x1920)))+(((x1920)*(x1921)))+(((IkReal(-1.00000000000000))*(x1918)*(x1919))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x1920)))+(((x1918)*(x1921)))+(((IkReal(-0.0450000000000000))*(x1918)))+(((IkReal(-1.00000000000000))*(x1919)*(x1920)))+(((x1920)*(x1921)))+(((IkReal(-1.00000000000000))*(x1918)*(x1919)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x1920)+(x1918))) != 0)?((IkReal)1/(((x1920)+(x1918)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x1921)+(((IkReal(-1.00000000000000))*(x1919)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-0.0450000000000000))*(x1920)))+(((x1918)*(x1921)))+(((IkReal(-0.0450000000000000))*(x1918)))+(((IkReal(-1.00000000000000))*(x1919)*(x1920)))+(((x1920)*(x1921)))+(((IkReal(-1.00000000000000))*(x1918)*(x1919))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x1920)))+(((x1918)*(x1921)))+(((IkReal(-0.0450000000000000))*(x1918)))+(((IkReal(-1.00000000000000))*(x1919)*(x1920)))+(((x1920)*(x1921)))+(((IkReal(-1.00000000000000))*(x1918)*(x1919)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x1920)+(x1918))) != 0)?((IkReal)1/(((x1920)+(x1918)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x1921)+(((IkReal(-1.00000000000000))*(x1919)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1922=IKsin(j1);
IkReal x1923=IKcos(j1);
IkReal x1924=((IkReal(0.300000000000000))*(cj3));
IkReal x1925=((IkReal(0.0450000000000000))*(cj3));
IkReal x1926=((cj0)*(px));
IkReal x1927=((py)*(sj0));
IkReal x1928=((IkReal(0.0450000000000000))*(sj3));
IkReal x1929=((IkReal(0.300000000000000))*(sj3));
IkReal x1930=((IkReal(0.0450000000000000))*(x1922));
IkReal x1931=((IkReal(0.0900000000000000))*(x1923));
IkReal x1932=((IkReal(1.10000000000000))*(x1922));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1924)))+(((IkReal(-1.00000000000000))*(x1928)))+(((x1922)*(x1926)))+(((x1922)*(x1927))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1922)*(x1929)))+(((IkReal(-0.550000000000000))*(x1923)))+(((IkReal(-1.00000000000000))*(x1923)*(x1928)))+(((IkReal(-1.00000000000000))*(x1923)*(x1924)))+(((x1922)*(x1925)))+(((IkReal(-1.00000000000000))*(x1930))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1925)))+(x1929)+(((x1923)*(x1927)))+(((x1923)*(x1926))));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x1923)))+(((IkReal(-1.00000000000000))*(x1927)))+(((IkReal(-1.00000000000000))*(x1926)))+(((IkReal(0.550000000000000))*(x1922)))+(((x1923)*(x1925)))+(((IkReal(-1.00000000000000))*(x1923)*(x1929)))+(((x1922)*(x1924)))+(((x1922)*(x1928))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x1926)*(x1932)))+(((IkReal(-1.00000000000000))*(x1926)*(x1931)))+(((x1927)*(x1932)))+(((IkReal(-1.00000000000000))*(x1927)*(x1931))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1933=((cj0)*(px));
IkReal x1934=((IkReal(0.0450000000000000))*(sj3));
IkReal x1935=((py)*(sj0));
IkReal x1936=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x1933)+(x1935))) != 0)?((IkReal)1/(((x1933)+(x1935)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x1936)+(x1934))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x1933)*(x1934)))+(((IkReal(-1.00000000000000))*(x1933)*(x1936)))+(((IkReal(-1.00000000000000))*(x1934)*(x1935)))+(((IkReal(-0.550000000000000))*(x1935)))+(((IkReal(-0.550000000000000))*(x1933)))+(((IkReal(-1.00000000000000))*(x1935)*(x1936))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1933)*(x1934)))+(((IkReal(-1.00000000000000))*(x1933)*(x1936)))+(((IkReal(-1.00000000000000))*(x1934)*(x1935)))+(((IkReal(-0.550000000000000))*(x1935)))+(((IkReal(-0.550000000000000))*(x1933)))+(((IkReal(-1.00000000000000))*(x1935)*(x1936)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x1933)+(x1935))) != 0)?((IkReal)1/(((x1933)+(x1935)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x1936)+(x1934)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x1933)*(x1934)))+(((IkReal(-1.00000000000000))*(x1933)*(x1936)))+(((IkReal(-1.00000000000000))*(x1934)*(x1935)))+(((IkReal(-0.550000000000000))*(x1935)))+(((IkReal(-0.550000000000000))*(x1933)))+(((IkReal(-1.00000000000000))*(x1935)*(x1936))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1933)*(x1934)))+(((IkReal(-1.00000000000000))*(x1933)*(x1936)))+(((IkReal(-1.00000000000000))*(x1934)*(x1935)))+(((IkReal(-0.550000000000000))*(x1935)))+(((IkReal(-0.550000000000000))*(x1933)))+(((IkReal(-1.00000000000000))*(x1935)*(x1936)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x1933)+(x1935))) != 0)?((IkReal)1/(((x1933)+(x1935)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x1936)+(x1934)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x1933)*(x1934)))+(((IkReal(-1.00000000000000))*(x1933)*(x1936)))+(((IkReal(-1.00000000000000))*(x1934)*(x1935)))+(((IkReal(-0.550000000000000))*(x1935)))+(((IkReal(-0.550000000000000))*(x1933)))+(((IkReal(-1.00000000000000))*(x1935)*(x1936))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1933)*(x1934)))+(((IkReal(-1.00000000000000))*(x1933)*(x1936)))+(((IkReal(-1.00000000000000))*(x1934)*(x1935)))+(((IkReal(-0.550000000000000))*(x1935)))+(((IkReal(-0.550000000000000))*(x1933)))+(((IkReal(-1.00000000000000))*(x1935)*(x1936)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1937=IKsin(j1);
IkReal x1938=IKcos(j1);
IkReal x1939=((IkReal(0.300000000000000))*(cj3));
IkReal x1940=((IkReal(0.0450000000000000))*(cj3));
IkReal x1941=((cj0)*(px));
IkReal x1942=((py)*(sj0));
IkReal x1943=((IkReal(0.0450000000000000))*(sj3));
IkReal x1944=((IkReal(0.300000000000000))*(sj3));
IkReal x1945=((IkReal(0.0450000000000000))*(x1937));
IkReal x1946=((IkReal(0.0900000000000000))*(x1938));
IkReal x1947=((IkReal(1.10000000000000))*(x1937));
evalcond[0]=((IkReal(-0.550000000000000))+(((x1937)*(x1941)))+(((x1937)*(x1942)))+(((IkReal(-1.00000000000000))*(x1943)))+(((IkReal(-1.00000000000000))*(x1939))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1937)*(x1944)))+(((x1937)*(x1940)))+(((IkReal(-1.00000000000000))*(x1945)))+(((IkReal(-0.550000000000000))*(x1938)))+(((IkReal(-1.00000000000000))*(x1938)*(x1943)))+(((IkReal(-1.00000000000000))*(x1938)*(x1939))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x1938)*(x1942)))+(((x1938)*(x1941)))+(((IkReal(-1.00000000000000))*(x1940)))+(x1944));
evalcond[3]=((((x1938)*(x1940)))+(((x1937)*(x1943)))+(((IkReal(0.550000000000000))*(x1937)))+(((IkReal(-1.00000000000000))*(x1941)))+(((IkReal(-1.00000000000000))*(x1942)))+(((IkReal(-0.0450000000000000))*(x1938)))+(((IkReal(-1.00000000000000))*(x1938)*(x1944)))+(((x1937)*(x1939))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1942)*(x1946)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1941)*(x1947)))+(((x1942)*(x1947)))+(((IkReal(-1.00000000000000))*(x1941)*(x1946))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst49)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst49)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))), ((gconst49)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1948=IKsin(j1);
IkReal x1949=IKcos(j1);
IkReal x1950=((IkReal(0.300000000000000))*(cj3));
IkReal x1951=((IkReal(0.0450000000000000))*(cj3));
IkReal x1952=((cj0)*(px));
IkReal x1953=((py)*(sj0));
IkReal x1954=((IkReal(0.0450000000000000))*(sj3));
IkReal x1955=((IkReal(0.300000000000000))*(sj3));
IkReal x1956=((IkReal(0.0450000000000000))*(x1948));
IkReal x1957=((IkReal(0.0900000000000000))*(x1949));
IkReal x1958=((IkReal(1.10000000000000))*(x1948));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1954)))+(((IkReal(-1.00000000000000))*(x1950)))+(((x1948)*(x1952)))+(((x1948)*(x1953))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1949)*(x1954)))+(((IkReal(-1.00000000000000))*(x1949)*(x1950)))+(((IkReal(-1.00000000000000))*(x1948)*(x1955)))+(((IkReal(-1.00000000000000))*(x1956)))+(((x1948)*(x1951)))+(((IkReal(-0.550000000000000))*(x1949))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1951)))+(x1955)+(((x1949)*(x1953)))+(((x1949)*(x1952))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1949)*(x1955)))+(((IkReal(-0.0450000000000000))*(x1949)))+(((IkReal(-1.00000000000000))*(x1953)))+(((IkReal(-1.00000000000000))*(x1952)))+(((x1948)*(x1950)))+(((x1948)*(x1954)))+(((x1949)*(x1951)))+(((IkReal(0.550000000000000))*(x1948))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1952)*(x1958)))+(((IkReal(-1.00000000000000))*(x1952)*(x1957)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1953)*(x1957)))+(((x1953)*(x1958))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1959=((IkReal(0.0450000000000000))*(sj3));
IkReal x1960=((cj2)*(px));
IkReal x1961=((cj0)*(px));
IkReal x1962=((pz)*(sj2));
IkReal x1963=((py)*(sj0)*(sj2));
IkReal x1964=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x1965=((IkReal(1.00000000000000))*(cj0)*(cj2));
if( IKabs(((gconst35)*(((((sj2)*(x1959)*(x1961)))+(((x1959)*(x1963)))+(((IkReal(0.300000000000000))*(cj3)*(x1963)))+(((IkReal(0.550000000000000))*(sj2)*(x1961)))+(((x1961)*(x1964)))+(((pz)*(sj0)*(x1960)))+(((IkReal(0.550000000000000))*(x1963)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x1965))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((x1959)*(x1962)))+(((IkReal(-1.00000000000000))*(sj0)*(x1960)*(x1961)))+(((IkReal(0.300000000000000))*(cj3)*(x1962)))+(((IkReal(-1.00000000000000))*(py)*(x1960)*((sj0)*(sj0))))+(((IkReal(0.550000000000000))*(x1962)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((py)*(x1960)*((cj0)*(cj0)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((sj2)*(x1959)*(x1961)))+(((x1959)*(x1963)))+(((IkReal(0.300000000000000))*(cj3)*(x1963)))+(((IkReal(0.550000000000000))*(sj2)*(x1961)))+(((x1961)*(x1964)))+(((pz)*(sj0)*(x1960)))+(((IkReal(0.550000000000000))*(x1963)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x1965)))))), ((gconst35)*(((((x1959)*(x1962)))+(((IkReal(-1.00000000000000))*(sj0)*(x1960)*(x1961)))+(((IkReal(0.300000000000000))*(cj3)*(x1962)))+(((IkReal(-1.00000000000000))*(py)*(x1960)*((sj0)*(sj0))))+(((IkReal(0.550000000000000))*(x1962)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((py)*(x1960)*((cj0)*(cj0))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1966=IKsin(j1);
IkReal x1967=IKcos(j1);
IkReal x1968=((px)*(sj2));
IkReal x1969=((IkReal(0.300000000000000))*(sj3));
IkReal x1970=((IkReal(0.0900000000000000))*(sj0));
IkReal x1971=((cj2)*(px));
IkReal x1972=((IkReal(0.0450000000000000))*(cj3));
IkReal x1973=((IkReal(0.0450000000000000))*(cj2));
IkReal x1974=((py)*(sj0));
IkReal x1975=((IkReal(0.0450000000000000))*(sj3));
IkReal x1976=((IkReal(1.00000000000000))*(cj0));
IkReal x1977=((IkReal(0.300000000000000))*(cj3));
IkReal x1978=((py)*(sj2));
IkReal x1979=((cj0)*(x1967));
IkReal x1980=((cj3)*(x1966));
IkReal x1981=((cj2)*(x1967));
IkReal x1982=((cj2)*(x1966));
IkReal x1983=((pz)*(x1967));
IkReal x1984=((cj0)*(px)*(x1966));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1975)))+(((IkReal(-1.00000000000000))*(x1977)))+(x1984)+(x1983)+(((x1966)*(x1974))));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)*(sj2)*(x1966)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x1976)))+(((sj0)*(x1971)))+(((sj2)*(x1967)*(x1974)))+(((x1968)*(x1979))));
evalcond[2]=((((x1969)*(x1982)))+(((IkReal(-1.00000000000000))*(x1972)*(x1982)))+(pz)+(((IkReal(-0.550000000000000))*(x1967)))+(((x1966)*(x1973)))+(((IkReal(-1.00000000000000))*(x1967)*(x1975)))+(((IkReal(-1.00000000000000))*(x1967)*(x1977))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1976)*(x1978)))+(((IkReal(-1.00000000000000))*(x1967)*(x1971)*(x1976)))+(((sj0)*(x1968)))+(((IkReal(-1.00000000000000))*(x1972)))+(((pz)*(x1982)))+(x1969)+(((IkReal(-1.00000000000000))*(x1974)*(x1981))));
evalcond[4]=((((x1967)*(x1973)))+(((x1969)*(x1981)))+(((IkReal(-1.00000000000000))*(x1972)*(x1981)))+(((IkReal(-1.00000000000000))*(x1974)))+(((IkReal(-1.00000000000000))*(px)*(x1976)))+(((x1966)*(x1977)))+(((x1966)*(x1975)))+(((IkReal(0.550000000000000))*(x1966))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1983)))+(((IkReal(1.10000000000000))*(x1984)))+(((IkReal(1.10000000000000))*(x1966)*(x1974)))+(((IkReal(0.0900000000000000))*(x1971)*(x1979)))+(((IkReal(-1.00000000000000))*(x1968)*(x1970)))+(((py)*(x1970)*(x1981)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(cj0)*(x1978)))+(((IkReal(-0.0900000000000000))*(pz)*(x1982))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1985=(cj3)*(cj3);
IkReal x1986=(sj3)*(sj3);
IkReal x1987=((cj2)*(sj3));
IkReal x1988=((IkReal(0.0135000000000000))*(cj2));
IkReal x1989=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x1986)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x1985)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x1989)))+(((IkReal(-1.00000000000000))*(x1986)*(x1988)))+(((IkReal(-0.0879750000000000))*(cj3)*(x1987)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1989)))+(((IkReal(-0.167025000000000))*(x1987)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))+(((x1985)*(x1988))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x1986)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x1985)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x1989)))+(((IkReal(-1.00000000000000))*(x1986)*(x1988)))+(((IkReal(-0.0879750000000000))*(cj3)*(x1987)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1989)))+(((IkReal(-0.167025000000000))*(x1987)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))+(((x1985)*(x1988)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1990=IKsin(j1);
IkReal x1991=IKcos(j1);
IkReal x1992=((px)*(sj2));
IkReal x1993=((IkReal(0.300000000000000))*(sj3));
IkReal x1994=((IkReal(0.0900000000000000))*(sj0));
IkReal x1995=((cj2)*(px));
IkReal x1996=((IkReal(0.0450000000000000))*(cj3));
IkReal x1997=((IkReal(0.0450000000000000))*(cj2));
IkReal x1998=((py)*(sj0));
IkReal x1999=((IkReal(0.0450000000000000))*(sj3));
IkReal x2000=((IkReal(1.00000000000000))*(cj0));
IkReal x2001=((IkReal(0.300000000000000))*(cj3));
IkReal x2002=((py)*(sj2));
IkReal x2003=((cj0)*(x1991));
IkReal x2004=((cj3)*(x1990));
IkReal x2005=((cj2)*(x1991));
IkReal x2006=((cj2)*(x1990));
IkReal x2007=((pz)*(x1991));
IkReal x2008=((cj0)*(px)*(x1990));
evalcond[0]=((IkReal(-0.550000000000000))+(x2007)+(x2008)+(((IkReal(-1.00000000000000))*(x1999)))+(((IkReal(-1.00000000000000))*(x2001)))+(((x1990)*(x1998))));
evalcond[1]=((((sj0)*(x1995)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x2000)))+(((x1992)*(x2003)))+(((sj2)*(x1991)*(x1998)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x1990))));
evalcond[2]=((((IkReal(-0.550000000000000))*(x1991)))+(((IkReal(-1.00000000000000))*(x1991)*(x2001)))+(((x1993)*(x2006)))+(pz)+(((IkReal(-1.00000000000000))*(x1996)*(x2006)))+(((IkReal(-1.00000000000000))*(x1991)*(x1999)))+(((x1990)*(x1997))));
evalcond[3]=((IkReal(0.0450000000000000))+(((sj0)*(x1992)))+(((IkReal(-1.00000000000000))*(x1998)*(x2005)))+(((IkReal(-1.00000000000000))*(x2000)*(x2002)))+(x1993)+(((pz)*(x2006)))+(((IkReal(-1.00000000000000))*(x1996)))+(((IkReal(-1.00000000000000))*(x1991)*(x1995)*(x2000))));
evalcond[4]=((((IkReal(-1.00000000000000))*(px)*(x2000)))+(((x1990)*(x2001)))+(((x1993)*(x2005)))+(((x1991)*(x1997)))+(((IkReal(-1.00000000000000))*(x1996)*(x2005)))+(((x1990)*(x1999)))+(((IkReal(-1.00000000000000))*(x1998)))+(((IkReal(0.550000000000000))*(x1990))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1990)*(x1998)))+(((IkReal(0.0900000000000000))*(x1995)*(x2003)))+(((IkReal(1.10000000000000))*(x2007)))+(((IkReal(1.10000000000000))*(x2008)))+(((IkReal(-0.0900000000000000))*(pz)*(x2006)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(cj0)*(x2002)))+(((IkReal(-1.00000000000000))*(x1992)*(x1994)))+(((py)*(x1994)*(x2005))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2009=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2010=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x2009)+(((IkReal(-1.00000000000000))*(cj3)*(x2009))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x2009)+(((IkReal(-1.00000000000000))*(cj3)*(x2009))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2011=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x2009)+(((IkReal(-1.00000000000000))*(cj3)*(x2009)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x2010)))+(((IkReal(-1.00000000000000))*(x2011))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2010)))+(x2011));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x2012=((py)*(sj0));
IkReal x2013=((IkReal(0.300000000000000))*(cj3));
IkReal x2014=((cj0)*(px));
IkReal x2015=((cj2)*(pz));
IkReal x2016=((IkReal(0.0450000000000000))*(sj3));
gconst34=IKsign(((((IkReal(-1.00000000000000))*(x2013)*(x2014)))+(((IkReal(-0.0450000000000000))*(x2015)))+(((IkReal(-0.300000000000000))*(sj3)*(x2015)))+(((IkReal(-1.00000000000000))*(x2014)*(x2016)))+(((IkReal(0.0450000000000000))*(cj3)*(x2015)))+(((IkReal(-1.00000000000000))*(x2012)*(x2013)))+(((IkReal(-1.00000000000000))*(x2012)*(x2016)))+(((IkReal(-0.550000000000000))*(x2014)))+(((IkReal(-0.550000000000000))*(x2012)))));
IkReal x2017=((py)*(sj0));
IkReal x2018=((cj2)*(pz));
IkReal x2019=((IkReal(6.66666666666667))*(cj3));
IkReal x2020=((cj0)*(px));
IkReal x2021=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x2017)))+(((IkReal(-6.66666666666667))*(sj3)*(x2018)))+(((IkReal(-1.00000000000000))*(x2017)*(x2021)))+(((IkReal(-1.00000000000000))*(x2019)*(x2020)))+(((cj3)*(x2018)))+(((IkReal(-1.00000000000000))*(x2018)))+(((IkReal(-1.00000000000000))*(x2020)*(x2021)))+(((IkReal(-1.00000000000000))*(x2017)*(x2019)))+(((IkReal(-12.2222222222222))*(x2020))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x2022=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2022;
evalcond[3]=x2022;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x2023=((cj0)*(px));
IkReal x2024=((IkReal(0.0450000000000000))*(pz));
IkReal x2025=((py)*(sj0));
IkReal x2026=((IkReal(0.300000000000000))*(cj3));
IkReal x2027=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-1.00000000000000))*(x2023)*(x2026)))+(((IkReal(-1.00000000000000))*(x2023)*(x2027)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x2025)*(x2026)))+(((IkReal(-1.00000000000000))*(x2025)*(x2027)))+(((IkReal(-0.550000000000000))*(x2025)))+(((IkReal(-0.550000000000000))*(x2023)))+(((IkReal(-1.00000000000000))*(x2024)))+(((cj3)*(x2024)))));
IkReal x2028=((py)*(sj0));
IkReal x2029=((IkReal(6.66666666666667))*(cj3));
IkReal x2030=((cj0)*(px));
IkReal x2031=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x2030)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x2029)*(x2030)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x2030)*(x2031)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x2028)*(x2031)))+(((IkReal(-12.2222222222222))*(x2028)))+(((IkReal(-1.00000000000000))*(x2028)*(x2029))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2032=((py)*(sj0));
IkReal x2033=((pz)*(sj3));
IkReal x2034=((cj0)*(px));
IkReal x2035=((IkReal(0.300000000000000))*(sj3));
IkReal x2036=((IkReal(0.0450000000000000))*(cj3));
IkReal x2037=((IkReal(0.300000000000000))*(cj3));
IkReal x2038=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(pz)*(x2036)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(0.300000000000000))*(x2033)))+(((IkReal(-0.550000000000000))*(x2032)))+(((IkReal(-0.550000000000000))*(x2034)))+(((IkReal(-1.00000000000000))*(x2032)*(x2037)))+(((IkReal(-1.00000000000000))*(x2032)*(x2038)))+(((IkReal(-1.00000000000000))*(x2034)*(x2037)))+(((IkReal(-1.00000000000000))*(x2034)*(x2038))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x2034)*(x2036)))+(((IkReal(-1.00000000000000))*(pz)*(x2037)))+(((x2032)*(x2036)))+(((IkReal(-1.00000000000000))*(x2032)*(x2035)))+(((IkReal(-1.00000000000000))*(x2034)*(x2035)))+(((IkReal(-0.0450000000000000))*(x2033)))+(((IkReal(-0.0450000000000000))*(x2032)))+(((IkReal(-0.0450000000000000))*(x2034))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(-1.00000000000000))*(pz)*(x2036)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(0.300000000000000))*(x2033)))+(((IkReal(-0.550000000000000))*(x2032)))+(((IkReal(-0.550000000000000))*(x2034)))+(((IkReal(-1.00000000000000))*(x2032)*(x2037)))+(((IkReal(-1.00000000000000))*(x2032)*(x2038)))+(((IkReal(-1.00000000000000))*(x2034)*(x2037)))+(((IkReal(-1.00000000000000))*(x2034)*(x2038)))))), ((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x2034)*(x2036)))+(((IkReal(-1.00000000000000))*(pz)*(x2037)))+(((x2032)*(x2036)))+(((IkReal(-1.00000000000000))*(x2032)*(x2035)))+(((IkReal(-1.00000000000000))*(x2034)*(x2035)))+(((IkReal(-0.0450000000000000))*(x2033)))+(((IkReal(-0.0450000000000000))*(x2032)))+(((IkReal(-0.0450000000000000))*(x2034)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2039=IKsin(j1);
IkReal x2040=IKcos(j1);
IkReal x2041=((IkReal(0.300000000000000))*(cj3));
IkReal x2042=((IkReal(0.0450000000000000))*(cj3));
IkReal x2043=((cj0)*(px));
IkReal x2044=((py)*(sj0));
IkReal x2045=((IkReal(0.0450000000000000))*(sj3));
IkReal x2046=((IkReal(0.300000000000000))*(sj3));
IkReal x2047=((IkReal(0.0450000000000000))*(x2039));
IkReal x2048=((IkReal(1.00000000000000))*(x2040));
IkReal x2049=((pz)*(x2039));
IkReal x2050=((pz)*(x2040));
IkReal x2051=((IkReal(0.0900000000000000))*(x2040));
IkReal x2052=((IkReal(1.10000000000000))*(x2039));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2041)))+(((IkReal(-1.00000000000000))*(x2045)))+(x2050)+(((x2039)*(x2044)))+(((x2039)*(x2043))));
evalcond[1]=((x2047)+(((IkReal(-1.00000000000000))*(x2039)*(x2042)))+(((x2039)*(x2046)))+(((IkReal(-0.550000000000000))*(x2040)))+(pz)+(((IkReal(-1.00000000000000))*(x2040)*(x2045)))+(((IkReal(-1.00000000000000))*(x2040)*(x2041))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2042)))+(x2046)+(x2049)+(((IkReal(-1.00000000000000))*(x2044)*(x2048)))+(((IkReal(-1.00000000000000))*(x2043)*(x2048))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x2040)))+(((x2040)*(x2046)))+(((IkReal(0.550000000000000))*(x2039)))+(((x2039)*(x2045)))+(((x2039)*(x2041)))+(((IkReal(-1.00000000000000))*(x2043)))+(((IkReal(-1.00000000000000))*(x2044)))+(((IkReal(-1.00000000000000))*(x2040)*(x2042))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2043)*(x2051)))+(((x2043)*(x2052)))+(((IkReal(1.10000000000000))*(x2050)))+(((x2044)*(x2052)))+(((x2044)*(x2051)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2049))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2053=(cj3)*(cj3);
IkReal x2054=(sj3)*(sj3);
IkReal x2055=((cj3)*(sj3));
IkReal x2056=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x2055)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0900000000000000))*(x2053)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x2054)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x2053)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x2056)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x2056)))+(((IkReal(-0.0879750000000000))*(x2055)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x2054))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x2055)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0900000000000000))*(x2053)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x2054)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x2053)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x2056)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x2056)))+(((IkReal(-0.0879750000000000))*(x2055)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x2054)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2057=IKsin(j1);
IkReal x2058=IKcos(j1);
IkReal x2059=((IkReal(0.300000000000000))*(cj3));
IkReal x2060=((IkReal(0.0450000000000000))*(cj3));
IkReal x2061=((cj0)*(px));
IkReal x2062=((py)*(sj0));
IkReal x2063=((IkReal(0.0450000000000000))*(sj3));
IkReal x2064=((IkReal(0.300000000000000))*(sj3));
IkReal x2065=((IkReal(0.0450000000000000))*(x2057));
IkReal x2066=((IkReal(1.00000000000000))*(x2058));
IkReal x2067=((pz)*(x2057));
IkReal x2068=((pz)*(x2058));
IkReal x2069=((IkReal(0.0900000000000000))*(x2058));
IkReal x2070=((IkReal(1.10000000000000))*(x2057));
evalcond[0]=((IkReal(-0.550000000000000))+(x2068)+(((IkReal(-1.00000000000000))*(x2063)))+(((x2057)*(x2061)))+(((x2057)*(x2062)))+(((IkReal(-1.00000000000000))*(x2059))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2058)*(x2059)))+(((IkReal(-1.00000000000000))*(x2057)*(x2060)))+(((IkReal(-1.00000000000000))*(x2058)*(x2063)))+(x2065)+(((IkReal(-0.550000000000000))*(x2058)))+(pz)+(((x2057)*(x2064))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2064)+(x2067)+(((IkReal(-1.00000000000000))*(x2060)))+(((IkReal(-1.00000000000000))*(x2061)*(x2066)))+(((IkReal(-1.00000000000000))*(x2062)*(x2066))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2058)*(x2060)))+(((IkReal(-1.00000000000000))*(x2061)))+(((IkReal(-1.00000000000000))*(x2062)))+(((x2058)*(x2064)))+(((IkReal(0.0450000000000000))*(x2058)))+(((x2057)*(x2063)))+(((x2057)*(x2059)))+(((IkReal(0.550000000000000))*(x2057))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2068)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2062)*(x2069)))+(((x2062)*(x2070)))+(((IkReal(-0.0900000000000000))*(x2067)))+(((x2061)*(x2070)))+(((x2061)*(x2069))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2071=((px)*(sj0));
IkReal x2072=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((x2071)+(((IkReal(-1.00000000000000))*(x2072))));
evalcond[3]=((x2072)+(((IkReal(-1.00000000000000))*(x2071))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x2073=((cj0)*(px));
IkReal x2074=((IkReal(0.0450000000000000))*(pz));
IkReal x2075=((py)*(sj0));
IkReal x2076=((IkReal(0.300000000000000))*(cj3));
IkReal x2077=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((x2074)+(((IkReal(-1.00000000000000))*(cj3)*(x2074)))+(((IkReal(-0.550000000000000))*(x2073)))+(((IkReal(-0.550000000000000))*(x2075)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x2073)*(x2077)))+(((IkReal(-1.00000000000000))*(x2073)*(x2076)))+(((IkReal(-1.00000000000000))*(x2075)*(x2077)))+(((IkReal(-1.00000000000000))*(x2075)*(x2076)))));
IkReal x2078=((py)*(sj0));
IkReal x2079=((IkReal(6.66666666666667))*(cj3));
IkReal x2080=((cj0)*(px));
IkReal x2081=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x2080)))+(((IkReal(-1.00000000000000))*(x2078)*(x2081)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x2078)))+(pz)+(((IkReal(-1.00000000000000))*(x2080)*(x2081)))+(((IkReal(-1.00000000000000))*(x2079)*(x2080)))+(((IkReal(-1.00000000000000))*(x2078)*(x2079))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2082=((py)*(sj0));
IkReal x2083=((cj0)*(px));
IkReal x2084=((IkReal(0.300000000000000))*(sj3));
IkReal x2085=((IkReal(0.0450000000000000))*(cj3));
IkReal x2086=((IkReal(0.0450000000000000))*(pz));
IkReal x2087=((IkReal(0.300000000000000))*(cj3));
IkReal x2088=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst39)*(((x2086)+(((pz)*(x2084)))+(((x2083)*(x2087)))+(((x2083)*(x2088)))+(((IkReal(-1.00000000000000))*(pz)*(x2085)))+(((x2082)*(x2088)))+(((x2082)*(x2087)))+(((IkReal(0.550000000000000))*(x2083)))+(((IkReal(0.550000000000000))*(x2082))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((pz)*(x2087)))+(((x2083)*(x2085)))+(((IkReal(-1.00000000000000))*(x2083)*(x2084)))+(((x2082)*(x2085)))+(((IkReal(-1.00000000000000))*(x2082)*(x2084)))+(((IkReal(-0.0450000000000000))*(x2082)))+(((IkReal(-0.0450000000000000))*(x2083)))+(((sj3)*(x2086)))+(((IkReal(0.550000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((x2086)+(((pz)*(x2084)))+(((x2083)*(x2087)))+(((x2083)*(x2088)))+(((IkReal(-1.00000000000000))*(pz)*(x2085)))+(((x2082)*(x2088)))+(((x2082)*(x2087)))+(((IkReal(0.550000000000000))*(x2083)))+(((IkReal(0.550000000000000))*(x2082)))))), ((gconst39)*(((((pz)*(x2087)))+(((x2083)*(x2085)))+(((IkReal(-1.00000000000000))*(x2083)*(x2084)))+(((x2082)*(x2085)))+(((IkReal(-1.00000000000000))*(x2082)*(x2084)))+(((IkReal(-0.0450000000000000))*(x2082)))+(((IkReal(-0.0450000000000000))*(x2083)))+(((sj3)*(x2086)))+(((IkReal(0.550000000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2089=IKsin(j1);
IkReal x2090=IKcos(j1);
IkReal x2091=((IkReal(0.300000000000000))*(cj3));
IkReal x2092=((IkReal(0.0450000000000000))*(cj3));
IkReal x2093=((cj0)*(px));
IkReal x2094=((py)*(sj0));
IkReal x2095=((IkReal(0.0450000000000000))*(sj3));
IkReal x2096=((IkReal(0.300000000000000))*(sj3));
IkReal x2097=((IkReal(0.0450000000000000))*(x2089));
IkReal x2098=((pz)*(x2089));
IkReal x2099=((pz)*(x2090));
IkReal x2100=((IkReal(0.0900000000000000))*(x2090));
IkReal x2101=((IkReal(1.10000000000000))*(x2089));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2095)))+(((IkReal(-1.00000000000000))*(x2091)))+(x2099)+(((x2089)*(x2093)))+(((x2089)*(x2094))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2097)))+(((IkReal(-1.00000000000000))*(x2090)*(x2095)))+(((IkReal(-1.00000000000000))*(x2090)*(x2091)))+(((IkReal(-1.00000000000000))*(x2089)*(x2096)))+(((x2089)*(x2092)))+(pz)+(((IkReal(-0.550000000000000))*(x2090))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2092)))+(x2096)+(((x2090)*(x2093)))+(((x2090)*(x2094)))+(((IkReal(-1.00000000000000))*(x2098))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2090)*(x2096)))+(((IkReal(-0.0450000000000000))*(x2090)))+(((x2090)*(x2092)))+(((x2089)*(x2091)))+(((x2089)*(x2095)))+(((IkReal(-1.00000000000000))*(x2093)))+(((IkReal(-1.00000000000000))*(x2094)))+(((IkReal(0.550000000000000))*(x2089))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2093)*(x2100)))+(((IkReal(1.10000000000000))*(x2099)))+(((x2093)*(x2101)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2094)*(x2100)))+(((IkReal(0.0900000000000000))*(x2098)))+(((x2094)*(x2101))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2102=(sj3)*(sj3);
IkReal x2103=(cj3)*(cj3);
IkReal x2104=((cj3)*(sj3));
IkReal x2105=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0900000000000000))*(x2103)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x2104)))+(((IkReal(-0.00202500000000000))*(x2102)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x2105)))+(((IkReal(0.0879750000000000))*(x2104)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x2105)))+(((IkReal(-0.0135000000000000))*(x2103)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x2102))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0900000000000000))*(x2103)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x2104)))+(((IkReal(-0.00202500000000000))*(x2102)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x2105)))+(((IkReal(0.0879750000000000))*(x2104)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x2105)))+(((IkReal(-0.0135000000000000))*(x2103)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x2102)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2106=IKsin(j1);
IkReal x2107=IKcos(j1);
IkReal x2108=((IkReal(0.300000000000000))*(cj3));
IkReal x2109=((IkReal(0.0450000000000000))*(cj3));
IkReal x2110=((cj0)*(px));
IkReal x2111=((py)*(sj0));
IkReal x2112=((IkReal(0.0450000000000000))*(sj3));
IkReal x2113=((IkReal(0.300000000000000))*(sj3));
IkReal x2114=((IkReal(0.0450000000000000))*(x2106));
IkReal x2115=((pz)*(x2106));
IkReal x2116=((pz)*(x2107));
IkReal x2117=((IkReal(0.0900000000000000))*(x2107));
IkReal x2118=((IkReal(1.10000000000000))*(x2106));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2108)))+(x2116)+(((x2106)*(x2110)))+(((x2106)*(x2111)))+(((IkReal(-1.00000000000000))*(x2112))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2107)*(x2112)))+(((IkReal(-1.00000000000000))*(x2107)*(x2108)))+(pz)+(((x2106)*(x2109)))+(((IkReal(-1.00000000000000))*(x2114)))+(((IkReal(-0.550000000000000))*(x2107)))+(((IkReal(-1.00000000000000))*(x2106)*(x2113))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2109)))+(x2113)+(((x2107)*(x2110)))+(((x2107)*(x2111)))+(((IkReal(-1.00000000000000))*(x2115))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2107)*(x2113)))+(((IkReal(-0.0450000000000000))*(x2107)))+(((x2106)*(x2112)))+(((IkReal(0.550000000000000))*(x2106)))+(((x2107)*(x2109)))+(((x2106)*(x2108)))+(((IkReal(-1.00000000000000))*(x2110)))+(((IkReal(-1.00000000000000))*(x2111))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2111)*(x2118)))+(((IkReal(1.10000000000000))*(x2116)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2110)*(x2118)))+(((IkReal(-1.00000000000000))*(x2111)*(x2117)))+(((IkReal(-1.00000000000000))*(x2110)*(x2117)))+(((IkReal(0.0900000000000000))*(x2115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2119=((IkReal(-1.00000000000000))*(cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2119;
evalcond[3]=x2119;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x2120=((IkReal(0.0450000000000000))*(pz));
IkReal x2121=((py)*(sj0));
gconst41=IKsign(((((IkReal(-0.0450000000000000))*(sj3)*(x2121)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((cj3)*(x2120)))+(((IkReal(-0.550000000000000))*(x2121)))+(((IkReal(-1.00000000000000))*(x2120)))+(((IkReal(-0.300000000000000))*(cj3)*(x2121)))));
IkReal x2122=((py)*(sj0));
dummyeval[0]=((((IkReal(-6.66666666666667))*(cj3)*(x2122)))+(((IkReal(-1.00000000000000))*(sj3)*(x2122)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x2122)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2123=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2123))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2123))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2124=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2124)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2124))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2124)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2124)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2124)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2124)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2125=IKcos(j1);
IkReal x2126=IKsin(j1);
IkReal x2127=((pz)*(x2126));
IkReal x2128=((pz)*(x2125));
evalcond[0]=((IkReal(-0.850000000000000))+(x2128));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2125))));
evalcond[2]=x2127;
evalcond[3]=((IkReal(0.850000000000000))*(x2126));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x2127)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2129=IKcos(j1);
IkReal x2130=IKsin(j1);
IkReal x2131=((pz)*(x2130));
IkReal x2132=((pz)*(x2129));
evalcond[0]=((IkReal(-0.850000000000000))+(x2132));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2129))));
evalcond[2]=x2131;
evalcond[3]=((IkReal(0.850000000000000))*(x2130));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2132)))+(((IkReal(-0.0900000000000000))*(x2131)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2133=((IkReal(1.00000000000000))*(pp));
IkReal x2134=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2133)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2134;
evalcond[4]=x2134;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2133))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2135=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2135));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2135))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2136=IKsin(j1);
IkReal x2137=IKcos(j1);
IkReal x2138=((IkReal(0.0450000000000000))*(x2137));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x2138)))+(x2138)+(((IkReal(0.550000000000000))*(x2136)))+(((IkReal(0.300000000000000))*(sj3)*(x2137)))+(((IkReal(0.0450000000000000))*(sj3)*(x2136)))+(((IkReal(0.300000000000000))*(cj3)*(x2136))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2139=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2139)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2139))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2140=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2140));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2140))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2141=IKsin(j1);
IkReal x2142=IKcos(j1);
IkReal x2143=((IkReal(0.0450000000000000))*(x2142));
evalcond[0]=((x2143)+(((IkReal(0.0450000000000000))*(sj3)*(x2141)))+(((IkReal(0.300000000000000))*(cj3)*(x2141)))+(((IkReal(0.550000000000000))*(x2141)))+(((IkReal(0.300000000000000))*(sj3)*(x2142)))+(((IkReal(-1.00000000000000))*(cj3)*(x2143))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2144=(cj3)*(cj3);
IkReal x2145=(sj3)*(sj3);
IkReal x2146=((cj3)*(sj3));
if( IKabs(((gconst41)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x2144)))+(((IkReal(-0.00202500000000000))*(x2145)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x2146)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x2144)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(-0.0879750000000000))*(x2146)))+(((IkReal(-0.0135000000000000))*(x2145))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst41)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x2144)))+(((IkReal(-0.00202500000000000))*(x2145)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x2146)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst41)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x2144)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(-0.0879750000000000))*(x2146)))+(((IkReal(-0.0135000000000000))*(x2145)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2147=IKsin(j1);
IkReal x2148=IKcos(j1);
IkReal x2149=((IkReal(0.300000000000000))*(cj3));
IkReal x2150=((IkReal(0.0450000000000000))*(cj3));
IkReal x2151=((py)*(sj0));
IkReal x2152=((IkReal(0.0450000000000000))*(sj3));
IkReal x2153=((IkReal(0.300000000000000))*(sj3));
IkReal x2154=((IkReal(0.0450000000000000))*(x2147));
IkReal x2155=((pz)*(x2147));
IkReal x2156=((pz)*(x2148));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2147)*(x2151)))+(x2156)+(((IkReal(-1.00000000000000))*(x2149)))+(((IkReal(-1.00000000000000))*(x2152))));
evalcond[1]=((((x2147)*(x2153)))+(((IkReal(-0.550000000000000))*(x2148)))+(((IkReal(-1.00000000000000))*(x2148)*(x2152)))+(((IkReal(-1.00000000000000))*(x2148)*(x2149)))+(x2154)+(pz)+(((IkReal(-1.00000000000000))*(x2147)*(x2150))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2155)+(x2153)+(((IkReal(-1.00000000000000))*(x2150)))+(((IkReal(-1.00000000000000))*(x2148)*(x2151))));
evalcond[3]=((((x2147)*(x2152)))+(((IkReal(-1.00000000000000))*(x2148)*(x2150)))+(((x2148)*(x2153)))+(((IkReal(0.550000000000000))*(x2147)))+(((IkReal(0.0450000000000000))*(x2148)))+(((IkReal(-1.00000000000000))*(x2151)))+(((x2147)*(x2149))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2148)*(x2151)))+(((IkReal(-0.0900000000000000))*(x2155)))+(((IkReal(1.10000000000000))*(x2147)*(x2151)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2157=((IkReal(0.300000000000000))*(sj3));
IkReal x2158=((py)*(sj0));
IkReal x2159=((IkReal(0.0450000000000000))*(cj3));
IkReal x2160=((IkReal(0.0450000000000000))*(pz));
IkReal x2161=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst40)*(((((IkReal(-0.550000000000000))*(x2158)))+(x2160)+(((IkReal(-1.00000000000000))*(x2158)*(x2161)))+(((IkReal(-1.00000000000000))*(pz)*(x2159)))+(((pz)*(x2157)))+(((IkReal(-0.0450000000000000))*(sj3)*(x2158))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x2160)))+(((x2158)*(x2159)))+(((IkReal(-1.00000000000000))*(x2157)*(x2158)))+(((IkReal(-1.00000000000000))*(pz)*(x2161)))+(((IkReal(-0.0450000000000000))*(x2158))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst40)*(((((IkReal(-0.550000000000000))*(x2158)))+(x2160)+(((IkReal(-1.00000000000000))*(x2158)*(x2161)))+(((IkReal(-1.00000000000000))*(pz)*(x2159)))+(((pz)*(x2157)))+(((IkReal(-0.0450000000000000))*(sj3)*(x2158)))))), ((gconst40)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x2160)))+(((x2158)*(x2159)))+(((IkReal(-1.00000000000000))*(x2157)*(x2158)))+(((IkReal(-1.00000000000000))*(pz)*(x2161)))+(((IkReal(-0.0450000000000000))*(x2158)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2162=IKsin(j1);
IkReal x2163=IKcos(j1);
IkReal x2164=((IkReal(0.300000000000000))*(cj3));
IkReal x2165=((IkReal(0.0450000000000000))*(cj3));
IkReal x2166=((py)*(sj0));
IkReal x2167=((IkReal(0.0450000000000000))*(sj3));
IkReal x2168=((IkReal(0.300000000000000))*(sj3));
IkReal x2169=((IkReal(0.0450000000000000))*(x2162));
IkReal x2170=((pz)*(x2162));
IkReal x2171=((pz)*(x2163));
evalcond[0]=((IkReal(-0.550000000000000))+(x2171)+(((x2162)*(x2166)))+(((IkReal(-1.00000000000000))*(x2164)))+(((IkReal(-1.00000000000000))*(x2167))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2163)*(x2164)))+(((IkReal(-1.00000000000000))*(x2163)*(x2167)))+(x2169)+(pz)+(((IkReal(-0.550000000000000))*(x2163)))+(((x2162)*(x2168)))+(((IkReal(-1.00000000000000))*(x2162)*(x2165))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2170)+(x2168)+(((IkReal(-1.00000000000000))*(x2165)))+(((IkReal(-1.00000000000000))*(x2163)*(x2166))));
evalcond[3]=((((IkReal(0.550000000000000))*(x2162)))+(((IkReal(-1.00000000000000))*(x2163)*(x2165)))+(((x2162)*(x2167)))+(((x2162)*(x2164)))+(((IkReal(-1.00000000000000))*(x2166)))+(((x2163)*(x2168)))+(((IkReal(0.0450000000000000))*(x2163))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2162)*(x2166)))+(((IkReal(-0.0900000000000000))*(x2170)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2163)*(x2166)))+(((IkReal(1.10000000000000))*(x2171))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2172=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(x2172));
evalcond[3]=x2172;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
IkReal x2173=((py)*(sj0));
IkReal x2174=((IkReal(0.0450000000000000))*(pz));
gconst43=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x2174)))+(x2174)+(((IkReal(-0.0450000000000000))*(sj3)*(x2173)))+(((IkReal(-0.300000000000000))*(cj3)*(x2173)))+(((IkReal(-0.550000000000000))*(x2173)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))));
IkReal x2175=((py)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(pz)+(((IkReal(-12.2222222222222))*(x2175)))+(((IkReal(-6.66666666666667))*(cj3)*(x2175)))+(((IkReal(-1.00000000000000))*(sj3)*(x2175))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2176=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2176))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2176))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2177=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2177)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2177))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2177)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2177)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2177)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2177)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2178=IKcos(j1);
IkReal x2179=IKsin(j1);
IkReal x2180=((pz)*(x2179));
IkReal x2181=((pz)*(x2178));
evalcond[0]=((IkReal(-0.850000000000000))+(x2181));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2178)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x2180));
evalcond[3]=((IkReal(0.850000000000000))*(x2179));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2181)))+(((IkReal(0.0900000000000000))*(x2180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2182=IKcos(j1);
IkReal x2183=IKsin(j1);
IkReal x2184=((pz)*(x2183));
IkReal x2185=((pz)*(x2182));
evalcond[0]=((IkReal(-0.850000000000000))+(x2185));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2182)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x2184));
evalcond[3]=((IkReal(0.850000000000000))*(x2183));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2185)))+(((IkReal(0.0900000000000000))*(x2184))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2186=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2186)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2186))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2187=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2187));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2187))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2188=IKsin(j1);
IkReal x2189=IKcos(j1);
IkReal x2190=((IkReal(0.0450000000000000))*(x2189));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2188)))+(((IkReal(-0.300000000000000))*(sj3)*(x2189)))+(((IkReal(0.300000000000000))*(cj3)*(x2188)))+(((IkReal(-1.00000000000000))*(x2190)))+(((IkReal(0.550000000000000))*(x2188)))+(((cj3)*(x2190))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2191=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2191)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2191))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2192=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2192));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2192))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2193=IKsin(j1);
IkReal x2194=IKcos(j1);
IkReal x2195=((IkReal(0.0450000000000000))*(x2194));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x2194)))+(((IkReal(0.0450000000000000))*(sj3)*(x2193)))+(((IkReal(0.300000000000000))*(cj3)*(x2193)))+(((IkReal(-1.00000000000000))*(x2195)))+(((IkReal(0.550000000000000))*(x2193)))+(((cj3)*(x2195))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2196=(sj3)*(sj3);
IkReal x2197=(cj3)*(cj3);
IkReal x2198=((cj3)*(sj3));
if( IKabs(((gconst43)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x2196)))+(((IkReal(-0.0270000000000000))*(x2198)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x2197)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x2197)))+(((IkReal(0.0135000000000000))*(x2196)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(0.0879750000000000))*(x2198))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst43)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x2196)))+(((IkReal(-0.0270000000000000))*(x2198)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x2197)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst43)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x2197)))+(((IkReal(0.0135000000000000))*(x2196)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(0.0879750000000000))*(x2198)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2199=IKsin(j1);
IkReal x2200=IKcos(j1);
IkReal x2201=((IkReal(0.300000000000000))*(cj3));
IkReal x2202=((IkReal(0.0450000000000000))*(cj3));
IkReal x2203=((py)*(sj0));
IkReal x2204=((IkReal(0.0450000000000000))*(sj3));
IkReal x2205=((IkReal(0.300000000000000))*(sj3));
IkReal x2206=((IkReal(0.0450000000000000))*(x2199));
IkReal x2207=((pz)*(x2199));
IkReal x2208=((pz)*(x2200));
evalcond[0]=((IkReal(-0.550000000000000))+(x2208)+(((IkReal(-1.00000000000000))*(x2204)))+(((IkReal(-1.00000000000000))*(x2201)))+(((x2199)*(x2203))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2206)))+(((IkReal(-0.550000000000000))*(x2200)))+(pz)+(((IkReal(-1.00000000000000))*(x2199)*(x2205)))+(((x2199)*(x2202)))+(((IkReal(-1.00000000000000))*(x2200)*(x2201)))+(((IkReal(-1.00000000000000))*(x2200)*(x2204))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2207)))+(x2205)+(((IkReal(-1.00000000000000))*(x2202)))+(((x2200)*(x2203))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2203)))+(((IkReal(-0.0450000000000000))*(x2200)))+(((x2200)*(x2202)))+(((x2199)*(x2204)))+(((x2199)*(x2201)))+(((IkReal(-1.00000000000000))*(x2200)*(x2205)))+(((IkReal(0.550000000000000))*(x2199))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x2200)*(x2203)))+(((IkReal(0.0900000000000000))*(x2207)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2199)*(x2203)))+(((IkReal(1.10000000000000))*(x2208))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2209=((py)*(sj0));
IkReal x2210=((IkReal(0.300000000000000))*(sj3));
IkReal x2211=((IkReal(0.0450000000000000))*(cj3));
IkReal x2212=((IkReal(0.0450000000000000))*(pz));
IkReal x2213=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(pz)*(x2211)))+(x2212)+(((IkReal(0.550000000000000))*(x2209)))+(((IkReal(0.0450000000000000))*(sj3)*(x2209)))+(((pz)*(x2210)))+(((x2209)*(x2213))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((sj3)*(x2212)))+(((IkReal(-0.0450000000000000))*(x2209)))+(((IkReal(-1.00000000000000))*(x2209)*(x2210)))+(((pz)*(x2213)))+(((x2209)*(x2211)))+(((IkReal(0.550000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst42)*(((((IkReal(-1.00000000000000))*(pz)*(x2211)))+(x2212)+(((IkReal(0.550000000000000))*(x2209)))+(((IkReal(0.0450000000000000))*(sj3)*(x2209)))+(((pz)*(x2210)))+(((x2209)*(x2213)))))), ((gconst42)*(((((sj3)*(x2212)))+(((IkReal(-0.0450000000000000))*(x2209)))+(((IkReal(-1.00000000000000))*(x2209)*(x2210)))+(((pz)*(x2213)))+(((x2209)*(x2211)))+(((IkReal(0.550000000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2214=IKsin(j1);
IkReal x2215=IKcos(j1);
IkReal x2216=((IkReal(0.300000000000000))*(cj3));
IkReal x2217=((IkReal(0.0450000000000000))*(cj3));
IkReal x2218=((py)*(sj0));
IkReal x2219=((IkReal(0.0450000000000000))*(sj3));
IkReal x2220=((IkReal(0.300000000000000))*(sj3));
IkReal x2221=((IkReal(0.0450000000000000))*(x2214));
IkReal x2222=((pz)*(x2214));
IkReal x2223=((pz)*(x2215));
evalcond[0]=((IkReal(-0.550000000000000))+(x2223)+(((IkReal(-1.00000000000000))*(x2216)))+(((IkReal(-1.00000000000000))*(x2219)))+(((x2214)*(x2218))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2215)*(x2216)))+(((IkReal(-1.00000000000000))*(x2215)*(x2219)))+(((IkReal(-0.550000000000000))*(x2215)))+(((x2214)*(x2217)))+(pz)+(((IkReal(-1.00000000000000))*(x2221)))+(((IkReal(-1.00000000000000))*(x2214)*(x2220))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2220)+(((IkReal(-1.00000000000000))*(x2217)))+(((IkReal(-1.00000000000000))*(x2222)))+(((x2215)*(x2218))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2218)))+(((IkReal(-0.0450000000000000))*(x2215)))+(((IkReal(0.550000000000000))*(x2214)))+(((x2214)*(x2219)))+(((x2214)*(x2216)))+(((IkReal(-1.00000000000000))*(x2215)*(x2220)))+(((x2215)*(x2217))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x2215)*(x2218)))+(((IkReal(0.0900000000000000))*(x2222)))+(((IkReal(1.10000000000000))*(x2214)*(x2218)))+(((IkReal(1.10000000000000))*(x2223)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2224=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2224;
evalcond[3]=x2224;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
IkReal x2225=((IkReal(0.0450000000000000))*(pz));
IkReal x2226=((cj0)*(px));
gconst45=IKsign(((((IkReal(-0.550000000000000))*(x2226)))+(((IkReal(-0.300000000000000))*(cj3)*(x2226)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.0450000000000000))*(sj3)*(x2226)))+(((IkReal(-1.00000000000000))*(x2225)))+(((cj3)*(x2225)))));
IkReal x2227=((cj0)*(px));
dummyeval[0]=((((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x2227)))+(((IkReal(-6.66666666666667))*(cj3)*(x2227)))+(((IkReal(-12.2222222222222))*(x2227)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2228=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2228))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2228))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2229=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2229)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2229))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2229)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2229)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2229)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2229)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2230=IKcos(j1);
IkReal x2231=IKsin(j1);
IkReal x2232=((pz)*(x2231));
IkReal x2233=((pz)*(x2230));
evalcond[0]=((IkReal(-0.850000000000000))+(x2233));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2230)))+(pz));
evalcond[2]=x2232;
evalcond[3]=((IkReal(0.850000000000000))*(x2231));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2233)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2232))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2234=IKcos(j1);
IkReal x2235=IKsin(j1);
IkReal x2236=((pz)*(x2235));
IkReal x2237=((pz)*(x2234));
evalcond[0]=((IkReal(-0.850000000000000))+(x2237));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2234)))+(pz));
evalcond[2]=x2236;
evalcond[3]=((IkReal(0.850000000000000))*(x2235));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2237)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2236))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2238=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2238)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2238))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2239=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2239));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2239))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2240=IKsin(j1);
IkReal x2241=IKcos(j1);
IkReal x2242=((IkReal(0.0450000000000000))*(x2241));
evalcond[0]=((x2242)+(((IkReal(0.300000000000000))*(cj3)*(x2240)))+(((IkReal(0.0450000000000000))*(sj3)*(x2240)))+(((IkReal(0.300000000000000))*(sj3)*(x2241)))+(((IkReal(0.550000000000000))*(x2240)))+(((IkReal(-1.00000000000000))*(cj3)*(x2242))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2243=((IkReal(1.00000000000000))*(pp));
IkReal x2244=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2243)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2244;
evalcond[4]=x2244;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2243))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2245=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2245));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2245))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2246=IKsin(j1);
IkReal x2247=IKcos(j1);
IkReal x2248=((IkReal(0.0450000000000000))*(x2247));
evalcond[0]=((x2248)+(((IkReal(0.300000000000000))*(cj3)*(x2246)))+(((IkReal(0.0450000000000000))*(sj3)*(x2246)))+(((IkReal(0.300000000000000))*(sj3)*(x2247)))+(((IkReal(0.550000000000000))*(x2246)))+(((IkReal(-1.00000000000000))*(cj3)*(x2248))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2249=(cj3)*(cj3);
IkReal x2250=(sj3)*(sj3);
IkReal x2251=((cj3)*(sj3));
if( IKabs(((gconst45)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x2249)))+(((IkReal(-0.0270000000000000))*(x2251)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x2250)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(-0.0879750000000000))*(x2251)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x2250)))+(((IkReal(0.0135000000000000))*(x2249))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst45)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x2249)))+(((IkReal(-0.0270000000000000))*(x2251)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x2250)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst45)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(-0.0879750000000000))*(x2251)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x2250)))+(((IkReal(0.0135000000000000))*(x2249)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2252=IKsin(j1);
IkReal x2253=IKcos(j1);
IkReal x2254=((IkReal(0.300000000000000))*(cj3));
IkReal x2255=((IkReal(0.0450000000000000))*(cj3));
IkReal x2256=((IkReal(0.0450000000000000))*(sj3));
IkReal x2257=((cj0)*(px));
IkReal x2258=((IkReal(0.300000000000000))*(sj3));
IkReal x2259=((IkReal(0.0450000000000000))*(x2252));
IkReal x2260=((IkReal(1.00000000000000))*(x2257));
IkReal x2261=((pz)*(x2252));
IkReal x2262=((pz)*(x2253));
evalcond[0]=((IkReal(-0.550000000000000))+(x2262)+(((x2252)*(x2257)))+(((IkReal(-1.00000000000000))*(x2254)))+(((IkReal(-1.00000000000000))*(x2256))));
evalcond[1]=((x2259)+(((IkReal(-1.00000000000000))*(x2253)*(x2256)))+(((IkReal(-1.00000000000000))*(x2253)*(x2254)))+(((x2252)*(x2258)))+(((IkReal(-1.00000000000000))*(x2252)*(x2255)))+(pz)+(((IkReal(-0.550000000000000))*(x2253))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2261)+(x2258)+(((IkReal(-1.00000000000000))*(x2255)))+(((IkReal(-1.00000000000000))*(x2253)*(x2260))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x2253)))+(((x2253)*(x2258)))+(((IkReal(-1.00000000000000))*(x2253)*(x2255)))+(((x2252)*(x2256)))+(((x2252)*(x2254)))+(((IkReal(0.550000000000000))*(x2252)))+(((IkReal(-1.00000000000000))*(x2260))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2252)*(x2257)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2253)*(x2257)))+(((IkReal(-0.0900000000000000))*(x2261)))+(((IkReal(1.10000000000000))*(x2262))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2263=((IkReal(0.300000000000000))*(sj3));
IkReal x2264=((cj0)*(px));
IkReal x2265=((IkReal(0.0450000000000000))*(cj3));
IkReal x2266=((IkReal(0.0450000000000000))*(pz));
IkReal x2267=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst44)*(((x2266)+(((IkReal(-1.00000000000000))*(pz)*(x2265)))+(((IkReal(-0.550000000000000))*(x2264)))+(((pz)*(x2263)))+(((IkReal(-0.0450000000000000))*(sj3)*(x2264)))+(((IkReal(-1.00000000000000))*(x2264)*(x2267))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x2267)))+(((IkReal(-1.00000000000000))*(x2263)*(x2264)))+(((IkReal(-1.00000000000000))*(sj3)*(x2266)))+(((IkReal(-0.0450000000000000))*(x2264)))+(((x2264)*(x2265))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst44)*(((x2266)+(((IkReal(-1.00000000000000))*(pz)*(x2265)))+(((IkReal(-0.550000000000000))*(x2264)))+(((pz)*(x2263)))+(((IkReal(-0.0450000000000000))*(sj3)*(x2264)))+(((IkReal(-1.00000000000000))*(x2264)*(x2267)))))), ((gconst44)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x2267)))+(((IkReal(-1.00000000000000))*(x2263)*(x2264)))+(((IkReal(-1.00000000000000))*(sj3)*(x2266)))+(((IkReal(-0.0450000000000000))*(x2264)))+(((x2264)*(x2265)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2268=IKsin(j1);
IkReal x2269=IKcos(j1);
IkReal x2270=((IkReal(0.300000000000000))*(cj3));
IkReal x2271=((IkReal(0.0450000000000000))*(cj3));
IkReal x2272=((IkReal(0.0450000000000000))*(sj3));
IkReal x2273=((cj0)*(px));
IkReal x2274=((IkReal(0.300000000000000))*(sj3));
IkReal x2275=((IkReal(0.0450000000000000))*(x2268));
IkReal x2276=((IkReal(1.00000000000000))*(x2273));
IkReal x2277=((pz)*(x2268));
IkReal x2278=((pz)*(x2269));
evalcond[0]=((IkReal(-0.550000000000000))+(x2278)+(((x2268)*(x2273)))+(((IkReal(-1.00000000000000))*(x2272)))+(((IkReal(-1.00000000000000))*(x2270))));
evalcond[1]=((x2275)+(((IkReal(-0.550000000000000))*(x2269)))+(((x2268)*(x2274)))+(pz)+(((IkReal(-1.00000000000000))*(x2269)*(x2272)))+(((IkReal(-1.00000000000000))*(x2269)*(x2270)))+(((IkReal(-1.00000000000000))*(x2268)*(x2271))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2274)+(x2277)+(((IkReal(-1.00000000000000))*(x2269)*(x2276)))+(((IkReal(-1.00000000000000))*(x2271))));
evalcond[3]=((((IkReal(0.550000000000000))*(x2268)))+(((x2269)*(x2274)))+(((x2268)*(x2270)))+(((x2268)*(x2272)))+(((IkReal(0.0450000000000000))*(x2269)))+(((IkReal(-1.00000000000000))*(x2269)*(x2271)))+(((IkReal(-1.00000000000000))*(x2276))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2278)))+(((IkReal(0.0900000000000000))*(x2269)*(x2273)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2268)*(x2273)))+(((IkReal(-0.0900000000000000))*(x2277))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2279=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2279;
evalcond[3]=((IkReal(-1.00000000000000))*(x2279));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign((((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=(((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x2280=((IkReal(0.0450000000000000))*(pz));
IkReal x2281=((cj0)*(px));
gconst47=IKsign(((((IkReal(-0.0450000000000000))*(sj3)*(x2281)))+(x2280)+(((IkReal(-1.00000000000000))*(cj3)*(x2280)))+(((IkReal(-0.300000000000000))*(cj3)*(x2281)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x2281)))));
IkReal x2282=((cj0)*(px));
dummyeval[0]=((((IkReal(-6.66666666666667))*(cj3)*(x2282)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x2282)))+(pz)+(((IkReal(-1.00000000000000))*(sj3)*(x2282))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2283=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2283))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2283))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2284=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2284)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2284))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2284)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2284)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2284)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2284)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2285=IKcos(j1);
IkReal x2286=IKsin(j1);
IkReal x2287=((pz)*(x2286));
IkReal x2288=((pz)*(x2285));
evalcond[0]=((IkReal(-0.850000000000000))+(x2288));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2285)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x2287));
evalcond[3]=((IkReal(0.850000000000000))*(x2286));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2288)))+(((IkReal(0.0900000000000000))*(x2287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2289=IKcos(j1);
IkReal x2290=IKsin(j1);
IkReal x2291=((pz)*(x2290));
IkReal x2292=((pz)*(x2289));
evalcond[0]=((IkReal(-0.850000000000000))+(x2292));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2289)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x2291));
evalcond[3]=((IkReal(0.850000000000000))*(x2290));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2292)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2291))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2293=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2293)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2293))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2294=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2294));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2294))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2295=IKsin(j1);
IkReal x2296=IKcos(j1);
IkReal x2297=((IkReal(0.0450000000000000))*(x2296));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x2296)))+(((IkReal(0.0450000000000000))*(sj3)*(x2295)))+(((IkReal(0.300000000000000))*(cj3)*(x2295)))+(((IkReal(0.550000000000000))*(x2295)))+(((IkReal(-1.00000000000000))*(x2297)))+(((cj3)*(x2297))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2298=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2298)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2298))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2299=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2299));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2299))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2300=IKsin(j1);
IkReal x2301=IKcos(j1);
IkReal x2302=((IkReal(0.0450000000000000))*(x2301));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x2301)))+(((IkReal(-1.00000000000000))*(x2302)))+(((IkReal(0.300000000000000))*(cj3)*(x2300)))+(((IkReal(0.550000000000000))*(x2300)))+(((cj3)*(x2302)))+(((IkReal(0.0450000000000000))*(sj3)*(x2300))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2303=(sj3)*(sj3);
IkReal x2304=(cj3)*(cj3);
IkReal x2305=((cj3)*(sj3));
if( IKabs(((gconst47)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x2303)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x2305)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x2304))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x2305)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0135000000000000))*(x2303)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x2304))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst47)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x2303)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x2305)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x2304)))))), ((gconst47)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x2305)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0135000000000000))*(x2303)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x2304)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2306=IKsin(j1);
IkReal x2307=IKcos(j1);
IkReal x2308=((IkReal(0.300000000000000))*(cj3));
IkReal x2309=((IkReal(0.0450000000000000))*(cj3));
IkReal x2310=((cj0)*(px));
IkReal x2311=((IkReal(0.0450000000000000))*(sj3));
IkReal x2312=((IkReal(0.300000000000000))*(sj3));
IkReal x2313=((IkReal(0.0450000000000000))*(x2306));
IkReal x2314=((pz)*(x2306));
IkReal x2315=((pz)*(x2307));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2306)*(x2310)))+(x2315)+(((IkReal(-1.00000000000000))*(x2308)))+(((IkReal(-1.00000000000000))*(x2311))));
evalcond[1]=((((x2306)*(x2309)))+(((IkReal(-0.550000000000000))*(x2307)))+(pz)+(((IkReal(-1.00000000000000))*(x2307)*(x2311)))+(((IkReal(-1.00000000000000))*(x2306)*(x2312)))+(((IkReal(-1.00000000000000))*(x2313)))+(((IkReal(-1.00000000000000))*(x2307)*(x2308))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2314)))+(x2312)+(((IkReal(-1.00000000000000))*(x2309)))+(((x2307)*(x2310))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2310)))+(((x2306)*(x2311)))+(((IkReal(-0.0450000000000000))*(x2307)))+(((x2306)*(x2308)))+(((IkReal(-1.00000000000000))*(x2307)*(x2312)))+(((x2307)*(x2309)))+(((IkReal(0.550000000000000))*(x2306))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2314)))+(((IkReal(1.10000000000000))*(x2315)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2307)*(x2310)))+(((IkReal(1.10000000000000))*(x2306)*(x2310))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2316=((pz)*(sj3));
IkReal x2317=((cj0)*(px));
IkReal x2318=((IkReal(0.0450000000000000))*(pz));
IkReal x2319=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((gconst46)*(((((IkReal(0.0450000000000000))*(sj3)*(x2317)))+(((x2317)*(x2319)))+(((IkReal(0.300000000000000))*(x2316)))+(x2318)+(((IkReal(-1.00000000000000))*(cj3)*(x2318)))+(((IkReal(0.550000000000000))*(x2317))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((IkReal(0.0450000000000000))*(x2316)))+(((IkReal(0.0450000000000000))*(cj3)*(x2317)))+(((IkReal(-0.0450000000000000))*(x2317)))+(((IkReal(-0.300000000000000))*(sj3)*(x2317)))+(((pz)*(x2319)))+(((IkReal(0.550000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst46)*(((((IkReal(0.0450000000000000))*(sj3)*(x2317)))+(((x2317)*(x2319)))+(((IkReal(0.300000000000000))*(x2316)))+(x2318)+(((IkReal(-1.00000000000000))*(cj3)*(x2318)))+(((IkReal(0.550000000000000))*(x2317)))))), ((gconst46)*(((((IkReal(0.0450000000000000))*(x2316)))+(((IkReal(0.0450000000000000))*(cj3)*(x2317)))+(((IkReal(-0.0450000000000000))*(x2317)))+(((IkReal(-0.300000000000000))*(sj3)*(x2317)))+(((pz)*(x2319)))+(((IkReal(0.550000000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2320=IKsin(j1);
IkReal x2321=IKcos(j1);
IkReal x2322=((IkReal(0.300000000000000))*(cj3));
IkReal x2323=((IkReal(0.0450000000000000))*(cj3));
IkReal x2324=((cj0)*(px));
IkReal x2325=((IkReal(0.0450000000000000))*(sj3));
IkReal x2326=((IkReal(0.300000000000000))*(sj3));
IkReal x2327=((IkReal(0.0450000000000000))*(x2320));
IkReal x2328=((pz)*(x2320));
IkReal x2329=((pz)*(x2321));
evalcond[0]=((IkReal(-0.550000000000000))+(x2329)+(((x2320)*(x2324)))+(((IkReal(-1.00000000000000))*(x2325)))+(((IkReal(-1.00000000000000))*(x2322))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2321)*(x2325)))+(((IkReal(-1.00000000000000))*(x2321)*(x2322)))+(((IkReal(-1.00000000000000))*(x2320)*(x2326)))+(((IkReal(-0.550000000000000))*(x2321)))+(pz)+(((x2320)*(x2323)))+(((IkReal(-1.00000000000000))*(x2327))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2326)+(((x2321)*(x2324)))+(((IkReal(-1.00000000000000))*(x2328)))+(((IkReal(-1.00000000000000))*(x2323))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2321)*(x2326)))+(((x2321)*(x2323)))+(((x2320)*(x2322)))+(((x2320)*(x2325)))+(((IkReal(0.550000000000000))*(x2320)))+(((IkReal(-0.0450000000000000))*(x2321)))+(((IkReal(-1.00000000000000))*(x2324))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2328)))+(((IkReal(1.10000000000000))*(x2329)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2321)*(x2324)))+(((IkReal(1.10000000000000))*(x2320)*(x2324))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2330=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2330;
evalcond[3]=x2330;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2331=((cj0)*(px));
IkReal x2332=((py)*(sj0));
IkReal x2333=((IkReal(6.66666666666667))*(cj3));
IkReal x2334=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x2331)+(x2332));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x2332)*(x2334)))+(((IkReal(-1.00000000000000))*(x2332)*(x2333)))+(((IkReal(-1.00000000000000))*(x2331)*(x2334)))+(((IkReal(-1.00000000000000))*(x2331)*(x2333)))+(((IkReal(-12.2222222222222))*(x2332)))+(((IkReal(-12.2222222222222))*(x2331))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2335=((py)*(sj0));
IkReal x2336=((cj0)*(px));
IkReal x2337=((IkReal(6.66666666666667))*(sj3));
IkReal x2338=((IkReal(1.00000000000000))*(x2336));
IkReal x2339=((IkReal(1.00000000000000))*(x2335));
IkReal x2340=((x2338)+(x2339));
dummyeval[0]=((((cj3)*(x2336)))+(((cj3)*(x2335)))+(((IkReal(-1.00000000000000))*(x2335)*(x2337)))+(((IkReal(-1.00000000000000))*(x2340)))+(((IkReal(-1.00000000000000))*(x2336)*(x2337))));
dummyeval[1]=((IkReal(-1.00000000000000))*(x2340));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2341=x2330;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2341;
evalcond[3]=x2341;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2342=((cj0)*(px));
IkReal x2343=((py)*(sj0));
dummyeval[0]=((x2343)+(x2342));
dummyeval[1]=(((x2342)*(x2342))+((x2343)*(x2343))+(((IkReal(2.00000000000000))*(x2342)*(x2343))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2344=((IkReal(1.00000000000000))*(pp));
IkReal x2345=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2344))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x2345;
evalcond[4]=x2345;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2344))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2346=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2346))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2346))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2347=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2347))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2347))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2348=((IkReal(1.00000000000000))*(pp));
IkReal x2349=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2348))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x2349;
evalcond[4]=x2349;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2348))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2350=((cj0)*(px));
IkReal x2351=((py)*(sj0));
IkReal x2352=((IkReal(20.0000000000000))*(pp));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2350)))+(((IkReal(20.0000000000000))*(x2351))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2350)))+(((IkReal(20.0000000000000))*(x2351)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.80000000000000))*((x2351)*(x2351))))+(((IkReal(3.60000000000000))*(x2350)*(x2351)))+(((IkReal(1.80000000000000))*((x2350)*(x2350)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x2351)*(x2351))))+(((IkReal(3.60000000000000))*(x2350)*(x2351)))+(((IkReal(1.80000000000000))*((x2350)*(x2350))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2351)))+(((IkReal(-14.4500000000000))*(x2350)))+(((x2350)*(x2352)))+(((x2351)*(x2352))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2350)))+(((IkReal(20.0000000000000))*(x2351))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2350)))+(((IkReal(20.0000000000000))*(x2351)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(1.80000000000000))*((x2351)*(x2351))))+(((IkReal(3.60000000000000))*(x2350)*(x2351)))+(((IkReal(1.80000000000000))*((x2350)*(x2350)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x2351)*(x2351))))+(((IkReal(3.60000000000000))*(x2350)*(x2351)))+(((IkReal(1.80000000000000))*((x2350)*(x2350))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2351)))+(((IkReal(-14.4500000000000))*(x2350)))+(((x2350)*(x2352)))+(((x2351)*(x2352)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2350)))+(((IkReal(20.0000000000000))*(x2351))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2350)))+(((IkReal(20.0000000000000))*(x2351)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(1.80000000000000))*((x2351)*(x2351))))+(((IkReal(3.60000000000000))*(x2350)*(x2351)))+(((IkReal(1.80000000000000))*((x2350)*(x2350)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x2351)*(x2351))))+(((IkReal(3.60000000000000))*(x2350)*(x2351)))+(((IkReal(1.80000000000000))*((x2350)*(x2350))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2351)))+(((IkReal(-14.4500000000000))*(x2350)))+(((x2350)*(x2352)))+(((x2351)*(x2352)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2353=IKsin(j1);
IkReal x2354=IKcos(j1);
IkReal x2355=((py)*(sj0));
IkReal x2356=((cj0)*(px));
IkReal x2357=((IkReal(0.0900000000000000))*(x2354));
IkReal x2358=((IkReal(1.00000000000000))*(x2354));
IkReal x2359=((IkReal(1.10000000000000))*(x2353));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2353)*(x2355)))+(((x2353)*(x2356))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2354));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2356)*(x2358)))+(((IkReal(-1.00000000000000))*(x2355)*(x2358))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2353)))+(((IkReal(-1.00000000000000))*(x2356)))+(((IkReal(-1.00000000000000))*(x2355))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2356)*(x2357)))+(((x2356)*(x2359)))+(((x2355)*(x2359)))+(((x2355)*(x2357)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2360=((cj0)*(px));
IkReal x2361=((py)*(sj0));
if( IKabs(((((IkReal(1.17647058823529))*(x2360)))+(((IkReal(1.17647058823529))*(x2361))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x2361)))+(((IkReal(1.53000000000000))*(x2360))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2361)))+(((IkReal(1.53000000000000))*(x2360)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2361)*(x2361))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2360)*(x2360))))+(((IkReal(-44.0000000000000))*(x2360)*(x2361))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x2360)))+(((IkReal(1.17647058823529))*(x2361)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x2361)))+(((IkReal(1.53000000000000))*(x2360))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2361)))+(((IkReal(1.53000000000000))*(x2360)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2361)*(x2361))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2360)*(x2360))))+(((IkReal(-44.0000000000000))*(x2360)*(x2361)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x2360)))+(((IkReal(1.17647058823529))*(x2361)))), ((((IKabs(((((IkReal(1.53000000000000))*(x2361)))+(((IkReal(1.53000000000000))*(x2360))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2361)))+(((IkReal(1.53000000000000))*(x2360)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2361)*(x2361))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2360)*(x2360))))+(((IkReal(-44.0000000000000))*(x2360)*(x2361)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2362=IKsin(j1);
IkReal x2363=IKcos(j1);
IkReal x2364=((py)*(sj0));
IkReal x2365=((cj0)*(px));
IkReal x2366=((IkReal(0.0900000000000000))*(x2363));
IkReal x2367=((IkReal(1.00000000000000))*(x2363));
IkReal x2368=((IkReal(1.10000000000000))*(x2362));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2362)*(x2364)))+(((x2362)*(x2365))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2363));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2364)*(x2367)))+(((IkReal(-1.00000000000000))*(x2365)*(x2367))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2365)))+(((IkReal(-1.00000000000000))*(x2364)))+(((IkReal(0.850000000000000))*(x2362))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2364)*(x2368)))+(((x2364)*(x2366)))+(((x2365)*(x2368)))+(((x2365)*(x2366)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2369=((IkReal(-1.00000000000000))*(cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2369;
evalcond[3]=x2369;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2370=((IkReal(1.00000000000000))*(pp));
IkReal x2371=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2370))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x2371;
evalcond[4]=x2371;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2370))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2372=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2372))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2372))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2373=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2373))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2373))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2374=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x2375=((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30);
IkReal x2376=((x2374)*(x2375));
if( IKabs(((IkReal(0.850000000000000))*(x2376))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x2376)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x2376)))+IKsqr(((IkReal(0.0555555555555556))*(x2376)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x2376)), ((IkReal(0.0555555555555556))*(x2376)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2377=IKcos(j1);
IkReal x2378=IKsin(j1);
IkReal x2379=((py)*(sj0)*(x2378));
IkReal x2380=((py)*(sj0)*(x2377));
evalcond[0]=((IkReal(-0.850000000000000))+(x2379));
evalcond[1]=((IkReal(-0.850000000000000))*(x2377));
evalcond[2]=((IkReal(-1.00000000000000))*(x2380));
evalcond[3]=((((IkReal(0.850000000000000))*(x2378)))+(((IkReal(-1.00000000000000))*(py)*(sj0))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2379)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2380))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(py)*(sj0))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((py)*(py))*((sj0)*(sj0)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(sj0)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((py)*(py))*((sj0)*(sj0))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(sj0)), ((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((py)*(py))*((sj0)*(sj0))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2381=IKcos(j1);
IkReal x2382=IKsin(j1);
IkReal x2383=((py)*(sj0)*(x2382));
IkReal x2384=((py)*(sj0)*(x2381));
evalcond[0]=((IkReal(-0.850000000000000))+(x2383));
evalcond[1]=((IkReal(-0.850000000000000))*(x2381));
evalcond[2]=((IkReal(-1.00000000000000))*(x2384));
evalcond[3]=((((IkReal(0.850000000000000))*(x2382)))+(((IkReal(-1.00000000000000))*(py)*(sj0))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2384)))+(((IkReal(1.10000000000000))*(x2383))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2385=((IkReal(1.00000000000000))*(pp));
IkReal x2386=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2385)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2386;
evalcond[4]=x2386;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2385))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2387=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2387));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2387))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2388=IKsin(j1);
IkReal x2389=IKcos(j1);
IkReal x2390=((IkReal(0.0450000000000000))*(x2389));
evalcond[0]=((x2390)+(((IkReal(0.300000000000000))*(sj3)*(x2389)))+(((IkReal(0.550000000000000))*(x2388)))+(((IkReal(0.0450000000000000))*(sj3)*(x2388)))+(((IkReal(0.300000000000000))*(cj3)*(x2388)))+(((IkReal(-1.00000000000000))*(cj3)*(x2390))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2391=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2391)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2391))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2392=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2392));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2392))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2393=IKsin(j1);
IkReal x2394=IKcos(j1);
IkReal x2395=((IkReal(0.0450000000000000))*(x2394));
evalcond[0]=((((IkReal(0.550000000000000))*(x2393)))+(x2395)+(((IkReal(0.300000000000000))*(sj3)*(x2394)))+(((IkReal(0.300000000000000))*(cj3)*(x2393)))+(((IkReal(0.0450000000000000))*(sj3)*(x2393)))+(((IkReal(-1.00000000000000))*(cj3)*(x2395))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2396=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2396;
evalcond[3]=x2396;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2397=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2397))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2397))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2398=((IkReal(1.00000000000000))*(pp));
IkReal x2399=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2398))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=x2399;
evalcond[4]=x2399;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2398))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2400=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2400))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2400))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2401=((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30);
IkReal x2402=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x2403=((x2401)*(x2402));
if( IKabs(((IkReal(0.850000000000000))*(x2403))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x2403)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x2403)))+IKsqr(((IkReal(0.0555555555555556))*(x2403)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x2403)), ((IkReal(0.0555555555555556))*(x2403)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2404=IKcos(j1);
IkReal x2405=IKsin(j1);
IkReal x2406=((cj0)*(px));
IkReal x2407=((x2404)*(x2406));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2405)*(x2406))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2404));
evalcond[2]=((IkReal(-1.00000000000000))*(x2407));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2406)))+(((IkReal(0.850000000000000))*(x2405))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2405)*(x2406)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2407))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(cj0)*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((cj0)*(cj0))*((px)*(px)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(cj0)*(px)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((cj0)*(cj0))*((px)*(px))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(cj0)*(px)), ((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((cj0)*(cj0))*((px)*(px))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2408=IKcos(j1);
IkReal x2409=IKsin(j1);
IkReal x2410=((cj0)*(px));
IkReal x2411=((x2408)*(x2410));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2409)*(x2410))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2408));
evalcond[2]=((IkReal(-1.00000000000000))*(x2411));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2410)))+(((IkReal(0.850000000000000))*(x2409))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2409)*(x2410)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2411))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2412=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2412)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2412))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2413=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2413));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2413))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2414=IKsin(j1);
IkReal x2415=IKcos(j1);
IkReal x2416=((IkReal(0.0450000000000000))*(x2415));
evalcond[0]=((x2416)+(((IkReal(0.0450000000000000))*(sj3)*(x2414)))+(((IkReal(0.550000000000000))*(x2414)))+(((IkReal(0.300000000000000))*(sj3)*(x2415)))+(((IkReal(0.300000000000000))*(cj3)*(x2414)))+(((IkReal(-1.00000000000000))*(cj3)*(x2416))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2417=((IkReal(1.00000000000000))*(pp));
IkReal x2418=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2417)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2418;
evalcond[4]=x2418;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2417))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2419=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2419));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2419))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2420=IKsin(j1);
IkReal x2421=IKcos(j1);
IkReal x2422=((IkReal(0.0450000000000000))*(x2421));
evalcond[0]=((x2422)+(((IkReal(0.300000000000000))*(sj3)*(x2421)))+(((IkReal(0.550000000000000))*(x2420)))+(((IkReal(-1.00000000000000))*(cj3)*(x2422)))+(((IkReal(0.300000000000000))*(cj3)*(x2420)))+(((IkReal(0.0450000000000000))*(sj3)*(x2420))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2423=((IkReal(0.300000000000000))*(sj3));
IkReal x2424=((py)*(sj0));
IkReal x2425=((IkReal(0.0450000000000000))*(cj3));
IkReal x2426=((cj0)*(px));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2423)*(x2424)))+(((IkReal(-1.00000000000000))*(x2423)*(x2426)))+(((IkReal(-0.0450000000000000))*(x2426)))+(((IkReal(-0.0450000000000000))*(x2424)))+(((x2424)*(x2425)))+(((x2425)*(x2426))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2423)*(x2424)))+(((IkReal(-1.00000000000000))*(x2423)*(x2426)))+(((IkReal(-0.0450000000000000))*(x2426)))+(((IkReal(-0.0450000000000000))*(x2424)))+(((x2424)*(x2425)))+(((x2425)*(x2426)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2426)))+(((IkReal(-1.00000000000000))*(x2424))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2426)))+(((IkReal(-1.00000000000000))*(x2424)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2425)+(((IkReal(-1.00000000000000))*(x2423))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2423)*(x2424)))+(((IkReal(-1.00000000000000))*(x2423)*(x2426)))+(((IkReal(-0.0450000000000000))*(x2426)))+(((IkReal(-0.0450000000000000))*(x2424)))+(((x2424)*(x2425)))+(((x2425)*(x2426))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2423)*(x2424)))+(((IkReal(-1.00000000000000))*(x2423)*(x2426)))+(((IkReal(-0.0450000000000000))*(x2426)))+(((IkReal(-0.0450000000000000))*(x2424)))+(((x2424)*(x2425)))+(((x2425)*(x2426)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2426)))+(((IkReal(-1.00000000000000))*(x2424))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2426)))+(((IkReal(-1.00000000000000))*(x2424)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2425)+(((IkReal(-1.00000000000000))*(x2423)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x2423)*(x2424)))+(((IkReal(-1.00000000000000))*(x2423)*(x2426)))+(((IkReal(-0.0450000000000000))*(x2426)))+(((IkReal(-0.0450000000000000))*(x2424)))+(((x2424)*(x2425)))+(((x2425)*(x2426))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2423)*(x2424)))+(((IkReal(-1.00000000000000))*(x2423)*(x2426)))+(((IkReal(-0.0450000000000000))*(x2426)))+(((IkReal(-0.0450000000000000))*(x2424)))+(((x2424)*(x2425)))+(((x2425)*(x2426)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x2426)))+(((IkReal(-1.00000000000000))*(x2424))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2426)))+(((IkReal(-1.00000000000000))*(x2424)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2425)+(((IkReal(-1.00000000000000))*(x2423)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2427=IKsin(j1);
IkReal x2428=IKcos(j1);
IkReal x2429=((IkReal(0.300000000000000))*(cj3));
IkReal x2430=((IkReal(0.0450000000000000))*(cj3));
IkReal x2431=((cj0)*(px));
IkReal x2432=((py)*(sj0));
IkReal x2433=((IkReal(0.0450000000000000))*(sj3));
IkReal x2434=((IkReal(0.300000000000000))*(sj3));
IkReal x2435=((IkReal(0.0450000000000000))*(x2427));
IkReal x2436=((IkReal(1.00000000000000))*(x2428));
IkReal x2437=((IkReal(0.0900000000000000))*(x2428));
IkReal x2438=((IkReal(1.10000000000000))*(x2427));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2433)))+(((IkReal(-1.00000000000000))*(x2429)))+(((x2427)*(x2431)))+(((x2427)*(x2432))));
evalcond[1]=((x2435)+(((IkReal(-1.00000000000000))*(x2428)*(x2429)))+(((IkReal(-0.550000000000000))*(x2428)))+(((IkReal(-1.00000000000000))*(x2427)*(x2430)))+(((IkReal(-1.00000000000000))*(x2428)*(x2433)))+(((x2427)*(x2434))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2434)+(((IkReal(-1.00000000000000))*(x2431)*(x2436)))+(((IkReal(-1.00000000000000))*(x2430)))+(((IkReal(-1.00000000000000))*(x2432)*(x2436))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2432)))+(((IkReal(-1.00000000000000))*(x2431)))+(((x2428)*(x2434)))+(((IkReal(0.0450000000000000))*(x2428)))+(((x2427)*(x2429)))+(((IkReal(0.550000000000000))*(x2427)))+(((IkReal(-1.00000000000000))*(x2428)*(x2430)))+(((x2427)*(x2433))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2432)*(x2438)))+(((x2432)*(x2437)))+(((x2431)*(x2437)))+(((x2431)*(x2438)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2439=((cj0)*(px));
IkReal x2440=((IkReal(0.0450000000000000))*(sj3));
IkReal x2441=((py)*(sj0));
IkReal x2442=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x2439)+(x2441))) != 0)?((IkReal)1/(((x2439)+(x2441)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2442)+(x2440))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-0.550000000000000))*(x2441)))+(((IkReal(-1.00000000000000))*(x2441)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2440)))+(((IkReal(-1.00000000000000))*(x2440)*(x2441)))+(((IkReal(-0.550000000000000))*(x2439))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x2441)))+(((IkReal(-1.00000000000000))*(x2441)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2440)))+(((IkReal(-1.00000000000000))*(x2440)*(x2441)))+(((IkReal(-0.550000000000000))*(x2439)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x2439)+(x2441))) != 0)?((IkReal)1/(((x2439)+(x2441)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2442)+(x2440)))))+IKsqr(((((IKabs(((((IkReal(-0.550000000000000))*(x2441)))+(((IkReal(-1.00000000000000))*(x2441)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2440)))+(((IkReal(-1.00000000000000))*(x2440)*(x2441)))+(((IkReal(-0.550000000000000))*(x2439))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x2441)))+(((IkReal(-1.00000000000000))*(x2441)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2440)))+(((IkReal(-1.00000000000000))*(x2440)*(x2441)))+(((IkReal(-0.550000000000000))*(x2439)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x2439)+(x2441))) != 0)?((IkReal)1/(((x2439)+(x2441)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2442)+(x2440)))), ((((IKabs(((((IkReal(-0.550000000000000))*(x2441)))+(((IkReal(-1.00000000000000))*(x2441)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2440)))+(((IkReal(-1.00000000000000))*(x2440)*(x2441)))+(((IkReal(-0.550000000000000))*(x2439))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x2441)))+(((IkReal(-1.00000000000000))*(x2441)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2442)))+(((IkReal(-1.00000000000000))*(x2439)*(x2440)))+(((IkReal(-1.00000000000000))*(x2440)*(x2441)))+(((IkReal(-0.550000000000000))*(x2439)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2443=IKsin(j1);
IkReal x2444=IKcos(j1);
IkReal x2445=((IkReal(0.300000000000000))*(cj3));
IkReal x2446=((IkReal(0.0450000000000000))*(cj3));
IkReal x2447=((cj0)*(px));
IkReal x2448=((py)*(sj0));
IkReal x2449=((IkReal(0.0450000000000000))*(sj3));
IkReal x2450=((IkReal(0.300000000000000))*(sj3));
IkReal x2451=((IkReal(0.0450000000000000))*(x2443));
IkReal x2452=((IkReal(1.00000000000000))*(x2444));
IkReal x2453=((IkReal(0.0900000000000000))*(x2444));
IkReal x2454=((IkReal(1.10000000000000))*(x2443));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2443)*(x2448)))+(((x2443)*(x2447)))+(((IkReal(-1.00000000000000))*(x2445)))+(((IkReal(-1.00000000000000))*(x2449))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2443)*(x2446)))+(x2451)+(((IkReal(-0.550000000000000))*(x2444)))+(((x2443)*(x2450)))+(((IkReal(-1.00000000000000))*(x2444)*(x2449)))+(((IkReal(-1.00000000000000))*(x2444)*(x2445))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2450)+(((IkReal(-1.00000000000000))*(x2448)*(x2452)))+(((IkReal(-1.00000000000000))*(x2447)*(x2452)))+(((IkReal(-1.00000000000000))*(x2446))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x2444)))+(((x2443)*(x2449)))+(((x2443)*(x2445)))+(((IkReal(-1.00000000000000))*(x2444)*(x2446)))+(((IkReal(-1.00000000000000))*(x2448)))+(((IkReal(-1.00000000000000))*(x2447)))+(((IkReal(0.550000000000000))*(x2443)))+(((x2444)*(x2450))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2447)*(x2454)))+(((x2447)*(x2453)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2448)*(x2454)))+(((x2448)*(x2453))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst48)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst48)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))), ((gconst48)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2455=IKsin(j1);
IkReal x2456=IKcos(j1);
IkReal x2457=((IkReal(0.300000000000000))*(cj3));
IkReal x2458=((IkReal(0.0450000000000000))*(cj3));
IkReal x2459=((cj0)*(px));
IkReal x2460=((py)*(sj0));
IkReal x2461=((IkReal(0.0450000000000000))*(sj3));
IkReal x2462=((IkReal(0.300000000000000))*(sj3));
IkReal x2463=((IkReal(0.0450000000000000))*(x2455));
IkReal x2464=((IkReal(1.00000000000000))*(x2456));
IkReal x2465=((IkReal(0.0900000000000000))*(x2456));
IkReal x2466=((IkReal(1.10000000000000))*(x2455));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2461)))+(((x2455)*(x2459)))+(((IkReal(-1.00000000000000))*(x2457)))+(((x2455)*(x2460))));
evalcond[1]=((x2463)+(((IkReal(-0.550000000000000))*(x2456)))+(((IkReal(-1.00000000000000))*(x2456)*(x2461)))+(((IkReal(-1.00000000000000))*(x2456)*(x2457)))+(((IkReal(-1.00000000000000))*(x2455)*(x2458)))+(((x2455)*(x2462))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2462)+(((IkReal(-1.00000000000000))*(x2460)*(x2464)))+(((IkReal(-1.00000000000000))*(x2458)))+(((IkReal(-1.00000000000000))*(x2459)*(x2464))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x2456)))+(((IkReal(-1.00000000000000))*(x2460)))+(((IkReal(-1.00000000000000))*(x2456)*(x2458)))+(((IkReal(0.550000000000000))*(x2455)))+(((IkReal(-1.00000000000000))*(x2459)))+(((x2456)*(x2462)))+(((x2455)*(x2457)))+(((x2455)*(x2461))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2459)*(x2466)))+(((x2459)*(x2465)))+(((x2460)*(x2466)))+(((x2460)*(x2465)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2467=((px)*(sj0));
IkReal x2468=((cj0)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((x2467)+(((IkReal(-1.00000000000000))*(x2468))));
evalcond[3]=((x2468)+(((IkReal(-1.00000000000000))*(x2467))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2469=((cj0)*(px));
IkReal x2470=((py)*(sj0));
IkReal x2471=((IkReal(6.66666666666667))*(cj3));
IkReal x2472=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x2469)+(x2470));
dummyeval[1]=((((IkReal(-12.2222222222222))*(x2470)))+(((IkReal(-1.00000000000000))*(x2470)*(x2471)))+(((IkReal(-1.00000000000000))*(x2470)*(x2472)))+(((IkReal(-1.00000000000000))*(x2469)*(x2472)))+(((IkReal(-1.00000000000000))*(x2469)*(x2471)))+(((IkReal(-12.2222222222222))*(x2469))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2473=((cj0)*(px));
IkReal x2474=((py)*(sj0));
IkReal x2475=((IkReal(6.66666666666667))*(sj3));
dummyeval[0]=((((cj3)*(x2474)))+(((cj3)*(x2473)))+(((IkReal(-1.00000000000000))*(x2474)))+(((IkReal(-1.00000000000000))*(x2473)))+(((IkReal(-1.00000000000000))*(x2473)*(x2475)))+(((IkReal(-1.00000000000000))*(x2474)*(x2475))));
dummyeval[1]=((x2474)+(x2473));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2476=((px)*(sj0));
IkReal x2477=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((x2476)+(((IkReal(-1.00000000000000))*(x2477))));
evalcond[3]=((x2477)+(((IkReal(-1.00000000000000))*(x2476))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2478=((cj0)*(px));
IkReal x2479=((py)*(sj0));
dummyeval[0]=((x2479)+(x2478));
dummyeval[1]=((((IkReal(-2.00000000000000))*(x2478)*(x2479)))+(((IkReal(-1.00000000000000))*((x2478)*(x2478))))+(((IkReal(-1.00000000000000))*((x2479)*(x2479)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2480=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2480))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2480))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2481=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2481))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2481))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2482=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2482))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2482))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2483=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2483))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2483))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2484=((cj0)*(px));
IkReal x2485=((py)*(sj0));
IkReal x2486=((IkReal(20.0000000000000))*(pp));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2485)))+(((IkReal(20.0000000000000))*(x2484))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2485)))+(((IkReal(20.0000000000000))*(x2484)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-3.60000000000000))*(x2484)*(x2485)))+(((IkReal(-1.80000000000000))*((x2485)*(x2485))))+(((IkReal(-1.80000000000000))*((x2484)*(x2484)))))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x2484)*(x2485)))+(((IkReal(-1.80000000000000))*((x2485)*(x2485))))+(((IkReal(-1.80000000000000))*((x2484)*(x2484))))))):(IkReal)1.0e30))*(((((x2485)*(x2486)))+(((x2484)*(x2486)))+(((IkReal(-14.4500000000000))*(x2484)))+(((IkReal(-14.4500000000000))*(x2485))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2485)))+(((IkReal(20.0000000000000))*(x2484))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2485)))+(((IkReal(20.0000000000000))*(x2484)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-3.60000000000000))*(x2484)*(x2485)))+(((IkReal(-1.80000000000000))*((x2485)*(x2485))))+(((IkReal(-1.80000000000000))*((x2484)*(x2484)))))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x2484)*(x2485)))+(((IkReal(-1.80000000000000))*((x2485)*(x2485))))+(((IkReal(-1.80000000000000))*((x2484)*(x2484))))))):(IkReal)1.0e30))*(((((x2485)*(x2486)))+(((x2484)*(x2486)))+(((IkReal(-14.4500000000000))*(x2484)))+(((IkReal(-14.4500000000000))*(x2485)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2485)))+(((IkReal(20.0000000000000))*(x2484))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2485)))+(((IkReal(20.0000000000000))*(x2484)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-3.60000000000000))*(x2484)*(x2485)))+(((IkReal(-1.80000000000000))*((x2485)*(x2485))))+(((IkReal(-1.80000000000000))*((x2484)*(x2484)))))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x2484)*(x2485)))+(((IkReal(-1.80000000000000))*((x2485)*(x2485))))+(((IkReal(-1.80000000000000))*((x2484)*(x2484))))))):(IkReal)1.0e30))*(((((x2485)*(x2486)))+(((x2484)*(x2486)))+(((IkReal(-14.4500000000000))*(x2484)))+(((IkReal(-14.4500000000000))*(x2485)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2487=IKsin(j1);
IkReal x2488=IKcos(j1);
IkReal x2489=((py)*(sj0));
IkReal x2490=((cj0)*(px));
IkReal x2491=((IkReal(0.0900000000000000))*(x2488));
IkReal x2492=((x2487)*(x2489));
evalcond[0]=((IkReal(-0.850000000000000))+(x2492)+(((x2487)*(x2490))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2488));
evalcond[2]=((((x2488)*(x2490)))+(((x2488)*(x2489))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2487)))+(((IkReal(-1.00000000000000))*(x2489)))+(((IkReal(-1.00000000000000))*(x2490))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2490)*(x2491)))+(((IkReal(1.10000000000000))*(x2487)*(x2490)))+(((IkReal(1.10000000000000))*(x2492)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2489)*(x2491))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2493=((cj0)*(px));
IkReal x2494=((py)*(sj0));
if( IKabs(((((IkReal(1.17647058823529))*(x2493)))+(((IkReal(1.17647058823529))*(x2494))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.53000000000000))*(x2493)))+(((IkReal(-1.53000000000000))*(x2494))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x2493)))+(((IkReal(-1.53000000000000))*(x2494)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2493)*(x2493))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2494)*(x2494))))+(((IkReal(-44.0000000000000))*(x2493)*(x2494))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x2493)))+(((IkReal(1.17647058823529))*(x2494)))))+IKsqr(((((IKabs(((((IkReal(-1.53000000000000))*(x2493)))+(((IkReal(-1.53000000000000))*(x2494))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x2493)))+(((IkReal(-1.53000000000000))*(x2494)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2493)*(x2493))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2494)*(x2494))))+(((IkReal(-44.0000000000000))*(x2493)*(x2494)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x2493)))+(((IkReal(1.17647058823529))*(x2494)))), ((((IKabs(((((IkReal(-1.53000000000000))*(x2493)))+(((IkReal(-1.53000000000000))*(x2494))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x2493)))+(((IkReal(-1.53000000000000))*(x2494)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2493)*(x2493))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2494)*(x2494))))+(((IkReal(-44.0000000000000))*(x2493)*(x2494)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2495=IKsin(j1);
IkReal x2496=IKcos(j1);
IkReal x2497=((py)*(sj0));
IkReal x2498=((cj0)*(px));
IkReal x2499=((IkReal(0.0900000000000000))*(x2496));
IkReal x2500=((x2495)*(x2497));
evalcond[0]=((IkReal(-0.850000000000000))+(x2500)+(((x2495)*(x2498))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2496));
evalcond[2]=((((x2496)*(x2497)))+(((x2496)*(x2498))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2495)))+(((IkReal(-1.00000000000000))*(x2498)))+(((IkReal(-1.00000000000000))*(x2497))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2497)*(x2499)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2500)))+(((IkReal(-1.00000000000000))*(x2498)*(x2499)))+(((IkReal(1.10000000000000))*(x2495)*(x2498))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2501=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-1.00000000000000))*(x2501));
evalcond[3]=x2501;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2502=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2502))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2502))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2503=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2503))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2503))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2504=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2504))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2504))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2505=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x2506=((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30);
IkReal x2507=((x2505)*(x2506));
if( IKabs(((IkReal(0.850000000000000))*(x2507))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x2507)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x2507)))+IKsqr(((IkReal(0.0555555555555556))*(x2507)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x2507)), ((IkReal(0.0555555555555556))*(x2507)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2508=IKcos(j1);
IkReal x2509=IKsin(j1);
IkReal x2510=((py)*(sj0));
IkReal x2511=((x2509)*(x2510));
evalcond[0]=((IkReal(-0.850000000000000))+(x2511));
evalcond[1]=((IkReal(-0.850000000000000))*(x2508));
evalcond[2]=((x2508)*(x2510));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2510)))+(((IkReal(0.850000000000000))*(x2509))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2511)))+(((IkReal(-0.0900000000000000))*(x2508)*(x2510))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(py)*(sj0))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(sj0)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(sj0)), ((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2512=IKcos(j1);
IkReal x2513=IKsin(j1);
IkReal x2514=((py)*(sj0));
IkReal x2515=((x2513)*(x2514));
evalcond[0]=((IkReal(-0.850000000000000))+(x2515));
evalcond[1]=((IkReal(-0.850000000000000))*(x2512));
evalcond[2]=((x2512)*(x2514));
evalcond[3]=((((IkReal(0.850000000000000))*(x2513)))+(((IkReal(-1.00000000000000))*(x2514))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x2512)*(x2514)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2515))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2516=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2516)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2516))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2517=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2517));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2517))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2518=IKsin(j1);
IkReal x2519=IKcos(j1);
IkReal x2520=((IkReal(0.0450000000000000))*(x2519));
evalcond[0]=((((cj3)*(x2520)))+(((IkReal(-0.300000000000000))*(sj3)*(x2519)))+(((IkReal(0.300000000000000))*(cj3)*(x2518)))+(((IkReal(0.0450000000000000))*(sj3)*(x2518)))+(((IkReal(-1.00000000000000))*(x2520)))+(((IkReal(0.550000000000000))*(x2518))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2521=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2521)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2521))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2522=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2522));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2522))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2523=IKsin(j1);
IkReal x2524=IKcos(j1);
IkReal x2525=((IkReal(0.0450000000000000))*(x2524));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x2524)))+(((IkReal(0.0450000000000000))*(sj3)*(x2523)))+(((cj3)*(x2525)))+(((IkReal(0.550000000000000))*(x2523)))+(((IkReal(-1.00000000000000))*(x2525)))+(((IkReal(0.300000000000000))*(cj3)*(x2523))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2526=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2526;
evalcond[3]=((IkReal(-1.00000000000000))*(x2526));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2527=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2527))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2527))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2528=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2528))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2528))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x2529=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2529))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2529))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2530=((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30);
IkReal x2531=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x2532=((x2530)*(x2531));
if( IKabs(((IkReal(0.850000000000000))*(x2532))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x2532)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x2532)))+IKsqr(((IkReal(0.0555555555555556))*(x2532)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x2532)), ((IkReal(0.0555555555555556))*(x2532)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2533=IKcos(j1);
IkReal x2534=IKsin(j1);
IkReal x2535=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2534)*(x2535))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2533));
evalcond[2]=((x2533)*(x2535));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2535)))+(((IkReal(0.850000000000000))*(x2534))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2534)*(x2535)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2533)*(x2535))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(cj0)*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(cj0)*(px)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(cj0)*(px)), ((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2536=IKcos(j1);
IkReal x2537=IKsin(j1);
IkReal x2538=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2537)*(x2538))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2536));
evalcond[2]=((x2536)*(x2538));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2538)))+(((IkReal(0.850000000000000))*(x2537))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x2536)*(x2538)))+(((IkReal(1.10000000000000))*(x2537)*(x2538)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2539=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2539)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2539))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2540=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2540));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2540))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2541=IKsin(j1);
IkReal x2542=IKcos(j1);
IkReal x2543=((IkReal(0.0450000000000000))*(x2542));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2541)))+(((IkReal(0.300000000000000))*(cj3)*(x2541)))+(((cj3)*(x2543)))+(((IkReal(0.550000000000000))*(x2541)))+(((IkReal(-1.00000000000000))*(x2543)))+(((IkReal(-0.300000000000000))*(sj3)*(x2542))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2544=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2544)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2544))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( IKabs(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x2545=IKatan2(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))), ((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))));
j1array[0]=((IkReal(-1.00000000000000))*(x2545));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2545))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2546=IKsin(j1);
IkReal x2547=IKcos(j1);
IkReal x2548=((IkReal(0.0450000000000000))*(x2547));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2546)))+(((IkReal(0.300000000000000))*(cj3)*(x2546)))+(((cj3)*(x2548)))+(((IkReal(0.550000000000000))*(x2546)))+(((IkReal(-1.00000000000000))*(x2548)))+(((IkReal(-0.300000000000000))*(sj3)*(x2547))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2549=((cj0)*(px));
IkReal x2550=((IkReal(0.300000000000000))*(sj3));
IkReal x2551=((py)*(sj0));
IkReal x2552=((IkReal(0.0450000000000000))*(cj3));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2549)*(x2550)))+(((x2551)*(x2552)))+(((x2549)*(x2552)))+(((IkReal(-1.00000000000000))*(x2550)*(x2551)))+(((IkReal(-0.0450000000000000))*(x2549)))+(((IkReal(-0.0450000000000000))*(x2551))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2549)*(x2550)))+(((x2551)*(x2552)))+(((x2549)*(x2552)))+(((IkReal(-1.00000000000000))*(x2550)*(x2551)))+(((IkReal(-0.0450000000000000))*(x2549)))+(((IkReal(-0.0450000000000000))*(x2551)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x2551)+(x2549))) != 0)?((IkReal)1/(((x2551)+(x2549)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2552)+(((IkReal(-1.00000000000000))*(x2550))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2549)*(x2550)))+(((x2551)*(x2552)))+(((x2549)*(x2552)))+(((IkReal(-1.00000000000000))*(x2550)*(x2551)))+(((IkReal(-0.0450000000000000))*(x2549)))+(((IkReal(-0.0450000000000000))*(x2551))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2549)*(x2550)))+(((x2551)*(x2552)))+(((x2549)*(x2552)))+(((IkReal(-1.00000000000000))*(x2550)*(x2551)))+(((IkReal(-0.0450000000000000))*(x2549)))+(((IkReal(-0.0450000000000000))*(x2551)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x2551)+(x2549))) != 0)?((IkReal)1/(((x2551)+(x2549)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2552)+(((IkReal(-1.00000000000000))*(x2550)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x2549)*(x2550)))+(((x2551)*(x2552)))+(((x2549)*(x2552)))+(((IkReal(-1.00000000000000))*(x2550)*(x2551)))+(((IkReal(-0.0450000000000000))*(x2549)))+(((IkReal(-0.0450000000000000))*(x2551))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2549)*(x2550)))+(((x2551)*(x2552)))+(((x2549)*(x2552)))+(((IkReal(-1.00000000000000))*(x2550)*(x2551)))+(((IkReal(-0.0450000000000000))*(x2549)))+(((IkReal(-0.0450000000000000))*(x2551)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x2551)+(x2549))) != 0)?((IkReal)1/(((x2551)+(x2549)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2552)+(((IkReal(-1.00000000000000))*(x2550)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2553=IKsin(j1);
IkReal x2554=IKcos(j1);
IkReal x2555=((IkReal(0.300000000000000))*(cj3));
IkReal x2556=((IkReal(0.0450000000000000))*(cj3));
IkReal x2557=((cj0)*(px));
IkReal x2558=((py)*(sj0));
IkReal x2559=((IkReal(0.0450000000000000))*(sj3));
IkReal x2560=((IkReal(0.300000000000000))*(sj3));
IkReal x2561=((IkReal(0.0450000000000000))*(x2553));
IkReal x2562=((IkReal(0.0900000000000000))*(x2554));
IkReal x2563=((IkReal(1.10000000000000))*(x2553));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2553)*(x2557)))+(((x2553)*(x2558)))+(((IkReal(-1.00000000000000))*(x2555)))+(((IkReal(-1.00000000000000))*(x2559))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x2554)))+(((IkReal(-1.00000000000000))*(x2554)*(x2559)))+(((IkReal(-1.00000000000000))*(x2554)*(x2555)))+(((IkReal(-1.00000000000000))*(x2561)))+(((x2553)*(x2556)))+(((IkReal(-1.00000000000000))*(x2553)*(x2560))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2560)+(((IkReal(-1.00000000000000))*(x2556)))+(((x2554)*(x2558)))+(((x2554)*(x2557))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2557)))+(((IkReal(-1.00000000000000))*(x2558)))+(((IkReal(0.550000000000000))*(x2553)))+(((x2553)*(x2559)))+(((x2553)*(x2555)))+(((IkReal(-1.00000000000000))*(x2554)*(x2560)))+(((x2554)*(x2556)))+(((IkReal(-0.0450000000000000))*(x2554))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2557)*(x2563)))+(((x2558)*(x2563)))+(((IkReal(-1.00000000000000))*(x2557)*(x2562)))+(((IkReal(-1.00000000000000))*(x2558)*(x2562)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2564=((cj0)*(px));
IkReal x2565=((IkReal(0.0450000000000000))*(sj3));
IkReal x2566=((py)*(sj0));
IkReal x2567=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x2564)+(x2566))) != 0)?((IkReal)1/(((x2564)+(x2566)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2565)+(x2567))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2566)*(x2567)))+(((IkReal(-1.00000000000000))*(x2565)*(x2566)))+(((IkReal(-1.00000000000000))*(x2564)*(x2567)))+(((IkReal(-1.00000000000000))*(x2564)*(x2565)))+(((IkReal(-0.550000000000000))*(x2564)))+(((IkReal(-0.550000000000000))*(x2566))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2566)*(x2567)))+(((IkReal(-1.00000000000000))*(x2565)*(x2566)))+(((IkReal(-1.00000000000000))*(x2564)*(x2567)))+(((IkReal(-1.00000000000000))*(x2564)*(x2565)))+(((IkReal(-0.550000000000000))*(x2564)))+(((IkReal(-0.550000000000000))*(x2566)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x2564)+(x2566))) != 0)?((IkReal)1/(((x2564)+(x2566)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2565)+(x2567)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2566)*(x2567)))+(((IkReal(-1.00000000000000))*(x2565)*(x2566)))+(((IkReal(-1.00000000000000))*(x2564)*(x2567)))+(((IkReal(-1.00000000000000))*(x2564)*(x2565)))+(((IkReal(-0.550000000000000))*(x2564)))+(((IkReal(-0.550000000000000))*(x2566))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2566)*(x2567)))+(((IkReal(-1.00000000000000))*(x2565)*(x2566)))+(((IkReal(-1.00000000000000))*(x2564)*(x2567)))+(((IkReal(-1.00000000000000))*(x2564)*(x2565)))+(((IkReal(-0.550000000000000))*(x2564)))+(((IkReal(-0.550000000000000))*(x2566)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x2564)+(x2566))) != 0)?((IkReal)1/(((x2564)+(x2566)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2565)+(x2567)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x2566)*(x2567)))+(((IkReal(-1.00000000000000))*(x2565)*(x2566)))+(((IkReal(-1.00000000000000))*(x2564)*(x2567)))+(((IkReal(-1.00000000000000))*(x2564)*(x2565)))+(((IkReal(-0.550000000000000))*(x2564)))+(((IkReal(-0.550000000000000))*(x2566))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2566)*(x2567)))+(((IkReal(-1.00000000000000))*(x2565)*(x2566)))+(((IkReal(-1.00000000000000))*(x2564)*(x2567)))+(((IkReal(-1.00000000000000))*(x2564)*(x2565)))+(((IkReal(-0.550000000000000))*(x2564)))+(((IkReal(-0.550000000000000))*(x2566)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2568=IKsin(j1);
IkReal x2569=IKcos(j1);
IkReal x2570=((IkReal(0.300000000000000))*(cj3));
IkReal x2571=((IkReal(0.0450000000000000))*(cj3));
IkReal x2572=((cj0)*(px));
IkReal x2573=((py)*(sj0));
IkReal x2574=((IkReal(0.0450000000000000))*(sj3));
IkReal x2575=((IkReal(0.300000000000000))*(sj3));
IkReal x2576=((IkReal(0.0450000000000000))*(x2568));
IkReal x2577=((IkReal(0.0900000000000000))*(x2569));
IkReal x2578=((IkReal(1.10000000000000))*(x2568));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2568)*(x2572)))+(((x2568)*(x2573)))+(((IkReal(-1.00000000000000))*(x2570)))+(((IkReal(-1.00000000000000))*(x2574))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2569)*(x2574)))+(((IkReal(-1.00000000000000))*(x2569)*(x2570)))+(((x2568)*(x2571)))+(((IkReal(-1.00000000000000))*(x2568)*(x2575)))+(((IkReal(-1.00000000000000))*(x2576)))+(((IkReal(-0.550000000000000))*(x2569))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2575)+(((IkReal(-1.00000000000000))*(x2571)))+(((x2569)*(x2573)))+(((x2569)*(x2572))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2569)*(x2575)))+(((x2568)*(x2570)))+(((x2568)*(x2574)))+(((IkReal(0.550000000000000))*(x2568)))+(((IkReal(-1.00000000000000))*(x2572)))+(((IkReal(-1.00000000000000))*(x2573)))+(((x2569)*(x2571)))+(((IkReal(-0.0450000000000000))*(x2569))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2573)*(x2578)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2572)*(x2578)))+(((IkReal(-1.00000000000000))*(x2573)*(x2577)))+(((IkReal(-1.00000000000000))*(x2572)*(x2577))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((gconst49)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst49)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))), ((gconst49)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2579=IKsin(j1);
IkReal x2580=IKcos(j1);
IkReal x2581=((IkReal(0.300000000000000))*(cj3));
IkReal x2582=((IkReal(0.0450000000000000))*(cj3));
IkReal x2583=((cj0)*(px));
IkReal x2584=((py)*(sj0));
IkReal x2585=((IkReal(0.0450000000000000))*(sj3));
IkReal x2586=((IkReal(0.300000000000000))*(sj3));
IkReal x2587=((IkReal(0.0450000000000000))*(x2579));
IkReal x2588=((IkReal(0.0900000000000000))*(x2580));
IkReal x2589=((IkReal(1.10000000000000))*(x2579));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2585)))+(((IkReal(-1.00000000000000))*(x2581)))+(((x2579)*(x2583)))+(((x2579)*(x2584))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2579)*(x2586)))+(((IkReal(-1.00000000000000))*(x2587)))+(((x2579)*(x2582)))+(((IkReal(-0.550000000000000))*(x2580)))+(((IkReal(-1.00000000000000))*(x2580)*(x2585)))+(((IkReal(-1.00000000000000))*(x2580)*(x2581))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2586)+(((x2580)*(x2584)))+(((x2580)*(x2583)))+(((IkReal(-1.00000000000000))*(x2582))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2584)))+(((IkReal(-1.00000000000000))*(x2583)))+(((x2580)*(x2582)))+(((x2579)*(x2581)))+(((x2579)*(x2585)))+(((IkReal(0.550000000000000))*(x2579)))+(((IkReal(-0.0450000000000000))*(x2580)))+(((IkReal(-1.00000000000000))*(x2580)*(x2586))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2584)*(x2589)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2584)*(x2588)))+(((IkReal(-1.00000000000000))*(x2583)*(x2588)))+(((x2583)*(x2589))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2590=((IkReal(0.0450000000000000))*(sj3));
IkReal x2591=((cj2)*(px));
IkReal x2592=((cj0)*(px));
IkReal x2593=((pz)*(sj2));
IkReal x2594=((py)*(sj0)*(sj2));
IkReal x2595=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x2596=((IkReal(1.00000000000000))*(cj0)*(cj2));
if( IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(py)*(pz)*(x2596)))+(((IkReal(0.550000000000000))*(x2594)))+(((sj2)*(x2590)*(x2592)))+(((x2592)*(x2595)))+(((IkReal(0.550000000000000))*(sj2)*(x2592)))+(((pz)*(sj0)*(x2591)))+(((IkReal(0.300000000000000))*(cj3)*(x2594)))+(((x2590)*(x2594))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(0.550000000000000))*(x2593)))+(((IkReal(-1.00000000000000))*(py)*(x2591)*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*(sj0)*(x2591)*(x2592)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((py)*(x2591)*((cj0)*(cj0))))+(((IkReal(0.300000000000000))*(cj3)*(x2593)))+(((x2590)*(x2593))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((IkReal(-1.00000000000000))*(py)*(pz)*(x2596)))+(((IkReal(0.550000000000000))*(x2594)))+(((sj2)*(x2590)*(x2592)))+(((x2592)*(x2595)))+(((IkReal(0.550000000000000))*(sj2)*(x2592)))+(((pz)*(sj0)*(x2591)))+(((IkReal(0.300000000000000))*(cj3)*(x2594)))+(((x2590)*(x2594)))))), ((gconst35)*(((((IkReal(0.550000000000000))*(x2593)))+(((IkReal(-1.00000000000000))*(py)*(x2591)*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*(sj0)*(x2591)*(x2592)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((py)*(x2591)*((cj0)*(cj0))))+(((IkReal(0.300000000000000))*(cj3)*(x2593)))+(((x2590)*(x2593)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2597=IKsin(j1);
IkReal x2598=IKcos(j1);
IkReal x2599=((px)*(sj2));
IkReal x2600=((IkReal(0.300000000000000))*(sj3));
IkReal x2601=((IkReal(0.0900000000000000))*(sj0));
IkReal x2602=((cj2)*(px));
IkReal x2603=((IkReal(0.0450000000000000))*(cj3));
IkReal x2604=((IkReal(0.0450000000000000))*(cj2));
IkReal x2605=((py)*(sj0));
IkReal x2606=((IkReal(0.0450000000000000))*(sj3));
IkReal x2607=((IkReal(1.00000000000000))*(cj0));
IkReal x2608=((IkReal(0.300000000000000))*(cj3));
IkReal x2609=((py)*(sj2));
IkReal x2610=((cj0)*(x2598));
IkReal x2611=((cj3)*(x2597));
IkReal x2612=((cj2)*(x2598));
IkReal x2613=((cj2)*(x2597));
IkReal x2614=((pz)*(x2598));
IkReal x2615=((cj0)*(px)*(x2597));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2597)*(x2605)))+(((IkReal(-1.00000000000000))*(x2608)))+(((IkReal(-1.00000000000000))*(x2606)))+(x2615)+(x2614));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(py)*(x2607)))+(((sj2)*(x2598)*(x2605)))+(((x2599)*(x2610)))+(((sj0)*(x2602)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x2597))));
evalcond[2]=((((x2597)*(x2604)))+(((x2600)*(x2613)))+(pz)+(((IkReal(-1.00000000000000))*(x2603)*(x2613)))+(((IkReal(-1.00000000000000))*(x2598)*(x2606)))+(((IkReal(-1.00000000000000))*(x2598)*(x2608)))+(((IkReal(-0.550000000000000))*(x2598))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2605)*(x2612)))+(((IkReal(-1.00000000000000))*(x2607)*(x2609)))+(((IkReal(-1.00000000000000))*(x2598)*(x2602)*(x2607)))+(((sj0)*(x2599)))+(((pz)*(x2613)))+(((IkReal(-1.00000000000000))*(x2603)))+(x2600));
evalcond[4]=((((IkReal(0.550000000000000))*(x2597)))+(((IkReal(-1.00000000000000))*(x2605)))+(((x2597)*(x2608)))+(((x2597)*(x2606)))+(((x2600)*(x2612)))+(((x2598)*(x2604)))+(((IkReal(-1.00000000000000))*(x2603)*(x2612)))+(((IkReal(-1.00000000000000))*(px)*(x2607))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2615)))+(((IkReal(1.10000000000000))*(x2614)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2597)*(x2605)))+(((IkReal(0.0900000000000000))*(x2602)*(x2610)))+(((IkReal(-0.0900000000000000))*(pz)*(x2613)))+(((IkReal(0.0900000000000000))*(cj0)*(x2609)))+(((py)*(x2601)*(x2612)))+(((IkReal(-1.00000000000000))*(x2599)*(x2601))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2616=(cj3)*(cj3);
IkReal x2617=(sj3)*(sj3);
IkReal x2618=((cj2)*(sj3));
IkReal x2619=((IkReal(0.0135000000000000))*(cj2));
IkReal x2620=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x2617)))+(((IkReal(-0.0900000000000000))*(x2616)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x2617)*(x2619)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x2620)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x2620)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((x2616)*(x2619)))+(((IkReal(-0.167025000000000))*(x2618)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))+(((IkReal(-0.0879750000000000))*(cj3)*(x2618))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x2617)))+(((IkReal(-0.0900000000000000))*(x2616)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(x2617)*(x2619)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x2620)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x2620)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((x2616)*(x2619)))+(((IkReal(-0.167025000000000))*(x2618)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))+(((IkReal(-0.0879750000000000))*(cj3)*(x2618)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2621=IKsin(j1);
IkReal x2622=IKcos(j1);
IkReal x2623=((px)*(sj2));
IkReal x2624=((IkReal(0.300000000000000))*(sj3));
IkReal x2625=((IkReal(0.0900000000000000))*(sj0));
IkReal x2626=((cj2)*(px));
IkReal x2627=((IkReal(0.0450000000000000))*(cj3));
IkReal x2628=((IkReal(0.0450000000000000))*(cj2));
IkReal x2629=((py)*(sj0));
IkReal x2630=((IkReal(0.0450000000000000))*(sj3));
IkReal x2631=((IkReal(1.00000000000000))*(cj0));
IkReal x2632=((IkReal(0.300000000000000))*(cj3));
IkReal x2633=((py)*(sj2));
IkReal x2634=((cj0)*(x2622));
IkReal x2635=((cj3)*(x2621));
IkReal x2636=((cj2)*(x2622));
IkReal x2637=((cj2)*(x2621));
IkReal x2638=((pz)*(x2622));
IkReal x2639=((cj0)*(px)*(x2621));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2630)))+(((IkReal(-1.00000000000000))*(x2632)))+(((x2621)*(x2629)))+(x2639)+(x2638));
evalcond[1]=((((sj2)*(x2622)*(x2629)))+(((x2623)*(x2634)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x2621)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x2631)))+(((sj0)*(x2626))));
evalcond[2]=((((IkReal(-0.550000000000000))*(x2622)))+(((x2624)*(x2637)))+(pz)+(((x2621)*(x2628)))+(((IkReal(-1.00000000000000))*(x2622)*(x2630)))+(((IkReal(-1.00000000000000))*(x2622)*(x2632)))+(((IkReal(-1.00000000000000))*(x2627)*(x2637))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2629)*(x2636)))+(((pz)*(x2637)))+(((IkReal(-1.00000000000000))*(x2622)*(x2626)*(x2631)))+(((IkReal(-1.00000000000000))*(x2627)))+(((sj0)*(x2623)))+(((IkReal(-1.00000000000000))*(x2631)*(x2633)))+(x2624));
evalcond[4]=((((x2621)*(x2630)))+(((x2621)*(x2632)))+(((IkReal(-1.00000000000000))*(x2629)))+(((x2624)*(x2636)))+(((IkReal(-1.00000000000000))*(px)*(x2631)))+(((IkReal(0.550000000000000))*(x2621)))+(((x2622)*(x2628)))+(((IkReal(-1.00000000000000))*(x2627)*(x2636))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2623)*(x2625)))+(((py)*(x2625)*(x2636)))+(((IkReal(-0.0900000000000000))*(pz)*(x2637)))+(((IkReal(0.0900000000000000))*(x2626)*(x2634)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2621)*(x2629)))+(((IkReal(0.0900000000000000))*(cj0)*(x2633)))+(((IkReal(1.10000000000000))*(x2639)))+(((IkReal(1.10000000000000))*(x2638))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x92=((IkReal(1.00000000000000))*(cj3));
IkReal x93=((sj0)*(sj2));
IkReal x94=((cj2)*(sj1));
IkReal x95=((IkReal(1.00000000000000))*(sj3));
IkReal x96=((cj1)*(cj2));
IkReal x97=((sj1)*(sj2));
IkReal x98=((cj0)*(sj2));
IkReal x99=((IkReal(1.00000000000000))*(cj1));
IkReal x100=((((IkReal(-1.00000000000000))*(sj1)*(x95)))+(((cj3)*(x96))));
IkReal x101=((((cj0)*(cj2)))+(((IkReal(-1.00000000000000))*(x93)*(x99))));
IkReal x102=((((sj3)*(x96)))+(((cj3)*(sj1))));
IkReal x103=((((IkReal(-1.00000000000000))*(x94)*(x95)))+(((cj1)*(cj3))));
IkReal x104=((cj0)*(x100));
IkReal x105=((((IkReal(-1.00000000000000))*(x92)*(x94)))+(((IkReal(-1.00000000000000))*(cj1)*(x95))));
IkReal x106=((((IkReal(-1.00000000000000))*(x98)*(x99)))+(((IkReal(-1.00000000000000))*(cj2)*(sj0))));
IkReal x107=((((cj3)*(x98)))+(((sj0)*(x100))));
IkReal x108=((((cj0)*(x102)))+(((IkReal(-1.00000000000000))*(x93)*(x95))));
IkReal x109=((((sj3)*(x98)))+(((sj0)*(x102))));
IkReal x110=((x104)+(((IkReal(-1.00000000000000))*(cj3)*(x93))));
new_r00=((((r10)*(x107)))+(((r00)*(((x104)+(((IkReal(-1.00000000000000))*(x92)*(x93)))))))+(((r20)*(x105))));
new_r01=((((r21)*(x105)))+(((r11)*(x107)))+(((r01)*(x110))));
new_r02=((((r02)*(x110)))+(((r22)*(x105)))+(((r12)*(x107))));
new_r10=((((r10)*(x101)))+(((r20)*(x97)))+(((r00)*(x106))));
new_r11=((((r21)*(x97)))+(((r01)*(x106)))+(((r11)*(x101))));
new_r12=((((r02)*(x106)))+(((r12)*(x101)))+(((r22)*(x97))));
new_r20=((((r10)*(x109)))+(((r20)*(x103)))+(((r00)*(x108))));
new_r21=((((r21)*(x103)))+(((r01)*(x108)))+(((r11)*(x109))));
new_r22=((((r02)*(x108)))+(((r22)*(x103)))+(((r12)*(x109))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x111=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x111;
evalcond[2]=x111;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
IkReal j6mul = 1;
j6=0;
IkReal j4mul=IkReal(-1.00000000000000);
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

} else
{
IkReal x112=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x112;
evalcond[2]=x112;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x112;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x113=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x113));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x113))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign((((sj4)*(sj4))+((cj4)*(cj4))));
dummyeval[0]=(((sj4)*(sj4))+((cj4)*(cj4)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign((((sj4)*(sj4))+((cj4)*(cj4))));
dummyeval[0]=(((sj4)*(sj4))+((cj4)*(cj4)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x114=((IkReal(1.00000000000000))*(new_r00));
if( IKabs(((gconst63)*(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(sj4)*(x114))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst63)*(((((IkReal(-1.00000000000000))*(cj4)*(x114)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst63)*(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(sj4)*(x114)))))), ((gconst63)*(((((IkReal(-1.00000000000000))*(cj4)*(x114)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x115=IKcos(j6);
IkReal x116=IKsin(j6);
IkReal x117=((IkReal(1.00000000000000))*(sj4));
IkReal x118=((IkReal(1.00000000000000))*(x116));
IkReal x119=((sj4)*(x115));
IkReal x120=((IkReal(1.00000000000000))*(x115));
IkReal x121=((cj4)*(x118));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x117)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x118))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x117)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x120))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x118))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x121)))+(x119)+(new_r01));
evalcond[4]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x115));
evalcond[5]=((((sj4)*(x116)))+(((cj4)*(x115)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x116)*(x117)))+(((IkReal(-1.00000000000000))*(cj4)*(x120)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x121)))+(x119)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x122=((IkReal(1.00000000000000))*(new_r00));
if( IKabs(((gconst62)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(sj4)*(x122))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst62)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x122))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst62)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(sj4)*(x122)))))), ((gconst62)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x122)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x123=IKcos(j6);
IkReal x124=IKsin(j6);
IkReal x125=((IkReal(1.00000000000000))*(sj4));
IkReal x126=((IkReal(1.00000000000000))*(x124));
IkReal x127=((sj4)*(x123));
IkReal x128=((IkReal(1.00000000000000))*(x123));
IkReal x129=((cj4)*(x126));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x125)))+(((IkReal(-1.00000000000000))*(x126))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x125)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x128))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x126))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x129)))+(x127)+(new_r01));
evalcond[4]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x123));
evalcond[5]=((((sj4)*(x124)))+(new_r00)+(((cj4)*(x123))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x124)*(x125)))+(((IkReal(-1.00000000000000))*(cj4)*(x128)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x129)))+(x127)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst52)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst52)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst52)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst52)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x130=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x130;
evalcond[2]=x130;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((((new_r12)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(new_r02)))));
dummyeval[0]=((((new_r12)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x131=((gconst56)*(new_r01));
if( IKabs(((new_r02)*(x131))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x131))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r02)*(x131)), ((IkReal(-1.00000000000000))*(new_r12)*(x131)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x132=IKcos(j4);
IkReal x133=IKsin(j4);
IkReal x134=((IkReal(1.00000000000000))*(cj6));
IkReal x135=((IkReal(1.00000000000000))*(sj6));
IkReal x136=((sj6)*(x133));
IkReal x137=((IkReal(1.00000000000000))*(x133));
IkReal x138=((x132)*(x134));
evalcond[0]=((((new_r12)*(x132)))+(((IkReal(-1.00000000000000))*(new_r02)*(x137))));
evalcond[1]=((((new_r12)*(x133)))+(((new_r02)*(x132))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x137)))+(((IkReal(-1.00000000000000))*(x135)))+(((new_r10)*(x132))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x137)))+(((IkReal(-1.00000000000000))*(x134)))+(((new_r11)*(x132))));
evalcond[4]=((sj6)+(((new_r01)*(x132)))+(((new_r11)*(x133))));
evalcond[5]=((((cj6)*(x133)))+(((sj6)*(x132)))+(new_r01));
evalcond[6]=((((new_r00)*(x132)))+(((IkReal(-1.00000000000000))*(x134)))+(((new_r10)*(x133))));
evalcond[7]=((x136)+(((IkReal(-1.00000000000000))*(x138)))+(new_r00));
evalcond[8]=((x136)+(((IkReal(-1.00000000000000))*(x138)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x133)*(x134)))+(((IkReal(-1.00000000000000))*(x132)*(x135)))+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x139=((gconst55)*(sj6));
if( IKabs(((new_r02)*(x139))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x139))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r02)*(x139)), ((IkReal(-1.00000000000000))*(new_r12)*(x139)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x140=IKcos(j4);
IkReal x141=IKsin(j4);
IkReal x142=((IkReal(1.00000000000000))*(cj6));
IkReal x143=((IkReal(1.00000000000000))*(sj6));
IkReal x144=((sj6)*(x141));
IkReal x145=((IkReal(1.00000000000000))*(x141));
IkReal x146=((x140)*(x142));
evalcond[0]=((((new_r12)*(x140)))+(((IkReal(-1.00000000000000))*(new_r02)*(x145))));
evalcond[1]=((((new_r12)*(x141)))+(((new_r02)*(x140))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x143)))+(((new_r10)*(x140)))+(((IkReal(-1.00000000000000))*(new_r00)*(x145))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x145)))+(((IkReal(-1.00000000000000))*(x142)))+(((new_r11)*(x140))));
evalcond[4]=((sj6)+(((new_r01)*(x140)))+(((new_r11)*(x141))));
evalcond[5]=((((sj6)*(x140)))+(((cj6)*(x141)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x142)))+(((new_r00)*(x140)))+(((new_r10)*(x141))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x146)))+(x144)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x146)))+(x144)+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(-1.00000000000000))*(x141)*(x142)))+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x147=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x147;
evalcond[2]=x147;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x147;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((((IkReal(-1.00000000000000))*(new_r02)*(sj6)))+(((cj6)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r02)*(sj6)))+(((cj6)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x148=((gconst58)*(new_r00));
if( IKabs(((new_r02)*(x148))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x148))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r02)*(x148)), ((IkReal(-1.00000000000000))*(new_r12)*(x148)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x149=IKcos(j4);
IkReal x150=IKsin(j4);
IkReal x151=((IkReal(1.00000000000000))*(sj6));
IkReal x152=((IkReal(1.00000000000000))*(cj6));
IkReal x153=((cj6)*(x150));
IkReal x154=((IkReal(1.00000000000000))*(x150));
IkReal x155=((x149)*(x151));
evalcond[0]=((((new_r12)*(x149)))+(((IkReal(-1.00000000000000))*(new_r02)*(x154))));
evalcond[1]=((((new_r12)*(x150)))+(((new_r02)*(x149))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x151)))+(((new_r10)*(x149)))+(((IkReal(-1.00000000000000))*(new_r00)*(x154))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x152)))+(((new_r11)*(x149)))+(((IkReal(-1.00000000000000))*(new_r01)*(x154))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x151)))+(((new_r01)*(x149)))+(((new_r11)*(x150))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x155)))+(x153)+(new_r01));
evalcond[6]=((((new_r00)*(x149)))+(cj6)+(((new_r10)*(x150))));
evalcond[7]=((((cj6)*(x149)))+(((sj6)*(x150)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x150)*(x151)))+(new_r11)+(((IkReal(-1.00000000000000))*(x149)*(x152))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x155)))+(x153)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x156=((cj6)*(gconst57));
if( IKabs(((new_r02)*(x156))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x156))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r02)*(x156)), ((IkReal(-1.00000000000000))*(new_r12)*(x156)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x157=IKcos(j4);
IkReal x158=IKsin(j4);
IkReal x159=((IkReal(1.00000000000000))*(sj6));
IkReal x160=((IkReal(1.00000000000000))*(cj6));
IkReal x161=((cj6)*(x158));
IkReal x162=((IkReal(1.00000000000000))*(x158));
IkReal x163=((x157)*(x159));
evalcond[0]=((((new_r12)*(x157)))+(((IkReal(-1.00000000000000))*(new_r02)*(x162))));
evalcond[1]=((((new_r12)*(x158)))+(((new_r02)*(x157))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x162)))+(((IkReal(-1.00000000000000))*(x159)))+(((new_r10)*(x157))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x160)))+(((new_r11)*(x157)))+(((IkReal(-1.00000000000000))*(new_r01)*(x162))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x159)))+(((new_r01)*(x157)))+(((new_r11)*(x158))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x163)))+(x161)+(new_r01));
evalcond[6]=((cj6)+(((new_r00)*(x157)))+(((new_r10)*(x158))));
evalcond[7]=((((cj6)*(x157)))+(((sj6)*(x158)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x157)*(x160)))+(((IkReal(-1.00000000000000))*(x158)*(x159)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x163)))+(x161)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst54)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst54)*(new_r12)), ((gconst54)*(new_r02)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x164=IKcos(j4);
IkReal x165=IKsin(j4);
IkReal x166=((IkReal(1.00000000000000))*(cj6));
IkReal x167=((cj5)*(sj6));
IkReal x168=((IkReal(1.00000000000000))*(cj5));
IkReal x169=((IkReal(1.00000000000000))*(sj5));
IkReal x170=((IkReal(1.00000000000000))*(x164));
IkReal x171=((cj5)*(x165));
IkReal x172=((new_r11)*(x165));
IkReal x173=((cj5)*(x164));
IkReal x174=((new_r12)*(x165));
IkReal x175=((new_r10)*(x165));
IkReal x176=((IkReal(1.00000000000000))*(x165));
evalcond[0]=((new_r02)+(((IkReal(-1.00000000000000))*(x164)*(x169))));
evalcond[1]=((new_r12)+(((IkReal(-1.00000000000000))*(x165)*(x169))));
evalcond[2]=((((new_r12)*(x164)))+(((IkReal(-1.00000000000000))*(new_r02)*(x176))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x169)))+(x174)+(((new_r02)*(x164))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x164)))+(((IkReal(-1.00000000000000))*(new_r00)*(x176))));
evalcond[5]=((((new_r11)*(x164)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(new_r01)*(x176))));
evalcond[6]=((((new_r01)*(x164)))+(x172)+(x167));
evalcond[7]=((((cj6)*(x165)))+(((x164)*(x167)))+(new_r01));
evalcond[8]=((((new_r00)*(x164)))+(((IkReal(-1.00000000000000))*(cj5)*(x166)))+(x175));
evalcond[9]=((((sj6)*(x165)))+(new_r00)+(((IkReal(-1.00000000000000))*(x166)*(x173))));
evalcond[10]=((((x165)*(x167)))+(new_r11)+(((IkReal(-1.00000000000000))*(x164)*(x166))));
evalcond[11]=((((IkReal(-1.00000000000000))*(sj6)*(x170)))+(new_r10)+(((IkReal(-1.00000000000000))*(x166)*(x171))));
evalcond[12]=((((new_r02)*(x173)))+(((new_r12)*(x171)))+(((IkReal(-1.00000000000000))*(new_r22)*(x169))));
evalcond[13]=((((IkReal(-1.00000000000000))*(new_r20)*(x168)))+(((IkReal(-1.00000000000000))*(new_r00)*(x164)*(x169)))+(((IkReal(-1.00000000000000))*(x169)*(x175))));
evalcond[14]=((((IkReal(-1.00000000000000))*(new_r01)*(x164)*(x169)))+(((IkReal(-1.00000000000000))*(new_r21)*(x168)))+(((IkReal(-1.00000000000000))*(x169)*(x172))));
evalcond[15]=((((new_r01)*(x173)))+(sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x169)))+(((new_r11)*(x171))));
evalcond[16]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x164)*(x169)))+(((IkReal(-1.00000000000000))*(new_r22)*(x168)))+(((IkReal(-1.00000000000000))*(x169)*(x174))));
evalcond[17]=((((new_r00)*(x173)))+(((new_r10)*(x171)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(new_r20)*(x169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  || IKabs(evalcond[15]) > 0.000001  || IKabs(evalcond[16]) > 0.000001  || IKabs(evalcond[17]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst53)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst53)*(new_r12)), ((gconst53)*(new_r02)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x177=IKcos(j4);
IkReal x178=IKsin(j4);
IkReal x179=((IkReal(1.00000000000000))*(cj6));
IkReal x180=((cj5)*(sj6));
IkReal x181=((IkReal(1.00000000000000))*(cj5));
IkReal x182=((IkReal(1.00000000000000))*(sj5));
IkReal x183=((IkReal(1.00000000000000))*(x177));
IkReal x184=((cj5)*(x178));
IkReal x185=((new_r11)*(x178));
IkReal x186=((cj5)*(x177));
IkReal x187=((new_r12)*(x178));
IkReal x188=((new_r10)*(x178));
IkReal x189=((IkReal(1.00000000000000))*(x178));
evalcond[0]=((((IkReal(-1.00000000000000))*(x177)*(x182)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x178)*(x182)))+(new_r12));
evalcond[2]=((((new_r12)*(x177)))+(((IkReal(-1.00000000000000))*(new_r02)*(x189))));
evalcond[3]=((((new_r02)*(x177)))+(((IkReal(-1.00000000000000))*(x182)))+(x187));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x177)))+(((IkReal(-1.00000000000000))*(new_r00)*(x189))));
evalcond[5]=((((new_r11)*(x177)))+(((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(new_r01)*(x189))));
evalcond[6]=((((new_r01)*(x177)))+(x185)+(x180));
evalcond[7]=((((x177)*(x180)))+(((cj6)*(x178)))+(new_r01));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj5)*(x179)))+(((new_r00)*(x177)))+(x188));
evalcond[9]=((((sj6)*(x178)))+(new_r00)+(((IkReal(-1.00000000000000))*(x179)*(x186))));
evalcond[10]=((((x178)*(x180)))+(((IkReal(-1.00000000000000))*(x177)*(x179)))+(new_r11));
evalcond[11]=((((IkReal(-1.00000000000000))*(sj6)*(x183)))+(new_r10)+(((IkReal(-1.00000000000000))*(x179)*(x184))));
evalcond[12]=((((new_r02)*(x186)))+(((new_r12)*(x184)))+(((IkReal(-1.00000000000000))*(new_r22)*(x182))));
evalcond[13]=((((IkReal(-1.00000000000000))*(new_r20)*(x181)))+(((IkReal(-1.00000000000000))*(new_r00)*(x177)*(x182)))+(((IkReal(-1.00000000000000))*(x182)*(x188))));
evalcond[14]=((((IkReal(-1.00000000000000))*(new_r21)*(x181)))+(((IkReal(-1.00000000000000))*(new_r01)*(x177)*(x182)))+(((IkReal(-1.00000000000000))*(x182)*(x185))));
evalcond[15]=((((new_r11)*(x184)))+(sj6)+(((new_r01)*(x186)))+(((IkReal(-1.00000000000000))*(new_r21)*(x182))));
evalcond[16]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x181)))+(((IkReal(-1.00000000000000))*(new_r02)*(x177)*(x182)))+(((IkReal(-1.00000000000000))*(x182)*(x187))));
evalcond[17]=((((new_r10)*(x184)))+(((new_r00)*(x186)))+(((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(new_r20)*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  || IKabs(evalcond[15]) > 0.000001  || IKabs(evalcond[16]) > 0.000001  || IKabs(evalcond[17]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst51)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst51)*(new_r12)), ((gconst51)*(new_r02)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x190=IKcos(j4);
IkReal x191=IKsin(j4);
IkReal x192=((IkReal(1.00000000000000))*(sj5));
IkReal x193=((IkReal(1.00000000000000))*(cj5));
IkReal x194=((new_r12)*(x191));
IkReal x195=((new_r02)*(x190));
evalcond[0]=((((IkReal(-1.00000000000000))*(x190)*(x192)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x191)*(x192)))+(new_r12));
evalcond[2]=((((new_r12)*(x190)))+(((IkReal(-1.00000000000000))*(new_r02)*(x191))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x192)))+(x195)+(x194));
evalcond[4]=((((cj5)*(x194)))+(((cj5)*(x195)))+(((IkReal(-1.00000000000000))*(new_r22)*(x192))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r00)*(x190)*(x192)))+(((IkReal(-1.00000000000000))*(new_r20)*(x193)))+(((IkReal(-1.00000000000000))*(new_r10)*(x191)*(x192))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x190)*(x192)))+(((IkReal(-1.00000000000000))*(new_r21)*(x193)))+(((IkReal(-1.00000000000000))*(new_r11)*(x191)*(x192))));
evalcond[7]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x192)*(x194)))+(((IkReal(-1.00000000000000))*(x192)*(x195)))+(((IkReal(-1.00000000000000))*(new_r22)*(x193))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x196=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x197=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x198=((IkReal(1.00000000000000))*(cj5));
IkReal x199=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x196;
evalcond[2]=x196;
evalcond[3]=new_r02;
evalcond[4]=x197;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x197;
evalcond[7]=((((cj5)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x199))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r20)*(x198)))+(((IkReal(-1.00000000000000))*(new_r10)*(x199))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x198)))+(((IkReal(-1.00000000000000))*(new_r11)*(x199))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x198)))+(((IkReal(-1.00000000000000))*(new_r12)*(x199))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x200=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x200;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x200;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x201=IKcos(j6);
IkReal x202=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x201)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x202)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x201))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x203=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x203;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x203;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x203;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x204=IKsin(j6);
IkReal x205=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x205)))+(new_r20));
evalcond[1]=((x204)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x204))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x205)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x206=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x206;
evalcond[2]=x206;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x207=IKsin(j6);
IkReal x208=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x207))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x208)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x207)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x208)))+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x209=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x209;
evalcond[2]=x209;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x209;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x210=IKcos(j6);
IkReal x211=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((new_r11)+(((IkReal(-1.00000000000000))*(x211))));
evalcond[3]=((x210)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x212=IKsin(j6);
IkReal x213=IKcos(j6);
IkReal x214=((IkReal(1.00000000000000))*(sj5));
IkReal x215=((IkReal(1.00000000000000))*(x213));
evalcond[0]=((((sj5)*(x213)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x212)*(x214))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x215))));
evalcond[4]=((((cj5)*(x212)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x215)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x212)+(((IkReal(-1.00000000000000))*(new_r21)*(x214))));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x214)))+(((IkReal(-1.00000000000000))*(x215))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst60)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst60)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x216=IKsin(j6);
IkReal x217=IKcos(j6);
IkReal x218=((IkReal(1.00000000000000))*(sj5));
IkReal x219=((IkReal(1.00000000000000))*(x217));
evalcond[0]=((((sj5)*(x217)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x216)*(x218))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x216)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x219))));
evalcond[4]=((((cj5)*(x216)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x219)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x216)+(((IkReal(-1.00000000000000))*(new_r21)*(x218))));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x218)))+(((IkReal(-1.00000000000000))*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x220=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x221=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x222=((IkReal(1.00000000000000))*(cj5));
IkReal x223=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x220;
evalcond[2]=x220;
evalcond[3]=new_r02;
evalcond[4]=x221;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x221;
evalcond[7]=((((cj5)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x223))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x223)))+(((IkReal(-1.00000000000000))*(new_r20)*(x222))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x223)))+(((IkReal(-1.00000000000000))*(new_r21)*(x222))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x222)))+(((IkReal(-1.00000000000000))*(new_r12)*(x223))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x224=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x224;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x224;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x225=IKcos(j6);
IkReal x226=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x225)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x226))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x226))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x225))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x227=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x227;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x227;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x227;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x228=IKsin(j6);
IkReal x229=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x229))));
evalcond[1]=((x228)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x230=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x230;
evalcond[2]=x230;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x231=IKsin(j6);
IkReal x232=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x231))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x232)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x231)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x232)))+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x233=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x233;
evalcond[2]=x233;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x233;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x234=IKcos(j6);
IkReal x235=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x235)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x234))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x235)))+(new_r11));
evalcond[3]=((x234)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x236=IKsin(j6);
IkReal x237=IKcos(j6);
IkReal x238=((IkReal(1.00000000000000))*(sj5));
IkReal x239=((IkReal(1.00000000000000))*(x237));
evalcond[0]=((new_r20)+(((sj5)*(x237))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x236)*(x238)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x236))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x236)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x239)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x238)))+(((cj5)*(new_r11)))+(x236));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x238)))+(((IkReal(-1.00000000000000))*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst61)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst61)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x240=IKsin(j6);
IkReal x241=IKcos(j6);
IkReal x242=((IkReal(1.00000000000000))*(sj5));
IkReal x243=((IkReal(1.00000000000000))*(x241));
evalcond[0]=((((sj5)*(x241)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x240)*(x242)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x243))));
evalcond[4]=((((cj5)*(x240)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x243)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r21)*(x242)))+(x240));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x242)))+(((IkReal(-1.00000000000000))*(x243))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x244=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x245=((IkReal(1.00000000000000))*(cj5));
IkReal x246=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x244;
evalcond[2]=x244;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r12)))+(((IkReal(-1.00000000000000))*(x246))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x246)))+(((IkReal(-1.00000000000000))*(new_r12)*(x245))));
evalcond[9]=((((new_r10)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r20)*(x245))));
evalcond[10]=((((new_r11)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r21)*(x245))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x245))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x247=IKsin(j6);
IkReal x248=IKcos(j6);
IkReal x249=((IkReal(1.00000000000000))*(sj5));
IkReal x250=((IkReal(1.00000000000000))*(new_r11));
IkReal x251=((IkReal(1.00000000000000))*(new_r10));
IkReal x252=((IkReal(1.00000000000000))*(x248));
evalcond[0]=((((sj5)*(x248)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x247)*(x249))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x247)))+(new_r00));
evalcond[3]=((new_r01)+(((IkReal(-1.00000000000000))*(x252))));
evalcond[4]=((((cj5)*(x247)))+(((IkReal(-1.00000000000000))*(x250))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x252)))+(((IkReal(-1.00000000000000))*(x251))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj5)*(x250)))+(((IkReal(-1.00000000000000))*(new_r21)*(x249)))+(x247));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj5)*(x251)))+(((IkReal(-1.00000000000000))*(new_r20)*(x249)))+(((IkReal(-1.00000000000000))*(x252))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x253=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x254=((IkReal(1.00000000000000))*(cj5));
IkReal x255=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x253;
evalcond[2]=x253;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r12)))+(((IkReal(-1.00000000000000))*(x255))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x255)))+(((IkReal(-1.00000000000000))*(new_r12)*(x254))));
evalcond[9]=((((new_r10)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r20)*(x254))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x254)))+(((new_r11)*(sj5))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x254))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x256=IKsin(j6);
IkReal x257=IKcos(j6);
IkReal x258=((IkReal(1.00000000000000))*(sj5));
IkReal x259=((IkReal(1.00000000000000))*(new_r11));
IkReal x260=((IkReal(1.00000000000000))*(new_r10));
IkReal x261=((IkReal(1.00000000000000))*(x257));
evalcond[0]=((((sj5)*(x257)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x256)*(x258)))+(new_r21));
evalcond[2]=((new_r00)+(((IkReal(-1.00000000000000))*(x256))));
evalcond[3]=((new_r01)+(((IkReal(-1.00000000000000))*(x261))));
evalcond[4]=((((cj5)*(x256)))+(((IkReal(-1.00000000000000))*(x259))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x261)))+(((IkReal(-1.00000000000000))*(x260))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x258)))+(((IkReal(-1.00000000000000))*(cj5)*(x259)))+(x256));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj5)*(x260)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(new_r20)*(x258))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x262=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x262;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x262;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x263=IKcos(j6);
IkReal x264=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x263)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x264))));
evalcond[2]=((new_r10)+(((IkReal(-1.00000000000000))*(x264))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x263)))+(new_r11));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x265=IKcos(j6);
IkReal x266=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x265)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x266))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x266))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x267=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x267;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x267;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x267;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x268=IKsin(j6);
IkReal x269=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x269))));
evalcond[1]=((x268)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x268)))+(new_r10));
evalcond[3]=((new_r11)+(((IkReal(-1.00000000000000))*(x269))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x270=IKsin(j6);
IkReal x271=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x271)))+(new_r20));
evalcond[1]=((x270)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x270)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x272=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x272;
evalcond[2]=x272;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x273=IKsin(j6);
IkReal x274=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x273)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x274)))+(new_r11));
evalcond[2]=((x273)+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x274)))+(new_r00));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x275=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x275;
evalcond[2]=x275;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x276=IKsin(j6);
IkReal x277=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x276)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x277))));
evalcond[2]=((x276)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x277)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x278=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x278;
evalcond[2]=x278;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x278;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x279=IKcos(j6);
IkReal x280=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x280)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x279)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x280)))+(new_r01));
evalcond[3]=((x279)+(new_r00));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x281=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x281;
evalcond[2]=x281;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x281;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x282=IKcos(j6);
IkReal x283=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x283))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x282)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((x282)+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x284=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x284)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x284))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x284)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x284)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x284)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x284)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x285=IKsin(j6);
IkReal x286=IKcos(j6);
IkReal x287=((IkReal(1.00000000000000))*(sj5));
IkReal x288=((IkReal(1.00000000000000))*(sj4));
IkReal x289=((cj5)*(sj4));
IkReal x290=((cj4)*(new_r01));
IkReal x291=((cj4)*(new_r00));
IkReal x292=((IkReal(1.00000000000000))*(x286));
IkReal x293=((cj5)*(x285));
IkReal x294=((IkReal(1.00000000000000))*(x285));
evalcond[0]=((((sj5)*(x286)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x285)*(x287)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x294)))+(((IkReal(-1.00000000000000))*(new_r00)*(x288))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x292)))+(((IkReal(-1.00000000000000))*(new_r01)*(x288))));
evalcond[4]=((((new_r11)*(sj4)))+(x290)+(x293));
evalcond[5]=((((cj4)*(x293)))+(new_r01)+(((sj4)*(x286))));
evalcond[6]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(cj5)*(x292)))+(x291));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x292)))+(new_r00)+(((sj4)*(x285))));
evalcond[8]=((((x285)*(x289)))+(((IkReal(-1.00000000000000))*(cj4)*(x292)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj4)*(x294)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj5)*(x286)*(x288))));
evalcond[10]=((((cj5)*(x290)))+(x285)+(((IkReal(-1.00000000000000))*(new_r21)*(x287)))+(((new_r11)*(x289))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x292)))+(((cj5)*(x291)))+(((IkReal(-1.00000000000000))*(new_r20)*(x287)))+(((new_r10)*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x295=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x295)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x295))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x295)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x295)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x295)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x295)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x296=IKsin(j6);
IkReal x297=IKcos(j6);
IkReal x298=((IkReal(1.00000000000000))*(sj5));
IkReal x299=((IkReal(1.00000000000000))*(sj4));
IkReal x300=((cj5)*(sj4));
IkReal x301=((cj4)*(new_r01));
IkReal x302=((cj4)*(new_r00));
IkReal x303=((IkReal(1.00000000000000))*(x297));
IkReal x304=((cj5)*(x296));
IkReal x305=((IkReal(1.00000000000000))*(x296));
evalcond[0]=((((sj5)*(x297)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x296)*(x298)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x299)))+(((IkReal(-1.00000000000000))*(x305))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x299)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[4]=((((new_r11)*(sj4)))+(x304)+(x301));
evalcond[5]=((((sj4)*(x297)))+(new_r01)+(((cj4)*(x304))));
evalcond[6]=((((new_r10)*(sj4)))+(x302)+(((IkReal(-1.00000000000000))*(cj5)*(x303))));
evalcond[7]=((((sj4)*(x296)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x303)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj4)*(x303)))+(((x296)*(x300)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x297)*(x299)))+(((IkReal(-1.00000000000000))*(cj4)*(x305)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x298)))+(((new_r11)*(x300)))+(x296)+(((cj5)*(x301))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x298)))+(((new_r10)*(x300)))+(((IkReal(-1.00000000000000))*(x303)))+(((cj5)*(x302))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst59)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst59)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst59)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst59)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x306=IKsin(j6);
IkReal x307=IKcos(j6);
IkReal x308=((IkReal(1.00000000000000))*(sj5));
IkReal x309=((IkReal(1.00000000000000))*(sj4));
IkReal x310=((cj5)*(sj4));
IkReal x311=((cj4)*(new_r01));
IkReal x312=((cj4)*(new_r00));
IkReal x313=((IkReal(1.00000000000000))*(x307));
IkReal x314=((cj5)*(x306));
IkReal x315=((IkReal(1.00000000000000))*(x306));
evalcond[0]=((((sj5)*(x307)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x306)*(x308)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(new_r00)*(x309))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x313)))+(((IkReal(-1.00000000000000))*(new_r01)*(x309))));
evalcond[4]=((((new_r11)*(sj4)))+(x314)+(x311));
evalcond[5]=((((cj4)*(x314)))+(((sj4)*(x307)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(x312)+(((IkReal(-1.00000000000000))*(cj5)*(x313))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x313)))+(((sj4)*(x306)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj4)*(x313)))+(((x306)*(x310)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x307)*(x309)))+(((IkReal(-1.00000000000000))*(cj4)*(x315)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x308)))+(((cj5)*(x311)))+(x306)+(((new_r11)*(x310))));
evalcond[11]=((((cj5)*(x312)))+(((IkReal(-1.00000000000000))*(new_r20)*(x308)))+(((IkReal(-1.00000000000000))*(x313)))+(((new_r10)*(x310))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst50)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst50)*(new_r12)), ((gconst50)*(new_r02)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x316=IKcos(j4);
IkReal x317=IKsin(j4);
IkReal x318=((IkReal(1.00000000000000))*(sj5));
IkReal x319=((IkReal(1.00000000000000))*(cj5));
IkReal x320=((new_r12)*(x317));
IkReal x321=((new_r02)*(x316));
evalcond[0]=((new_r02)+(((IkReal(-1.00000000000000))*(x316)*(x318))));
evalcond[1]=((new_r12)+(((IkReal(-1.00000000000000))*(x317)*(x318))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x317)))+(((new_r12)*(x316))));
evalcond[3]=((x320)+(x321)+(((IkReal(-1.00000000000000))*(x318))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r22)*(x318)))+(((cj5)*(x321)))+(((cj5)*(x320))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r20)*(x319)))+(((IkReal(-1.00000000000000))*(new_r10)*(x317)*(x318)))+(((IkReal(-1.00000000000000))*(new_r00)*(x316)*(x318))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x319)))+(((IkReal(-1.00000000000000))*(new_r11)*(x317)*(x318)))+(((IkReal(-1.00000000000000))*(new_r01)*(x316)*(x318))));
evalcond[7]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x319)))+(((IkReal(-1.00000000000000))*(x318)*(x320)))+(((IkReal(-1.00000000000000))*(x318)*(x321))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x322=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x323=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x324=((IkReal(1.00000000000000))*(cj5));
IkReal x325=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x322;
evalcond[2]=x322;
evalcond[3]=new_r02;
evalcond[4]=x323;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x323;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r22)*(x325)))+(((cj5)*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x325)))+(((IkReal(-1.00000000000000))*(new_r20)*(x324))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x324)))+(((IkReal(-1.00000000000000))*(new_r11)*(x325))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x325)))+(((IkReal(-1.00000000000000))*(new_r22)*(x324))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x326=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x326;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x326;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x327=IKcos(j6);
IkReal x328=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x327)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x328)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x328)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x329=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x329;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x329;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x329;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x330=IKsin(j6);
IkReal x331=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x331)))+(new_r20));
evalcond[1]=((x330)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x330)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x331)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x332=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x332;
evalcond[2]=x332;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x333=IKsin(j6);
IkReal x334=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x334)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x333)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x334)))+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x335=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x335;
evalcond[2]=x335;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x335;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x336=IKcos(j6);
IkReal x337=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x337)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x336)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x337)))+(new_r11));
evalcond[3]=((x336)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x338=IKsin(j6);
IkReal x339=IKcos(j6);
IkReal x340=((IkReal(1.00000000000000))*(sj5));
IkReal x341=((IkReal(1.00000000000000))*(x339));
evalcond[0]=((((sj5)*(x339)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x338)*(x340))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x338)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x341))));
evalcond[4]=((((cj5)*(x338)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x341)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x338)+(((IkReal(-1.00000000000000))*(new_r21)*(x340))));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x340)))+(((IkReal(-1.00000000000000))*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst60)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst60)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x342=IKsin(j6);
IkReal x343=IKcos(j6);
IkReal x344=((IkReal(1.00000000000000))*(sj5));
IkReal x345=((IkReal(1.00000000000000))*(x343));
evalcond[0]=((((sj5)*(x343)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x342)*(x344))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x342))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[4]=((((cj5)*(x342)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x345)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x342)+(((IkReal(-1.00000000000000))*(new_r21)*(x344))));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x344)))+(((IkReal(-1.00000000000000))*(x345))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x346=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x347=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x348=((IkReal(1.00000000000000))*(cj5));
IkReal x349=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x346;
evalcond[2]=x346;
evalcond[3]=new_r02;
evalcond[4]=x347;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x347;
evalcond[7]=((((cj5)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x349))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x349)))+(((IkReal(-1.00000000000000))*(new_r20)*(x348))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x349)))+(((IkReal(-1.00000000000000))*(new_r21)*(x348))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x349)))+(((IkReal(-1.00000000000000))*(new_r22)*(x348))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x350=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x350;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x350;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x351=IKcos(j6);
IkReal x352=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x351)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x352)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x352)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x351)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x353=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x353;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x353;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x353;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x354=IKsin(j6);
IkReal x355=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x355)))+(new_r20));
evalcond[1]=((x354)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x354)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x356=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x356;
evalcond[2]=x356;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x357=IKsin(j6);
IkReal x358=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x357)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x358)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x357)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x358)))+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x359=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x359;
evalcond[2]=x359;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x359;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x360=IKcos(j6);
IkReal x361=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x361)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x360)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x361)))+(new_r11));
evalcond[3]=((x360)+(new_r10));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x362=IKsin(j6);
IkReal x363=IKcos(j6);
IkReal x364=((IkReal(1.00000000000000))*(sj5));
IkReal x365=((IkReal(1.00000000000000))*(x363));
evalcond[0]=((((sj5)*(x363)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x362)*(x364)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x362)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x365)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x362)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x365)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x362)+(((IkReal(-1.00000000000000))*(new_r21)*(x364))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x364)))+(((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(x365))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst61)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst61)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x366=IKsin(j6);
IkReal x367=IKcos(j6);
IkReal x368=((IkReal(1.00000000000000))*(sj5));
IkReal x369=((IkReal(1.00000000000000))*(x367));
evalcond[0]=((((sj5)*(x367)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x366)*(x368)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x366)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x369)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x366)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x369)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x366)+(((IkReal(-1.00000000000000))*(new_r21)*(x368))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x368)))+(((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(x369))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x370=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x371=((IkReal(1.00000000000000))*(cj5));
IkReal x372=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x370;
evalcond[2]=x370;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x372)))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r12)*(x371)))+(((IkReal(-1.00000000000000))*(new_r22)*(x372))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r20)*(x371)))+(((new_r10)*(sj5))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x371)))+(((new_r11)*(sj5))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x371))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x373=IKsin(j6);
IkReal x374=IKcos(j6);
IkReal x375=((IkReal(1.00000000000000))*(sj5));
IkReal x376=((IkReal(1.00000000000000))*(new_r11));
IkReal x377=((IkReal(1.00000000000000))*(new_r10));
IkReal x378=((IkReal(1.00000000000000))*(x374));
evalcond[0]=((((sj5)*(x374)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x373)*(x375)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x373)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x378)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x376)))+(((cj5)*(x373))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x378)))+(((IkReal(-1.00000000000000))*(x377))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x375)))+(((IkReal(-1.00000000000000))*(cj5)*(x376)))+(x373));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x375)))+(((IkReal(-1.00000000000000))*(cj5)*(x377)))+(((IkReal(-1.00000000000000))*(x378))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x379=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x380=((IkReal(1.00000000000000))*(cj5));
IkReal x381=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x379;
evalcond[2]=x379;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x381)))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r12)*(x380)))+(((IkReal(-1.00000000000000))*(new_r22)*(x381))));
evalcond[9]=((((new_r10)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r20)*(x380))));
evalcond[10]=((((new_r11)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r21)*(x380))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x380))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x382=IKsin(j6);
IkReal x383=IKcos(j6);
IkReal x384=((IkReal(1.00000000000000))*(sj5));
IkReal x385=((IkReal(1.00000000000000))*(new_r11));
IkReal x386=((IkReal(1.00000000000000))*(new_r10));
IkReal x387=((IkReal(1.00000000000000))*(x383));
evalcond[0]=((((sj5)*(x383)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x382)*(x384))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x382)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x387)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x385)))+(((cj5)*(x382))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x387)))+(((IkReal(-1.00000000000000))*(x386))));
evalcond[6]=((x382)+(((IkReal(-1.00000000000000))*(new_r21)*(x384)))+(((IkReal(-1.00000000000000))*(cj5)*(x385))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x384)))+(((IkReal(-1.00000000000000))*(cj5)*(x386)))+(((IkReal(-1.00000000000000))*(x387))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x388=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x388;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x388;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x389=IKcos(j6);
IkReal x390=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x389)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x390)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x390)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x389)))+(new_r11));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x391=IKcos(j6);
IkReal x392=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x391)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x392)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x392)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x391)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x393=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x393;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x393;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x393;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x394=IKsin(j6);
IkReal x395=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x395)))+(new_r20));
evalcond[1]=((x394)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x394)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x395)))+(new_r11));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x396=IKsin(j6);
IkReal x397=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x397)))+(new_r20));
evalcond[1]=((x396)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x397)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x398=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x398;
evalcond[2]=x398;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x399=IKsin(j6);
IkReal x400=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x399)))+(new_r10));
evalcond[1]=((new_r11)+(((IkReal(-1.00000000000000))*(x400))));
evalcond[2]=((x399)+(new_r01));
evalcond[3]=((new_r00)+(((IkReal(-1.00000000000000))*(x400))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x401=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x401;
evalcond[2]=x401;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x402=IKsin(j6);
IkReal x403=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x402))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x403))));
evalcond[2]=((x402)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x403))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x404=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x404;
evalcond[2]=x404;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x404;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x405=IKcos(j6);
IkReal x406=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((new_r10)+(((IkReal(-1.00000000000000))*(x406))));
evalcond[1]=((new_r11)+(((IkReal(-1.00000000000000))*(x405))));
evalcond[2]=((new_r01)+(((IkReal(-1.00000000000000))*(x406))));
evalcond[3]=((x405)+(new_r00));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x407=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x407;
evalcond[2]=x407;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x407;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x408=IKcos(j6);
IkReal x409=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x409))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x408))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x409))));
evalcond[3]=((x408)+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x410=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x410)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x410))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x410)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x410)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x410)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x410)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x411=IKsin(j6);
IkReal x412=IKcos(j6);
IkReal x413=((IkReal(1.00000000000000))*(sj5));
IkReal x414=((IkReal(1.00000000000000))*(sj4));
IkReal x415=((cj5)*(sj4));
IkReal x416=((cj4)*(new_r01));
IkReal x417=((cj4)*(new_r00));
IkReal x418=((IkReal(1.00000000000000))*(x412));
IkReal x419=((cj5)*(x411));
IkReal x420=((IkReal(1.00000000000000))*(x411));
evalcond[0]=((((sj5)*(x412)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x411)*(x413)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(new_r00)*(x414))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(new_r01)*(x414))));
evalcond[4]=((((new_r11)*(sj4)))+(x416)+(x419));
evalcond[5]=((((cj4)*(x419)))+(new_r01)+(((sj4)*(x412))));
evalcond[6]=((((new_r10)*(sj4)))+(x417)+(((IkReal(-1.00000000000000))*(cj5)*(x418))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x418)))+(new_r00)+(((sj4)*(x411))));
evalcond[8]=((((x411)*(x415)))+(((IkReal(-1.00000000000000))*(cj4)*(x418)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x412)*(x414)))+(((IkReal(-1.00000000000000))*(cj4)*(x420)))+(new_r10));
evalcond[10]=((((cj5)*(x416)))+(x411)+(((IkReal(-1.00000000000000))*(new_r21)*(x413)))+(((new_r11)*(x415))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x413)))+(((cj5)*(x417)))+(((new_r10)*(x415)))+(((IkReal(-1.00000000000000))*(x418))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x421=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x421)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x421))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x421)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x421)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x421)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x421)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x422=IKsin(j6);
IkReal x423=IKcos(j6);
IkReal x424=((IkReal(1.00000000000000))*(sj5));
IkReal x425=((IkReal(1.00000000000000))*(sj4));
IkReal x426=((cj5)*(sj4));
IkReal x427=((cj4)*(new_r01));
IkReal x428=((cj4)*(new_r00));
IkReal x429=((IkReal(1.00000000000000))*(x423));
IkReal x430=((cj5)*(x422));
IkReal x431=((IkReal(1.00000000000000))*(x422));
evalcond[0]=((((sj5)*(x423)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x422)*(x424)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(new_r00)*(x425)))+(((cj4)*(new_r10))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x429)))+(((IkReal(-1.00000000000000))*(new_r01)*(x425))));
evalcond[4]=((((new_r11)*(sj4)))+(x427)+(x430));
evalcond[5]=((((sj4)*(x423)))+(((cj4)*(x430)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(x428)+(((IkReal(-1.00000000000000))*(cj5)*(x429))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x429)))+(((sj4)*(x422)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj4)*(x429)))+(new_r11)+(((x422)*(x426))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj4)*(x431)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj5)*(x423)*(x425))));
evalcond[10]=((((cj5)*(x427)))+(((new_r11)*(x426)))+(x422)+(((IkReal(-1.00000000000000))*(new_r21)*(x424))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x429)))+(((cj5)*(x428)))+(((new_r10)*(x426)))+(((IkReal(-1.00000000000000))*(new_r20)*(x424))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst59)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst59)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst59)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst59)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x432=IKsin(j6);
IkReal x433=IKcos(j6);
IkReal x434=((IkReal(1.00000000000000))*(sj5));
IkReal x435=((IkReal(1.00000000000000))*(sj4));
IkReal x436=((cj5)*(sj4));
IkReal x437=((cj4)*(new_r01));
IkReal x438=((cj4)*(new_r00));
IkReal x439=((IkReal(1.00000000000000))*(x433));
IkReal x440=((cj5)*(x432));
IkReal x441=((IkReal(1.00000000000000))*(x432));
evalcond[0]=((new_r20)+(((sj5)*(x433))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x432)*(x434)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x435)))+(((IkReal(-1.00000000000000))*(x441)))+(((cj4)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x439)))+(((IkReal(-1.00000000000000))*(new_r01)*(x435)))+(((cj4)*(new_r11))));
evalcond[4]=((((new_r11)*(sj4)))+(x437)+(x440));
evalcond[5]=((((sj4)*(x433)))+(((cj4)*(x440)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(cj5)*(x439)))+(x438));
evalcond[7]=((((sj4)*(x432)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x439))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj4)*(x439)))+(new_r11)+(((x432)*(x436))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x433)*(x435)))+(((IkReal(-1.00000000000000))*(cj4)*(x441)))+(new_r10));
evalcond[10]=((((cj5)*(x437)))+(((new_r11)*(x436)))+(x432)+(((IkReal(-1.00000000000000))*(new_r21)*(x434))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x439)))+(((cj5)*(x438)))+(((new_r10)*(x436)))+(((IkReal(-1.00000000000000))*(new_r20)*(x434))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
