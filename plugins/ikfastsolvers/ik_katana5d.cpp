#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2012-10-29 02:34:11.329516
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.139000000000000))*(x3));
x11=((IkReal(0.273000000000000))*(x0));
x12=((IkReal(0.273000000000000))*(x6));
x13=((IkReal(1.00000000000000))*(x5));
x14=((IkReal(1.00000000000000))*(x7));
x15=((IkReal(0.190000000000000))*(x1));
x16=((x0)*(x2));
x17=((x1)*(x3));
x18=((x2)*(x4));
x19=((x1)*(x4));
x20=((x2)*(x3));
eetrans[0]=((((IkReal(0.139000000000000))*(x0)*(x19)))+(((x0)*(x15)))+(((x7)*(((((x11)*(x20)))+(((x11)*(x19)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x11)*(x18)))+(((x11)*(x17)))))))+(((x10)*(x16))));
IkReal x21=((IkReal(1.00000000000000))*(x6));
IkReal x22=((IkReal(1.00000000000000))*(x12));
eetrans[1]=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x22)))+(((x12)*(x18)))))))+(((IkReal(-0.139000000000000))*(x19)*(x6)))+(((IkReal(-1.00000000000000))*(x10)*(x2)*(x21)))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x22)))+(((IkReal(-1.00000000000000))*(x20)*(x22)))))))+(((IkReal(-1.00000000000000))*(x15)*(x21))));
eetrans[2]=((IkReal(0.201500000000000))+(((x7)*(((((IkReal(-0.273000000000000))*(x17)))+(((IkReal(0.273000000000000))*(x18)))))))+(((IkReal(-1.00000000000000))*(x1)*(x10)))+(((IkReal(0.190000000000000))*(x2)))+(((IkReal(0.139000000000000))*(x18)))+(((x5)*(((((IkReal(0.273000000000000))*(x20)))+(((IkReal(0.273000000000000))*(x19))))))));
eerot[0]=((((x9)*(((((x7)*(((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((x16)*(x4)))))))+(((x5)*(((((x0)*(x19)))+(((x16)*(x3)))))))))))+(((x6)*(x8))));
eerot[1]=((((x0)*(x8)))+(((IkReal(-1.00000000000000))*(x9)*(((((x14)*(((((x18)*(x6)))+(((IkReal(-1.00000000000000))*(x17)*(x6)))))))+(((x13)*(((((x19)*(x6)))+(((x20)*(x6))))))))))));
eerot[2]=((IkReal(-1.00000000000000))*(x9)*(((((x13)*(((((IkReal(-1.00000000000000))*(x18)))+(x17)))))+(((x14)*(((x19)+(x20))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((IkReal(-1.00000000000000))*(r01));
new_py=((IkReal(-1.00000000000000))*(py));
new_r02=((IkReal(-1.00000000000000))*(r02));
new_pz=((IkReal(0.201500000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x23=IKatan2(((IkReal(-1.00000000000000))*(py)), px);
j0array[0]=((IkReal(-1.00000000000000))*(x23));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x23))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x24=(r00)*(r00);
IkReal x25=(pz)*(pz);
IkReal x26=(r01)*(r01);
IkReal x27=(r02)*(r02);
IkReal x28=(py)*(py);
IkReal x29=(px)*(px);
IkReal x30=(pz)*(pz)*(pz);
IkReal x31=((r02)*(sj0));
IkReal x32=((IkReal(3.04000000000000))*(cj0));
IkReal x33=((IkReal(0.577600000000000))*(py));
IkReal x34=((px)*(r00));
IkReal x35=((pz)*(r00));
IkReal x36=((IkReal(3.04000000000000))*(py));
IkReal x37=((pz)*(r01));
IkReal x38=((cj0)*(r01));
IkReal x39=((pp)*(r01));
IkReal x40=((IkReal(0.577600000000000))*(cj0));
IkReal x41=((IkReal(1.52000000000000))*(sj0));
IkReal x42=((py)*(r00));
IkReal x43=((r01)*(sj0));
IkReal x44=((pp)*(py));
IkReal x45=((IkReal(1.52000000000000))*(pp));
IkReal x46=((r00)*(r02));
IkReal x47=((px)*(r02));
IkReal x48=((px)*(x24));
IkReal x49=((r02)*(x29));
IkReal x50=((sj0)*(x26));
IkReal x51=((r01)*(x25));
IkReal x52=((sj0)*(x27));
IkReal x53=((IkReal(0.0430479504000000))*(cj0)*(x46));
IkReal x54=((IkReal(0.0430479504000000))*(r01)*(x31));
IkReal x55=((x40)*(x46));
IkReal x56=((cj0)*(px)*(x27));
IkReal x57=((IkReal(0.138788160000000))*(py)*(x50));
IkReal x58=((IkReal(0.226568160000000))*(cj0)*(r02)*(x35));
IkReal x59=((IkReal(0.226568160000000))*(x31)*(x37));
IkReal x60=((IkReal(0.138788160000000))*(x34)*(x43));
IkReal x61=((IkReal(0.138788160000000))*(cj0)*(x48));
IkReal x62=((IkReal(0.138788160000000))*(x38)*(x42));
IkReal x63=((IkReal(0.0877800000000000))*(x56));
IkReal x64=((IkReal(0.0877800000000000))*(py)*(x52));
IkReal x65=((IkReal(0.577600000000000))*(x31)*(x39));
IkReal x66=((pp)*(x55));
IkReal x67=((px)*(pz)*(x27)*(x40));
IkReal x68=((IkReal(0.577600000000000))*(x31)*(x51));
IkReal x69=((x45)*(x56));
IkReal x70=((x32)*(x48)*((px)*(px)));
IkReal x71=((pz)*(x33)*(x52));
IkReal x72=((x33)*(x35)*(x38));
IkReal x73=((x29)*(x55));
IkReal x74=((pz)*(x40)*(x48));
IkReal x75=((IkReal(0.577600000000000))*(r01)*(x28)*(x31));
IkReal x76=((pz)*(x33)*(x50));
IkReal x77=((x27)*(x41)*(x44));
IkReal x78=((x25)*(x55));
IkReal x79=((x33)*(x38)*(x47));
IkReal x80=((x36)*(x50)*((py)*(py)));
IkReal x81=((IkReal(3.04000000000000))*(r01)*(x30)*(x31));
IkReal x82=((x31)*(x33)*(x34));
IkReal x83=((IkReal(0.577600000000000))*(sj0)*(x34)*(x37));
IkReal x84=((x30)*(x32)*(x46));
IkReal x85=((cj0)*(x45)*(x48));
IkReal x86=((IkReal(3.04000000000000))*(pp)*(x31)*(x37));
IkReal x87=((x26)*(x41)*(x44));
IkReal x88=((pp)*(r02)*(x32)*(x35));
IkReal x89=((x34)*(x39)*(x41));
IkReal x90=((x38)*(x42)*(x45));
IkReal x91=((IkReal(3.04000000000000))*(x28)*(x31)*(x37));
IkReal x92=((pz)*(x31)*(x34)*(x36));
IkReal x93=((x25)*(x32)*(x48));
IkReal x94=((py)*(x32)*(x37)*(x47));
IkReal x95=((IkReal(3.04000000000000))*(x25)*(x34)*(x43));
IkReal x96=((x32)*(x42)*(x51));
IkReal x97=((x32)*(x35)*(x49));
IkReal x98=((x25)*(x36)*(x50));
IkReal x99=((px)*(x26)*(x28)*(x32));
IkReal x100=((sj0)*(x24)*(x29)*(x36));
IkReal x101=((IkReal(6.08000000000000))*(x29)*(x38)*(x42));
IkReal x102=((IkReal(6.08000000000000))*(x28)*(x34)*(x43));
IkReal x103=((x65)+(x66));
IkReal x104=((x63)+(x64)+(x88)+(x89)+(x86)+(x87)+(x85)+(x90));
IkReal x105=((x76)+(x75)+(x74)+(x73)+(x72)+(x71)+(x79)+(x78)+(x54)+(x53)+(x67)+(x68)+(x82)+(x83));
IkReal x106=((x100)+(x101)+(x102)+(x77)+(x70)+(x59)+(x58)+(x57)+(x60)+(x61)+(x62)+(x69)+(x80)+(x81)+(x84)+(x99)+(x98)+(x91)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
op[0]=((((IkReal(-0.0877800000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.0764320000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.00833715086400000))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(0.0438900000000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.00242483673600000))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0438900000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.182616000000000))*(pp)*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.654032000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0382160000000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.0578000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-1.52000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.00242483673600000))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.0578000000000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-1.52000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(0.0693940800000000))*(pz)*((r02)*(r02))))+(((IkReal(-0.0764320000000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.654032000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(1.52000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0438900000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.0438900000000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.0578000000000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.0438900000000000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0438900000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-1.52000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.0693940800000000))*(px)*(r00)*(r02)))+(((IkReal(-0.760000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(0.760000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-0.760000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.288800000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0578000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.00484967347200000))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.509632000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0382160000000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(0.0693940800000000))*(py)*(r01)*(r02))));
op[1]=((((IkReal(-1.00000000000000))*(x105)))+(((IkReal(-1.00000000000000))*(x104)))+(x106)+(x103));
op[2]=((((IkReal(8.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.30806400000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-0.212368000000000))*(pp)*((r02)*(r02))))+(((IkReal(-0.268464000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.134232000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-32.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.654032000000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.0381982769280000))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.30806400000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.288800000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-2.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.134232000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(0.0263736486720000))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-1.03960000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.30806400000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-16.0000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-8.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.134232000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-1.03960000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.152864000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-2.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-1.30806400000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.135936000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.152864000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.0381982769280000))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-1.30806400000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-8.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-32.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.0763965538560000))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-32.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(1.30806400000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-16.0000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-16.0000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.288800000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(8.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-0.577600000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-1.30806400000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(8.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-16.0000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.654032000000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-1.30806400000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-1.03960000000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.134232000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-8.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.268464000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-8.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-1.03960000000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-1.30806400000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02))));
op[3]=((((IkReal(-1.00000000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x103)))+(x105)+(x106));
op[4]=((((IkReal(-0.0438900000000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(1.52000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(0.0764320000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.00833715086400000))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.0438900000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0693940800000000))*(pz)*((r02)*(r02))))+(((IkReal(-0.0764320000000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.00242483673600000))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.182616000000000))*(pp)*((r02)*(r02))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.654032000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-1.52000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0382160000000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(0.760000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0438900000000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(0.760000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.0438900000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-1.52000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.52000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(0.0578000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(0.00242483673600000))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.0578000000000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0693940800000000))*(px)*(r00)*(r02)))+(((IkReal(-8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.760000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0764320000000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.654032000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.760000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0693940800000000))*(py)*(r01)*(r02)))+(((IkReal(4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(0.0578000000000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.0877800000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.0438900000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0438900000000000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-1.52000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.288800000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0578000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.00484967347200000))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.509632000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0382160000000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py)))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x107=(pz)*(pz);
IkReal x108=(py)*(py);
IkReal x109=(px)*(px);
IkReal x110=((r01)*(sj0));
IkReal x111=((IkReal(0.190000000000000))*(cj1));
IkReal x112=((pp)*(sj1));
IkReal x113=((IkReal(1.00000000000000))*(r02));
IkReal x114=((IkReal(0.380000000000000))*(pz));
IkReal x115=((IkReal(1.00000000000000))*(pz));
IkReal x116=((py)*(r01));
IkReal x117=((px)*(sj0));
IkReal x118=((cj0)*(r00));
IkReal x119=((IkReal(1.00000000000000))*(cj1));
IkReal x120=((IkReal(0.0361000000000000))*(sj1));
IkReal x121=((IkReal(2.00000000000000))*(sj1));
IkReal x122=((IkReal(0.0361000000000000))*(cj1));
IkReal x123=((IkReal(2.00000000000000))*(cj1));
IkReal x124=((py)*(r00));
IkReal x125=((IkReal(0.190000000000000))*(sj1));
IkReal x126=((cj0)*(px));
IkReal x127=((px)*(r00));
IkReal x128=((py)*(r02)*(sj0));
IkReal x129=((pz)*(x123));
IkReal x130=((r02)*(x126));
IkReal x131=((pz)*(x121));
IkReal x132=((r02)*(x107));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x117)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x110)))+(((sj1)*(x118)))+(((IkReal(-1.00000000000000))*(cj1)*(x113))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj1)*(x113)))+(((IkReal(-1.00000000000000))*(x118)*(x119)))+(((IkReal(-1.00000000000000))*(x110)*(x119))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r02)*(x111)))+(((IkReal(-1.00000000000000))*(x127)))+(((IkReal(-1.00000000000000))*(x116)))+(((x118)*(x125)))+(((x110)*(x125)))+(((IkReal(-1.00000000000000))*(pz)*(x113))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x111)*(x118)))+(((IkReal(-1.00000000000000))*(x115)*(x118)))+(((IkReal(-1.00000000000000))*(x110)*(x115)))+(((IkReal(-1.00000000000000))*(x110)*(x111)))+(x130)+(x128)+(((IkReal(-1.00000000000000))*(r02)*(x125))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x118)*(x120)))+(((x110)*(x112)))+(((r02)*(x114)))+(((IkReal(-1.00000000000000))*(x117)*(x121)*(x124)))+(((x112)*(x118)))+(((IkReal(-1.00000000000000))*(x110)*(x120)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x113)))+(((r02)*(x122)))+(((IkReal(-1.00000000000000))*(x128)*(x131)))+(((x123)*(x132)))+(((IkReal(-1.00000000000000))*(x108)*(x110)*(x121)))+(((x116)*(x129)))+(((IkReal(-1.00000000000000))*(x116)*(x121)*(x126)))+(((IkReal(-1.00000000000000))*(x109)*(x118)*(x121)))+(((IkReal(0.380000000000000))*(x116)))+(((IkReal(-1.00000000000000))*(x130)*(x131)))+(((x127)*(x129)))+(((IkReal(0.380000000000000))*(x127))));
evalcond[8]=((((IkReal(-1.00000000000000))*(pp)*(x110)*(x119)))+(((x127)*(x131)))+(((IkReal(0.380000000000000))*(x130)))+(((IkReal(-1.00000000000000))*(x118)*(x122)))+(((x121)*(x132)))+(((IkReal(-1.00000000000000))*(x112)*(x113)))+(((IkReal(-1.00000000000000))*(pp)*(x118)*(x119)))+(((x116)*(x123)*(x126)))+(((IkReal(-1.00000000000000))*(x110)*(x122)))+(((x129)*(x130)))+(((x117)*(x123)*(x124)))+(((x108)*(x110)*(x123)))+(((x109)*(x118)*(x123)))+(((IkReal(-1.00000000000000))*(x110)*(x114)))+(((IkReal(-1.00000000000000))*(r02)*(x120)))+(((IkReal(-1.00000000000000))*(x114)*(x118)))+(((x116)*(x131)))+(((x128)*(x129)))+(((IkReal(0.380000000000000))*(x128))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x133=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x133)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x133))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x134=((px)*(sj0));
IkReal x135=((IkReal(2.00000000000000))*(py));
IkReal x136=((IkReal(0.380000000000000))*(cj1));
IkReal x137=((cj0)*(r01));
IkReal x138=((pz)*(r02));
IkReal x139=((r00)*(sj0));
IkReal x140=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(0.0938500000000000))+(((IkReal(0.0361000000000000))*(x137)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x136)))+(((IkReal(-0.0361000000000000))*(x139)))+(((IkReal(-1.00000000000000))*(py)*(x135)*(x137)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x134)))+(((r01)*(x134)*(x135)))+(((pp)*(x137)))+(((IkReal(2.00000000000000))*(x134)*(x138)))+(((r02)*(x134)*(x136)))+(((pz)*(x136)*(x137)))+(((py)*(r00)*(x140)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x135)))+(((IkReal(-1.00000000000000))*(pp)*(x139)))+(((IkReal(-1.00000000000000))*(cj0)*(x135)*(x138)))+(((IkReal(0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x140)))+(((IkReal(-1.00000000000000))*(pz)*(x136)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x141=((cj1)*(py));
IkReal x142=((pz)*(sj1));
IkReal x143=((IkReal(139000.000000000))*(sj0));
IkReal x144=((IkReal(273000.000000000))*(cj3));
IkReal x145=((py)*(sj1));
IkReal x146=((IkReal(273000.000000000))*(sj3));
IkReal x147=((cj1)*(pz));
IkReal x148=((IkReal(139000.000000000))*(r01));
IkReal x149=((cj0)*(r02));
IkReal x150=((cj1)*(px));
IkReal x151=((r00)*(x146));
IkReal x152=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x153=((px)*(r02)*(sj1));
IkReal x154=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
if( IKabs(((gconst8)*(((((r00)*(x141)*(x144)))+(((IkReal(-1.00000000000000))*(x143)*(x153)))+(((sj0)*(x145)*(x146)))+(((IkReal(-1.00000000000000))*(sj0)*(x144)*(x153)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x144)*(x150)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x142)*(x144)))+(((IkReal(-1.00000000000000))*(x148)*(x150)))+(((cj0)*(px)*(sj1)*(x146)))+(((IkReal(-1.00000000000000))*(x146)*(x147)))+(((IkReal(139000.000000000))*(x145)*(x149)))+(((IkReal(-1.00000000000000))*(cj0)*(x142)*(x148)))+(((r00)*(sj0)*(x142)*(x144)))+(((r00)*(x142)*(x143)))+(((x144)*(x145)*(x149)))+(((IkReal(139000.000000000))*(r00)*(x141))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((IkReal(-26410.0000000000))+(((r01)*(x146)*(x150)))+(((sj0)*(x144)*(x145)))+(((IkReal(-1.00000000000000))*(x144)*(x147)))+(((cj0)*(r01)*(x142)*(x146)))+(((IkReal(-1.00000000000000))*(sj0)*(x142)*(x151)))+(((IkReal(139000.000000000))*(cj0)*(px)*(sj1)))+(((IkReal(-1.00000000000000))*(x141)*(x151)))+(((sj0)*(x146)*(x153)))+(((IkReal(-139000.000000000))*(x147)))+(((cj0)*(px)*(sj1)*(x144)))+(((IkReal(-1.00000000000000))*(x145)*(x146)*(x149)))+(((IkReal(-51870.0000000000))*(cj3)))+(((x143)*(x145))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst8)*(((((r00)*(x141)*(x144)))+(((IkReal(-1.00000000000000))*(x143)*(x153)))+(((sj0)*(x145)*(x146)))+(((IkReal(-1.00000000000000))*(sj0)*(x144)*(x153)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x144)*(x150)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x142)*(x144)))+(((IkReal(-1.00000000000000))*(x148)*(x150)))+(((cj0)*(px)*(sj1)*(x146)))+(((IkReal(-1.00000000000000))*(x146)*(x147)))+(((IkReal(139000.000000000))*(x145)*(x149)))+(((IkReal(-1.00000000000000))*(cj0)*(x142)*(x148)))+(((r00)*(sj0)*(x142)*(x144)))+(((r00)*(x142)*(x143)))+(((x144)*(x145)*(x149)))+(((IkReal(139000.000000000))*(r00)*(x141)))))), ((gconst8)*(((IkReal(-26410.0000000000))+(((r01)*(x146)*(x150)))+(((sj0)*(x144)*(x145)))+(((IkReal(-1.00000000000000))*(x144)*(x147)))+(((cj0)*(r01)*(x142)*(x146)))+(((IkReal(-1.00000000000000))*(sj0)*(x142)*(x151)))+(((IkReal(139000.000000000))*(cj0)*(px)*(sj1)))+(((IkReal(-1.00000000000000))*(x141)*(x151)))+(((sj0)*(x146)*(x153)))+(((IkReal(-139000.000000000))*(x147)))+(((cj0)*(px)*(sj1)*(x144)))+(((IkReal(-1.00000000000000))*(x145)*(x146)*(x149)))+(((IkReal(-51870.0000000000))*(cj3)))+(((x143)*(x145)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x155=IKcos(j2);
IkReal x156=IKsin(j2);
IkReal x157=((px)*(sj1));
IkReal x158=((IkReal(0.273000000000000))*(cj3));
IkReal x159=((py)*(sj1));
IkReal x160=((IkReal(1.00000000000000))*(r00));
IkReal x161=((cj1)*(sj0));
IkReal x162=((IkReal(1.00000000000000))*(px));
IkReal x163=((IkReal(1.00000000000000))*(pz));
IkReal x164=((cj0)*(r01));
IkReal x165=((pz)*(sj1));
IkReal x166=((IkReal(0.273000000000000))*(sj3));
IkReal x167=((cj0)*(cj1));
IkReal x168=((IkReal(0.139000000000000))*(x156));
IkReal x169=((IkReal(0.139000000000000))*(x155));
IkReal x170=((x156)*(x158));
IkReal x171=((x155)*(x166));
IkReal x172=((x156)*(x166));
IkReal x173=((x155)*(x158));
IkReal x174=((x170)+(x168));
IkReal x175=((x173)+(x172)+(x169));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x157)))+(((IkReal(-1.00000000000000))*(x175)))+(((sj0)*(x159)))+(((IkReal(-1.00000000000000))*(cj1)*(x163))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(py)*(x161)))+(x174)+(((IkReal(-1.00000000000000))*(x162)*(x167)))+(((IkReal(-1.00000000000000))*(sj1)*(x163))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x160)))+(x174)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x159)))+(((r02)*(sj0)*(x157)))+(((x164)*(x165)))+(((IkReal(-1.00000000000000))*(sj0)*(x160)*(x165)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x163)*(x164)))+(((pz)*(r00)*(x161)))+(((IkReal(-1.00000000000000))*(x159)*(x160)))+(((r01)*(x157)))+(((IkReal(-0.190000000000000))*(x164)))+(x175)+(((py)*(r02)*(x167)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x161)*(x162))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x176=((IkReal(139000.000000000))*(cj1));
IkReal x177=((py)*(sj0));
IkReal x178=((cj0)*(px));
IkReal x179=((IkReal(273000.000000000))*(cj3));
IkReal x180=((IkReal(139000.000000000))*(sj1));
IkReal x181=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x182=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x179)))+(((pz)*(x181)))+(((IkReal(-1.00000000000000))*(x178)*(x182)))+(((IkReal(-1.00000000000000))*(cj1)*(x178)*(x179)))+(((IkReal(-1.00000000000000))*(pz)*(x180)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x177)*(x179)))+(((IkReal(-1.00000000000000))*(x177)*(x182)))+(((IkReal(-1.00000000000000))*(x176)*(x177)))+(((IkReal(-1.00000000000000))*(x176)*(x178))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((IkReal(26410.0000000000))+(((x177)*(x181)))+(((pz)*(x176)))+(((pz)*(x182)))+(((IkReal(-1.00000000000000))*(x178)*(x180)))+(((x178)*(x181)))+(((cj1)*(pz)*(x179)))+(((IkReal(-1.00000000000000))*(x177)*(x180)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x178)*(x179)))+(((IkReal(-1.00000000000000))*(sj1)*(x177)*(x179))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x179)))+(((pz)*(x181)))+(((IkReal(-1.00000000000000))*(x178)*(x182)))+(((IkReal(-1.00000000000000))*(cj1)*(x178)*(x179)))+(((IkReal(-1.00000000000000))*(pz)*(x180)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x177)*(x179)))+(((IkReal(-1.00000000000000))*(x177)*(x182)))+(((IkReal(-1.00000000000000))*(x176)*(x177)))+(((IkReal(-1.00000000000000))*(x176)*(x178)))))), ((gconst7)*(((IkReal(26410.0000000000))+(((x177)*(x181)))+(((pz)*(x176)))+(((pz)*(x182)))+(((IkReal(-1.00000000000000))*(x178)*(x180)))+(((x178)*(x181)))+(((cj1)*(pz)*(x179)))+(((IkReal(-1.00000000000000))*(x177)*(x180)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x178)*(x179)))+(((IkReal(-1.00000000000000))*(sj1)*(x177)*(x179)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x183=IKcos(j2);
IkReal x184=IKsin(j2);
IkReal x185=((px)*(sj1));
IkReal x186=((IkReal(0.273000000000000))*(cj3));
IkReal x187=((py)*(sj1));
IkReal x188=((IkReal(1.00000000000000))*(r00));
IkReal x189=((cj1)*(sj0));
IkReal x190=((IkReal(1.00000000000000))*(px));
IkReal x191=((IkReal(1.00000000000000))*(pz));
IkReal x192=((cj0)*(r01));
IkReal x193=((pz)*(sj1));
IkReal x194=((IkReal(0.273000000000000))*(sj3));
IkReal x195=((cj0)*(cj1));
IkReal x196=((IkReal(0.139000000000000))*(x184));
IkReal x197=((IkReal(0.139000000000000))*(x183));
IkReal x198=((x184)*(x186));
IkReal x199=((x183)*(x194));
IkReal x200=((x184)*(x194));
IkReal x201=((x183)*(x186));
IkReal x202=((x198)+(x196));
IkReal x203=((x197)+(x201)+(x200));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x185)))+(((sj0)*(x187)))+(((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(cj1)*(x191))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x190)*(x195)))+(((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(py)*(x189)))+(x202)+(((IkReal(-1.00000000000000))*(sj1)*(x191))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x188)))+(((IkReal(-1.00000000000000))*(x199)))+(((r02)*(sj0)*(x185)))+(x202)+(((x192)*(x193)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x187)))+(((IkReal(-1.00000000000000))*(sj0)*(x188)*(x193)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x189)*(x190)))+(((r01)*(x185)))+(((IkReal(-1.00000000000000))*(x187)*(x188)))+(((IkReal(-0.190000000000000))*(x192)))+(x203)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x195)))+(((IkReal(-1.00000000000000))*(cj1)*(x191)*(x192)))+(((pz)*(r00)*(x189))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x204=(pz)*(pz);
IkReal x205=(py)*(py);
IkReal x206=(px)*(px);
IkReal x207=((r01)*(sj0));
IkReal x208=((IkReal(0.190000000000000))*(cj1));
IkReal x209=((pp)*(sj1));
IkReal x210=((IkReal(1.00000000000000))*(r02));
IkReal x211=((IkReal(0.380000000000000))*(pz));
IkReal x212=((IkReal(1.00000000000000))*(pz));
IkReal x213=((py)*(r01));
IkReal x214=((px)*(sj0));
IkReal x215=((cj0)*(r00));
IkReal x216=((IkReal(1.00000000000000))*(cj1));
IkReal x217=((IkReal(0.0361000000000000))*(sj1));
IkReal x218=((IkReal(2.00000000000000))*(sj1));
IkReal x219=((IkReal(0.0361000000000000))*(cj1));
IkReal x220=((IkReal(2.00000000000000))*(cj1));
IkReal x221=((py)*(r00));
IkReal x222=((IkReal(0.190000000000000))*(sj1));
IkReal x223=((cj0)*(px));
IkReal x224=((px)*(r00));
IkReal x225=((py)*(r02)*(sj0));
IkReal x226=((pz)*(x220));
IkReal x227=((r02)*(x223));
IkReal x228=((pz)*(x218));
IkReal x229=((r02)*(x204));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x214)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x207)))+(((IkReal(-1.00000000000000))*(cj1)*(x210)))+(((sj1)*(x215))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x207)*(x216)))+(((IkReal(-1.00000000000000))*(sj1)*(x210)))+(((IkReal(-1.00000000000000))*(x215)*(x216))));
evalcond[5]=((((IkReal(-1.00000000000000))*(pz)*(x210)))+(((x207)*(x222)))+(((x215)*(x222)))+(((IkReal(-1.00000000000000))*(r02)*(x208)))+(((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(x224))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r02)*(x222)))+(((IkReal(-1.00000000000000))*(x207)*(x212)))+(((IkReal(-1.00000000000000))*(x207)*(x208)))+(x225)+(x227)+(((IkReal(-1.00000000000000))*(x212)*(x215)))+(((IkReal(-1.00000000000000))*(x208)*(x215))));
evalcond[7]=((((x224)*(x226)))+(((IkReal(-1.00000000000000))*(x213)*(x218)*(x223)))+(((IkReal(-1.00000000000000))*(x214)*(x218)*(x221)))+(((IkReal(-1.00000000000000))*(x227)*(x228)))+(((IkReal(-1.00000000000000))*(x225)*(x228)))+(((IkReal(-1.00000000000000))*(x207)*(x217)))+(((x213)*(x226)))+(((IkReal(-1.00000000000000))*(x206)*(x215)*(x218)))+(((IkReal(0.380000000000000))*(x224)))+(((x209)*(x215)))+(((x220)*(x229)))+(((IkReal(-1.00000000000000))*(x205)*(x207)*(x218)))+(((r02)*(x211)))+(((r02)*(x219)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x210)))+(((IkReal(0.380000000000000))*(x213)))+(((x207)*(x209)))+(((IkReal(-1.00000000000000))*(x215)*(x217))));
evalcond[8]=((((x214)*(x220)*(x221)))+(((x224)*(x228)))+(((x225)*(x226)))+(((IkReal(-1.00000000000000))*(pp)*(x215)*(x216)))+(((IkReal(-1.00000000000000))*(x207)*(x219)))+(((IkReal(-1.00000000000000))*(x207)*(x211)))+(((x213)*(x228)))+(((IkReal(0.380000000000000))*(x227)))+(((IkReal(0.380000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(pp)*(x207)*(x216)))+(((x206)*(x215)*(x220)))+(((x218)*(x229)))+(((IkReal(-1.00000000000000))*(x211)*(x215)))+(((x226)*(x227)))+(((IkReal(-1.00000000000000))*(r02)*(x217)))+(((IkReal(-1.00000000000000))*(x209)*(x210)))+(((x205)*(x207)*(x220)))+(((IkReal(-1.00000000000000))*(x215)*(x219)))+(((x213)*(x220)*(x223))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x230=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x230)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x230))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x231=((px)*(sj0));
IkReal x232=((IkReal(2.00000000000000))*(py));
IkReal x233=((IkReal(0.380000000000000))*(cj1));
IkReal x234=((cj0)*(r01));
IkReal x235=((pz)*(r02));
IkReal x236=((r00)*(sj0));
IkReal x237=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(-0.0938500000000000))+(((py)*(r00)*(x237)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x231)))+(((r01)*(x231)*(x232)))+(((pp)*(x234)))+(((pz)*(x233)*(x234)))+(((IkReal(-0.0361000000000000))*(x236)))+(((IkReal(0.0361000000000000))*(x234)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x237)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x232)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x233)))+(((r02)*(x231)*(x233)))+(((IkReal(-1.00000000000000))*(py)*(x232)*(x234)))+(((IkReal(-1.00000000000000))*(pz)*(x233)*(x236)))+(((IkReal(-1.00000000000000))*(pp)*(x236)))+(((IkReal(-0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(cj0)*(x232)*(x235)))+(((IkReal(2.00000000000000))*(x231)*(x235))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x238=((IkReal(273000.000000000))*(sj3));
IkReal x239=((IkReal(273000.000000000))*(cj3));
IkReal x240=((pz)*(r00));
IkReal x241=((px)*(r02));
IkReal x242=((sj0)*(sj1));
IkReal x243=((cj1)*(pz));
IkReal x244=((cj1)*(py)*(r00));
IkReal x245=((IkReal(139000.000000000))*(x242));
IkReal x246=((cj0)*(px)*(sj1));
IkReal x247=((cj1)*(px)*(r01));
IkReal x248=((cj0)*(pz)*(r01)*(sj1));
IkReal x249=((cj0)*(py)*(r02)*(sj1));
if( IKabs(((gconst10)*(((((py)*(x238)*(x242)))+(((x238)*(x246)))+(((IkReal(-139000.000000000))*(x249)))+(((IkReal(-139000.000000000))*(x244)))+(((IkReal(139000.000000000))*(x248)))+(((IkReal(139000.000000000))*(x247)))+(((IkReal(-51870.0000000000))*(sj3)))+(((x239)*(x241)*(x242)))+(((x239)*(x247)))+(((x239)*(x248)))+(((x241)*(x245)))+(((IkReal(-1.00000000000000))*(x238)*(x243)))+(((IkReal(-1.00000000000000))*(x240)*(x245)))+(((IkReal(-1.00000000000000))*(x239)*(x244)))+(((IkReal(-1.00000000000000))*(x239)*(x249)))+(((IkReal(-1.00000000000000))*(x239)*(x240)*(x242))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x238)*(x241)*(x242)))+(((x238)*(x249)))+(((x238)*(x244)))+(((IkReal(-139000.000000000))*(x243)))+(((IkReal(139000.000000000))*(x246)))+(((py)*(x239)*(x242)))+(((x239)*(x246)))+(((IkReal(-1.00000000000000))*(x238)*(x248)))+(((IkReal(-1.00000000000000))*(x238)*(x247)))+(((py)*(x245)))+(((x238)*(x240)*(x242)))+(((IkReal(-1.00000000000000))*(x239)*(x243)))+(((IkReal(-51870.0000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst10)*(((((py)*(x238)*(x242)))+(((x238)*(x246)))+(((IkReal(-139000.000000000))*(x249)))+(((IkReal(-139000.000000000))*(x244)))+(((IkReal(139000.000000000))*(x248)))+(((IkReal(139000.000000000))*(x247)))+(((IkReal(-51870.0000000000))*(sj3)))+(((x239)*(x241)*(x242)))+(((x239)*(x247)))+(((x239)*(x248)))+(((x241)*(x245)))+(((IkReal(-1.00000000000000))*(x238)*(x243)))+(((IkReal(-1.00000000000000))*(x240)*(x245)))+(((IkReal(-1.00000000000000))*(x239)*(x244)))+(((IkReal(-1.00000000000000))*(x239)*(x249)))+(((IkReal(-1.00000000000000))*(x239)*(x240)*(x242)))))), ((gconst10)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x238)*(x241)*(x242)))+(((x238)*(x249)))+(((x238)*(x244)))+(((IkReal(-139000.000000000))*(x243)))+(((IkReal(139000.000000000))*(x246)))+(((py)*(x239)*(x242)))+(((x239)*(x246)))+(((IkReal(-1.00000000000000))*(x238)*(x248)))+(((IkReal(-1.00000000000000))*(x238)*(x247)))+(((py)*(x245)))+(((x238)*(x240)*(x242)))+(((IkReal(-1.00000000000000))*(x239)*(x243)))+(((IkReal(-51870.0000000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x250=IKcos(j2);
IkReal x251=IKsin(j2);
IkReal x252=((px)*(sj1));
IkReal x253=((IkReal(0.273000000000000))*(cj3));
IkReal x254=((py)*(sj1));
IkReal x255=((IkReal(1.00000000000000))*(r00));
IkReal x256=((cj1)*(sj0));
IkReal x257=((IkReal(1.00000000000000))*(px));
IkReal x258=((IkReal(1.00000000000000))*(pz));
IkReal x259=((cj0)*(r01));
IkReal x260=((pz)*(sj1));
IkReal x261=((IkReal(0.273000000000000))*(sj3));
IkReal x262=((cj0)*(cj1));
IkReal x263=((IkReal(0.139000000000000))*(x251));
IkReal x264=((IkReal(0.139000000000000))*(x250));
IkReal x265=((x250)*(x261));
IkReal x266=((x251)*(x253));
IkReal x267=((x251)*(x261));
IkReal x268=((x250)*(x253));
IkReal x269=((x266)+(x263));
IkReal x270=((x264)+(x267)+(x268));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x254)))+(((cj0)*(x252)))+(((IkReal(-1.00000000000000))*(cj1)*(x258)))+(((IkReal(-1.00000000000000))*(x270))));
evalcond[1]=((x269)+(((IkReal(-1.00000000000000))*(sj1)*(x258)))+(((IkReal(-1.00000000000000))*(py)*(x256)))+(((IkReal(-1.00000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(x257)*(x262))));
evalcond[2]=((((x259)*(x260)))+(((IkReal(-1.00000000000000))*(sj0)*(x255)*(x260)))+(x265)+(((r02)*(sj0)*(x252)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x255)))+(((IkReal(-1.00000000000000))*(x269)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x254))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x258)*(x259)))+(((IkReal(-0.190000000000000))*(x259)))+(((r01)*(x252)))+(((IkReal(-1.00000000000000))*(x254)*(x255)))+(((py)*(r02)*(x262)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x270)))+(((pz)*(r00)*(x256)))+(((IkReal(-1.00000000000000))*(r02)*(x256)*(x257))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x271=((IkReal(139000.000000000))*(cj1));
IkReal x272=((py)*(sj0));
IkReal x273=((cj0)*(px));
IkReal x274=((IkReal(273000.000000000))*(cj3));
IkReal x275=((IkReal(139000.000000000))*(sj1));
IkReal x276=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x277=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(x272)*(x277)))+(((IkReal(-1.00000000000000))*(pz)*(x275)))+(((IkReal(-1.00000000000000))*(x273)*(x277)))+(((IkReal(-1.00000000000000))*(x271)*(x272)))+(((IkReal(-1.00000000000000))*(x271)*(x273)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x273)*(x274)))+(((IkReal(-1.00000000000000))*(cj1)*(x272)*(x274)))+(((pz)*(x276)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x274))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((IkReal(26410.0000000000))+(((x272)*(x276)))+(((x273)*(x276)))+(((IkReal(-1.00000000000000))*(x272)*(x275)))+(((IkReal(-1.00000000000000))*(x273)*(x275)))+(((cj1)*(pz)*(x274)))+(((IkReal(-1.00000000000000))*(sj1)*(x273)*(x274)))+(((IkReal(-1.00000000000000))*(sj1)*(x272)*(x274)))+(((IkReal(51870.0000000000))*(cj3)))+(((pz)*(x271)))+(((pz)*(x277))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(x272)*(x277)))+(((IkReal(-1.00000000000000))*(pz)*(x275)))+(((IkReal(-1.00000000000000))*(x273)*(x277)))+(((IkReal(-1.00000000000000))*(x271)*(x272)))+(((IkReal(-1.00000000000000))*(x271)*(x273)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x273)*(x274)))+(((IkReal(-1.00000000000000))*(cj1)*(x272)*(x274)))+(((pz)*(x276)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x274)))))), ((gconst9)*(((IkReal(26410.0000000000))+(((x272)*(x276)))+(((x273)*(x276)))+(((IkReal(-1.00000000000000))*(x272)*(x275)))+(((IkReal(-1.00000000000000))*(x273)*(x275)))+(((cj1)*(pz)*(x274)))+(((IkReal(-1.00000000000000))*(sj1)*(x273)*(x274)))+(((IkReal(-1.00000000000000))*(sj1)*(x272)*(x274)))+(((IkReal(51870.0000000000))*(cj3)))+(((pz)*(x271)))+(((pz)*(x277)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x278=IKcos(j2);
IkReal x279=IKsin(j2);
IkReal x280=((px)*(sj1));
IkReal x281=((IkReal(0.273000000000000))*(cj3));
IkReal x282=((py)*(sj1));
IkReal x283=((IkReal(1.00000000000000))*(r00));
IkReal x284=((cj1)*(sj0));
IkReal x285=((IkReal(1.00000000000000))*(px));
IkReal x286=((IkReal(1.00000000000000))*(pz));
IkReal x287=((cj0)*(r01));
IkReal x288=((pz)*(sj1));
IkReal x289=((IkReal(0.273000000000000))*(sj3));
IkReal x290=((cj0)*(cj1));
IkReal x291=((IkReal(0.139000000000000))*(x279));
IkReal x292=((IkReal(0.139000000000000))*(x278));
IkReal x293=((x278)*(x289));
IkReal x294=((x279)*(x281));
IkReal x295=((x279)*(x289));
IkReal x296=((x278)*(x281));
IkReal x297=((x291)+(x294));
IkReal x298=((x292)+(x295)+(x296));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x298)))+(((cj0)*(x280)))+(((IkReal(-1.00000000000000))*(cj1)*(x286)))+(((sj0)*(x282))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x286)))+(((IkReal(-1.00000000000000))*(x285)*(x290)))+(((IkReal(-1.00000000000000))*(x293)))+(((IkReal(-1.00000000000000))*(py)*(x284)))+(x297));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x283)))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-1.00000000000000))*(sj0)*(x283)*(x288)))+(x293)+(((r02)*(sj0)*(x280)))+(((cj1)*(px)*(r01)))+(((x287)*(x288)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x282))));
evalcond[3]=((((r01)*(x280)))+(((IkReal(-1.00000000000000))*(x298)))+(((IkReal(-1.00000000000000))*(cj1)*(x286)*(x287)))+(((IkReal(-1.00000000000000))*(x282)*(x283)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x290)))+(((IkReal(-1.00000000000000))*(r02)*(x284)*(x285)))+(((pz)*(r00)*(x284)))+(((IkReal(-0.190000000000000))*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x299=((sj0)*(sj1));
IkReal x300=((cj0)*(sj1));
if( IKabs(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-190.000000000000))*(r00)*(x300)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x299)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x299)))+(((IkReal(-5.00698342424961))*(px)*(x300)))+(((IkReal(5.00698342424961))*(cj1)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-190.000000000000))*(r00)*(x300)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x299)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x299)))+(((IkReal(-5.00698342424961))*(px)*(x300)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-190.000000000000))*(r00)*(x300)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x299)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x299)))+(((IkReal(-5.00698342424961))*(px)*(x300)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x301=IKcos(j3);
IkReal x302=((r01)*(sj0));
IkReal x303=((IkReal(0.190000000000000))*(cj1));
IkReal x304=((py)*(r02));
IkReal x305=((IkReal(0.380000000000000))*(cj1));
IkReal x306=((r00)*(sj0));
IkReal x307=((cj0)*(r01));
IkReal x308=((IkReal(1.00000000000000))*(pz));
IkReal x309=((IkReal(1.00000000000000))*(pp));
IkReal x310=((cj0)*(r00));
IkReal x311=((IkReal(0.190000000000000))*(sj1));
IkReal x312=((IkReal(0.139000000000000))*(cj4));
IkReal x313=((IkReal(2.00000000000000))*(pz));
IkReal x314=((px)*(r02));
IkReal x315=((IkReal(2.00000000000000))*(px)*(py));
IkReal x316=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x317=((IkReal(0.0758940000000000))*(x301));
IkReal x318=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((sj0)*(x316)))+(x317)+(((IkReal(-1.00000000000000))*(pz)*(x305)))+(((cj0)*(x318)))+(((IkReal(-1.00000000000000))*(x309))));
evalcond[1]=((((x302)*(x311)))+(((x310)*(x311)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((x312)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(r02)*(x308)))+(((IkReal(-1.00000000000000))*(r02)*(x303)))+(((IkReal(-1.00000000000000))*(py)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x311)))+(((IkReal(-1.00000000000000))*(x303)*(x310)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-1.00000000000000))*(x302)*(x308)))+(((IkReal(-1.00000000000000))*(x308)*(x310)))+(((cj0)*(x314)))+(((sj0)*(x304)))+(((IkReal(-0.273000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x301)*(x312))));
evalcond[3]=((((x302)*(x315)))+(((IkReal(-1.00000000000000))*(x310)*(x315)))+(((pp)*(x307)))+(((sj0)*(x305)*(x314)))+(((IkReal(-1.00000000000000))*(r01)*(x318)))+(((IkReal(0.0938500000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(cj0)*(x304)*(x313)))+(((sj4)*(x317)))+(((IkReal(-2.00000000000000))*(x307)*((py)*(py))))+(((pz)*(x305)*(x307)))+(((IkReal(0.0361000000000000))*(x307)))+(((IkReal(-1.00000000000000))*(x306)*(x309)))+(((r00)*(x316)))+(((IkReal(-0.0361000000000000))*(x306)))+(((sj0)*(x313)*(x314)))+(((IkReal(2.00000000000000))*(x306)*((px)*(px))))+(((IkReal(-1.00000000000000))*(cj0)*(x304)*(x305)))+(((IkReal(-1.00000000000000))*(pz)*(x305)*(x306))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x319=((IkReal(273.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x319)*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x319)*((cj3)*(cj3))))+(((IkReal(-139.000000000000))*(cj3)*(cj4)))));
IkReal x320=((IkReal(1.96402877697842))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x320)*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x320)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x321=((IkReal(0.0758940000000000))*(cj3));
IkReal x322=(py)*(py);
IkReal x323=(px)*(px);
IkReal x324=(pz)*(pz);
IkReal x325=((r01)*(sj0));
IkReal x326=((IkReal(2.00000000000000))*(px));
IkReal x327=((IkReal(0.190000000000000))*(cj1));
IkReal x328=((r00)*(sj1));
IkReal x329=((IkReal(0.0361000000000000))*(cj0));
IkReal x330=((py)*(r02));
IkReal x331=((cj0)*(cj1));
IkReal x332=((IkReal(0.380000000000000))*(pz));
IkReal x333=((pz)*(r02));
IkReal x334=((IkReal(2.00000000000000))*(sj0));
IkReal x335=((cj0)*(r01));
IkReal x336=((IkReal(0.380000000000000))*(py));
IkReal x337=((pz)*(sj1));
IkReal x338=((IkReal(1.00000000000000))*(sj0));
IkReal x339=((pp)*(r00));
IkReal x340=((IkReal(0.190000000000000))*(sj1));
IkReal x341=((IkReal(0.0361000000000000))*(sj1));
IkReal x342=((IkReal(2.00000000000000))*(cj0));
IkReal x343=((r00)*(sj0));
IkReal x344=((IkReal(1.00000000000000))*(r00));
IkReal x345=((cj1)*(r00));
IkReal x346=((cj1)*(r02));
IkReal x347=((cj0)*(r00));
IkReal x348=((cj0)*(sj1));
IkReal x349=((IkReal(0.380000000000000))*(px));
IkReal x350=((cj1)*(pz));
IkReal x351=((IkReal(1.00000000000000))*(pp));
IkReal x352=((cj0)*(r02));
IkReal x353=((py)*(r01));
IkReal x354=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x355=((r00)*(x323));
IkReal x356=((IkReal(2.00000000000000))*(x353));
IkReal x357=((IkReal(2.00000000000000))*(x322));
IkReal x358=((IkReal(2.00000000000000))*(x324));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x338)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x338)))+(x335));
evalcond[3]=((IkReal(0.0577500000000000))+(((x348)*(x349)))+(((IkReal(-1.00000000000000))*(x351)))+(((sj0)*(sj1)*(x336)))+(x321)+(((IkReal(-1.00000000000000))*(cj1)*(x332))));
evalcond[4]=((((cj0)*(x328)))+(((sj1)*(x325)))+(((IkReal(-1.00000000000000))*(x346))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x325)))+(((IkReal(-1.00000000000000))*(x331)*(x344)))+(((IkReal(-1.00000000000000))*(x354))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x344)))+(((x325)*(x340)))+(((IkReal(-1.00000000000000))*(x353)))+(((IkReal(-1.00000000000000))*(x333)))+(((IkReal(0.190000000000000))*(cj0)*(x328)))+(((IkReal(-1.00000000000000))*(r02)*(x327))));
evalcond[7]=((((px)*(x352)))+(((IkReal(-1.00000000000000))*(r02)*(x340)))+(((IkReal(-1.00000000000000))*(pz)*(x325)))+(((IkReal(-1.00000000000000))*(x325)*(x327)))+(((IkReal(-1.00000000000000))*(x327)*(x347)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x344)))+(((sj0)*(x330))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-1.00000000000000))*(py)*(x326)*(x347)))+(((IkReal(-1.00000000000000))*(x338)*(x339)))+(((pp)*(x335)))+(((x334)*(x355)))+(((IkReal(-0.0361000000000000))*(x343)))+(((r01)*(x329)))+(((py)*(x325)*(x326)))+(((IkReal(-0.380000000000000))*(x330)*(x331)))+(x321)+(((sj0)*(x326)*(x333)))+(((IkReal(-1.00000000000000))*(cj1)*(x332)*(x343)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x349)))+(((x328)*(x336)))+(((sj0)*(x346)*(x349)))+(((r01)*(x331)*(x332)))+(((IkReal(-1.00000000000000))*(pz)*(x330)*(x342)))+(((IkReal(-1.00000000000000))*(x335)*(x357))));
evalcond[9]=((((r01)*(x336)))+(((r00)*(x349)))+(((IkReal(-1.00000000000000))*(sj1)*(x325)*(x357)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x326)*(x335)))+(((IkReal(-1.00000000000000))*(x330)*(x334)*(x337)))+(((pp)*(sj1)*(x325)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x326)*(x328)))+(((IkReal(-1.00000000000000))*(x326)*(x333)*(x348)))+(((x346)*(x358)))+(((r02)*(x332)))+(((IkReal(-1.00000000000000))*(x346)*(x351)))+(((IkReal(-1.00000000000000))*(x325)*(x341)))+(((pz)*(x326)*(x345)))+(((IkReal(-1.00000000000000))*(x323)*(x328)*(x342)))+(((x350)*(x356)))+(((IkReal(-1.00000000000000))*(x328)*(x329)))+(((IkReal(0.0361000000000000))*(x346)))+(((cj0)*(pp)*(x328))));
evalcond[10]=((((IkReal(-1.00000000000000))*(r02)*(x341)))+(((IkReal(2.00000000000000))*(x331)*(x355)))+(((cj1)*(py)*(x326)*(x343)))+(((pz)*(x326)*(x328)))+(((x337)*(x356)))+(((cj1)*(x325)*(x357)))+(((IkReal(-0.0361000000000000))*(cj1)*(x325)))+(((r02)*(sj1)*(x358)))+(((IkReal(-1.00000000000000))*(x332)*(x347)))+(((x326)*(x331)*(x353)))+(((IkReal(-1.00000000000000))*(cj1)*(x325)*(x351)))+(((IkReal(0.380000000000000))*(sj0)*(x330)))+(((x349)*(x352)))+(((IkReal(-1.00000000000000))*(x329)*(x345)))+(((IkReal(-1.00000000000000))*(x325)*(x332)))+(((x330)*(x334)*(x350)))+(((x326)*(x331)*(x333)))+(((IkReal(-1.00000000000000))*(x331)*(x339)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x351))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x359=((cj1)*(py));
IkReal x360=((pz)*(sj1));
IkReal x361=((IkReal(139000.000000000))*(sj0));
IkReal x362=((IkReal(273000.000000000))*(cj3));
IkReal x363=((py)*(sj1));
IkReal x364=((IkReal(273000.000000000))*(sj3));
IkReal x365=((cj1)*(pz));
IkReal x366=((IkReal(139000.000000000))*(cj0));
IkReal x367=((cj0)*(r02));
IkReal x368=((r00)*(x364));
IkReal x369=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x370=((px)*(r02)*(sj1));
IkReal x371=((cj1)*(px)*(r01));
IkReal x372=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x362)*(x371)))+(((IkReal(-1.00000000000000))*(r01)*(x360)*(x366)))+(((IkReal(-1.00000000000000))*(x361)*(x370)))+(((IkReal(-139000.000000000))*(x371)))+(((IkReal(-1.00000000000000))*(sj0)*(x362)*(x370)))+(((r00)*(x360)*(x361)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r00)*(x359)*(x362)))+(((x362)*(x363)*(x367)))+(((cj0)*(px)*(sj1)*(x364)))+(((IkReal(139000.000000000))*(r00)*(x359)))+(((r00)*(sj0)*(x360)*(x362)))+(((sj0)*(x363)*(x364)))+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x360)*(x362)))+(((r02)*(x363)*(x366))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(-26410.0000000000))+(((sj0)*(x364)*(x370)))+(((x361)*(x363)))+(((cj0)*(r01)*(x360)*(x364)))+(((IkReal(-1.00000000000000))*(x362)*(x365)))+(((IkReal(-1.00000000000000))*(sj0)*(x360)*(x368)))+(((x364)*(x371)))+(((sj0)*(x362)*(x363)))+(((IkReal(-139000.000000000))*(x365)))+(((cj0)*(px)*(sj1)*(x362)))+(((IkReal(-1.00000000000000))*(x359)*(x368)))+(((px)*(sj1)*(x366)))+(((IkReal(-1.00000000000000))*(x363)*(x364)*(x367)))+(((IkReal(-51870.0000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(x362)*(x371)))+(((IkReal(-1.00000000000000))*(r01)*(x360)*(x366)))+(((IkReal(-1.00000000000000))*(x361)*(x370)))+(((IkReal(-139000.000000000))*(x371)))+(((IkReal(-1.00000000000000))*(sj0)*(x362)*(x370)))+(((r00)*(x360)*(x361)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r00)*(x359)*(x362)))+(((x362)*(x363)*(x367)))+(((cj0)*(px)*(sj1)*(x364)))+(((IkReal(139000.000000000))*(r00)*(x359)))+(((r00)*(sj0)*(x360)*(x362)))+(((sj0)*(x363)*(x364)))+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x360)*(x362)))+(((r02)*(x363)*(x366)))))), ((gconst4)*(((IkReal(-26410.0000000000))+(((sj0)*(x364)*(x370)))+(((x361)*(x363)))+(((cj0)*(r01)*(x360)*(x364)))+(((IkReal(-1.00000000000000))*(x362)*(x365)))+(((IkReal(-1.00000000000000))*(sj0)*(x360)*(x368)))+(((x364)*(x371)))+(((sj0)*(x362)*(x363)))+(((IkReal(-139000.000000000))*(x365)))+(((cj0)*(px)*(sj1)*(x362)))+(((IkReal(-1.00000000000000))*(x359)*(x368)))+(((px)*(sj1)*(x366)))+(((IkReal(-1.00000000000000))*(x363)*(x364)*(x367)))+(((IkReal(-51870.0000000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x373=IKcos(j2);
IkReal x374=IKsin(j2);
IkReal x375=((px)*(sj1));
IkReal x376=((IkReal(0.273000000000000))*(cj3));
IkReal x377=((py)*(sj1));
IkReal x378=((IkReal(1.00000000000000))*(r00));
IkReal x379=((cj1)*(sj0));
IkReal x380=((IkReal(1.00000000000000))*(px));
IkReal x381=((IkReal(1.00000000000000))*(pz));
IkReal x382=((cj0)*(r01));
IkReal x383=((pz)*(sj1));
IkReal x384=((IkReal(0.273000000000000))*(sj3));
IkReal x385=((cj0)*(cj1));
IkReal x386=((IkReal(0.139000000000000))*(x374));
IkReal x387=((IkReal(0.139000000000000))*(x373));
IkReal x388=((x374)*(x376));
IkReal x389=((x373)*(x384));
IkReal x390=((x374)*(x384));
IkReal x391=((x373)*(x376));
IkReal x392=((x386)+(x388));
IkReal x393=((x387)+(x391)+(x390));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x381)))+(((IkReal(-1.00000000000000))*(x393)))+(((sj0)*(x377)))+(((cj0)*(x375))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x379)))+(((IkReal(-1.00000000000000))*(x380)*(x385)))+(x392)+(((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-1.00000000000000))*(sj1)*(x381))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x378)*(x383)))+(x392)+(((x382)*(x383)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x377)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x378)))+(((IkReal(-1.00000000000000))*(x389)))+(((r02)*(sj0)*(x375)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((pz)*(r00)*(x379)))+(((py)*(r02)*(x385)))+(((r01)*(x375)))+(((IkReal(-1.00000000000000))*(cj1)*(x381)*(x382)))+(((IkReal(-1.00000000000000))*(x377)*(x378)))+(x393)+(((IkReal(-1.00000000000000))*(r02)*(x379)*(x380)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x382))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x394=((IkReal(139000.000000000))*(cj1));
IkReal x395=((py)*(sj0));
IkReal x396=((cj0)*(px));
IkReal x397=((IkReal(273000.000000000))*(cj3));
IkReal x398=((IkReal(139000.000000000))*(sj1));
IkReal x399=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x400=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x396)*(x397)))+(((IkReal(-1.00000000000000))*(x394)*(x395)))+(((IkReal(-1.00000000000000))*(x394)*(x396)))+(((IkReal(-1.00000000000000))*(cj1)*(x395)*(x397)))+(((pz)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x400)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x397)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x398)))+(((IkReal(-1.00000000000000))*(x396)*(x400))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x395)*(x397)))+(((pz)*(x400)))+(((x395)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x398)))+(((pz)*(x394)))+(((x396)*(x399)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x398)))+(((IkReal(-1.00000000000000))*(sj1)*(x396)*(x397))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x396)*(x397)))+(((IkReal(-1.00000000000000))*(x394)*(x395)))+(((IkReal(-1.00000000000000))*(x394)*(x396)))+(((IkReal(-1.00000000000000))*(cj1)*(x395)*(x397)))+(((pz)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x400)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x397)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x398)))+(((IkReal(-1.00000000000000))*(x396)*(x400)))))), ((gconst3)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x395)*(x397)))+(((pz)*(x400)))+(((x395)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x398)))+(((pz)*(x394)))+(((x396)*(x399)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x398)))+(((IkReal(-1.00000000000000))*(sj1)*(x396)*(x397)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x401=IKcos(j2);
IkReal x402=IKsin(j2);
IkReal x403=((px)*(sj1));
IkReal x404=((IkReal(0.273000000000000))*(cj3));
IkReal x405=((py)*(sj1));
IkReal x406=((IkReal(1.00000000000000))*(r00));
IkReal x407=((cj1)*(sj0));
IkReal x408=((IkReal(1.00000000000000))*(px));
IkReal x409=((IkReal(1.00000000000000))*(pz));
IkReal x410=((cj0)*(r01));
IkReal x411=((pz)*(sj1));
IkReal x412=((IkReal(0.273000000000000))*(sj3));
IkReal x413=((cj0)*(cj1));
IkReal x414=((IkReal(0.139000000000000))*(x402));
IkReal x415=((IkReal(0.139000000000000))*(x401));
IkReal x416=((x402)*(x404));
IkReal x417=((x401)*(x412));
IkReal x418=((x402)*(x412));
IkReal x419=((x401)*(x404));
IkReal x420=((x416)+(x414));
IkReal x421=((x415)+(x418)+(x419));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x409)))+(((IkReal(-1.00000000000000))*(x421)))+(((sj0)*(x405)))+(((cj0)*(x403))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x407)))+(x420)+(((IkReal(-1.00000000000000))*(x417)))+(((IkReal(-1.00000000000000))*(x408)*(x413)))+(((IkReal(-1.00000000000000))*(sj1)*(x409))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x405)))+(((x410)*(x411)))+(((r02)*(sj0)*(x403)))+(x420)+(((IkReal(-1.00000000000000))*(sj0)*(x406)*(x411)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x417)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x406))));
evalcond[3]=((((py)*(r02)*(x413)))+(((IkReal(-1.00000000000000))*(cj1)*(x409)*(x410)))+(((pz)*(r00)*(x407)))+(((r01)*(x403)))+(((IkReal(-1.00000000000000))*(r02)*(x407)*(x408)))+(x421)+(((IkReal(-0.190000000000000))*(x410)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x405)*(x406))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x422=((IkReal(0.0758940000000000))*(cj3));
IkReal x423=(py)*(py);
IkReal x424=(px)*(px);
IkReal x425=(pz)*(pz);
IkReal x426=((r01)*(sj0));
IkReal x427=((IkReal(2.00000000000000))*(px));
IkReal x428=((IkReal(0.190000000000000))*(cj1));
IkReal x429=((r00)*(sj1));
IkReal x430=((IkReal(0.0361000000000000))*(cj0));
IkReal x431=((py)*(r02));
IkReal x432=((cj0)*(cj1));
IkReal x433=((IkReal(0.380000000000000))*(pz));
IkReal x434=((pz)*(r02));
IkReal x435=((IkReal(2.00000000000000))*(sj0));
IkReal x436=((cj0)*(r01));
IkReal x437=((IkReal(0.380000000000000))*(py));
IkReal x438=((pz)*(sj1));
IkReal x439=((IkReal(1.00000000000000))*(sj0));
IkReal x440=((pp)*(r00));
IkReal x441=((IkReal(0.190000000000000))*(sj1));
IkReal x442=((IkReal(0.0361000000000000))*(sj1));
IkReal x443=((IkReal(2.00000000000000))*(cj0));
IkReal x444=((r00)*(sj0));
IkReal x445=((IkReal(1.00000000000000))*(r00));
IkReal x446=((cj1)*(r00));
IkReal x447=((cj1)*(r02));
IkReal x448=((cj0)*(r00));
IkReal x449=((cj0)*(sj1));
IkReal x450=((IkReal(0.380000000000000))*(px));
IkReal x451=((cj1)*(pz));
IkReal x452=((IkReal(1.00000000000000))*(pp));
IkReal x453=((cj0)*(r02));
IkReal x454=((py)*(r01));
IkReal x455=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x456=((r00)*(x424));
IkReal x457=((IkReal(2.00000000000000))*(x454));
IkReal x458=((IkReal(2.00000000000000))*(x423));
IkReal x459=((IkReal(2.00000000000000))*(x425));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((cj0)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x439))));
evalcond[2]=((IkReal(-1.00000000000000))+(x436)+(((IkReal(-1.00000000000000))*(r00)*(x439))));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x433)))+(((IkReal(-1.00000000000000))*(x452)))+(((sj0)*(sj1)*(x437)))+(x422)+(((x449)*(x450))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x447)))+(((cj0)*(x429)))+(((sj1)*(x426))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x432)*(x445)))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(cj1)*(x426))));
evalcond[6]=((((IkReal(0.190000000000000))*(cj0)*(x429)))+(((IkReal(-1.00000000000000))*(x434)))+(((x426)*(x441)))+(((IkReal(-1.00000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(r02)*(x428)))+(((IkReal(-1.00000000000000))*(px)*(x445))));
evalcond[7]=((((sj0)*(x431)))+(((IkReal(-1.00000000000000))*(pz)*(x426)))+(((IkReal(-1.00000000000000))*(x426)*(x428)))+(((IkReal(-1.00000000000000))*(r02)*(x441)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x445)))+(((px)*(x453)))+(((IkReal(-1.00000000000000))*(x428)*(x448))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((x429)*(x437)))+(((IkReal(-1.00000000000000))*(py)*(x427)*(x448)))+(((py)*(x426)*(x427)))+(((IkReal(-0.0361000000000000))*(x444)))+(((sj0)*(x427)*(x434)))+(((IkReal(-1.00000000000000))*(x422)))+(((r01)*(x432)*(x433)))+(((pp)*(x436)))+(((IkReal(-1.00000000000000))*(x439)*(x440)))+(((IkReal(-1.00000000000000))*(pz)*(x431)*(x443)))+(((IkReal(-1.00000000000000))*(cj1)*(x433)*(x444)))+(((IkReal(-1.00000000000000))*(x436)*(x458)))+(((IkReal(-0.380000000000000))*(x431)*(x432)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x450)))+(((sj0)*(x447)*(x450)))+(((r01)*(x430)))+(((x435)*(x456))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x431)*(x435)*(x438)))+(((cj0)*(pp)*(x429)))+(((r02)*(x433)))+(((IkReal(-1.00000000000000))*(x424)*(x429)*(x443)))+(((IkReal(0.0361000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(x429)*(x430)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x427)*(x429)))+(((x447)*(x459)))+(((IkReal(-1.00000000000000))*(x447)*(x452)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x427)*(x436)))+(((pz)*(x427)*(x446)))+(((r01)*(x437)))+(((r00)*(x450)))+(((IkReal(-1.00000000000000))*(x426)*(x442)))+(((IkReal(-1.00000000000000))*(x427)*(x434)*(x449)))+(((x451)*(x457)))+(((IkReal(-1.00000000000000))*(sj1)*(x426)*(x458)))+(((pp)*(sj1)*(x426))));
evalcond[10]=((((x427)*(x432)*(x434)))+(((IkReal(-1.00000000000000))*(x430)*(x446)))+(((r02)*(sj1)*(x459)))+(((IkReal(-1.00000000000000))*(x433)*(x448)))+(((x431)*(x435)*(x451)))+(((pz)*(x427)*(x429)))+(((x438)*(x457)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x452)))+(((cj1)*(x426)*(x458)))+(((x427)*(x432)*(x454)))+(((IkReal(-1.00000000000000))*(r02)*(x442)))+(((IkReal(0.380000000000000))*(sj0)*(x431)))+(((IkReal(2.00000000000000))*(x432)*(x456)))+(((IkReal(-1.00000000000000))*(x426)*(x433)))+(((IkReal(-1.00000000000000))*(cj1)*(x426)*(x452)))+(((x450)*(x453)))+(((IkReal(-1.00000000000000))*(x432)*(x440)))+(((cj1)*(py)*(x427)*(x444)))+(((IkReal(-0.0361000000000000))*(cj1)*(x426))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x460=((IkReal(273000.000000000))*(sj3));
IkReal x461=((pz)*(sj1));
IkReal x462=((IkReal(139000.000000000))*(sj0));
IkReal x463=((px)*(sj1));
IkReal x464=((r02)*(sj0));
IkReal x465=((IkReal(273000.000000000))*(cj3));
IkReal x466=((py)*(sj1));
IkReal x467=((cj1)*(pz));
IkReal x468=((IkReal(139000.000000000))*(cj0));
IkReal x469=((r00)*(sj0));
IkReal x470=((cj1)*(py)*(r00));
IkReal x471=((cj0)*(x465));
IkReal x472=((cj1)*(px)*(r01));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(r02)*(x466)*(x471)))+(((IkReal(139000.000000000))*(x472)))+(((r01)*(x461)*(x471)))+(((r01)*(x461)*(x468)))+(((IkReal(-1.00000000000000))*(x460)*(x467)))+(((x465)*(x472)))+(((IkReal(-51870.0000000000))*(sj3)))+(((sj0)*(x460)*(x466)))+(((x463)*(x464)*(x465)))+(((cj0)*(x460)*(x463)))+(((IkReal(-1.00000000000000))*(r02)*(x466)*(x468)))+(((IkReal(-1.00000000000000))*(x465)*(x470)))+(((IkReal(-1.00000000000000))*(r00)*(x461)*(x462)))+(((IkReal(-1.00000000000000))*(x461)*(x465)*(x469)))+(((IkReal(-139000.000000000))*(x470)))+(((r02)*(x462)*(x463))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x465)*(x467)))+(((sj0)*(x465)*(x466)))+(((IkReal(-1.00000000000000))*(x460)*(x472)))+(((x463)*(x471)))+(((x463)*(x468)))+(((x460)*(x470)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x460)*(x461)))+(((cj0)*(r02)*(x460)*(x466)))+(((IkReal(-1.00000000000000))*(x460)*(x463)*(x464)))+(((x460)*(x461)*(x469)))+(((IkReal(-139000.000000000))*(x467)))+(((x462)*(x466)))+(((IkReal(-51870.0000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(r02)*(x466)*(x471)))+(((IkReal(139000.000000000))*(x472)))+(((r01)*(x461)*(x471)))+(((r01)*(x461)*(x468)))+(((IkReal(-1.00000000000000))*(x460)*(x467)))+(((x465)*(x472)))+(((IkReal(-51870.0000000000))*(sj3)))+(((sj0)*(x460)*(x466)))+(((x463)*(x464)*(x465)))+(((cj0)*(x460)*(x463)))+(((IkReal(-1.00000000000000))*(r02)*(x466)*(x468)))+(((IkReal(-1.00000000000000))*(x465)*(x470)))+(((IkReal(-1.00000000000000))*(r00)*(x461)*(x462)))+(((IkReal(-1.00000000000000))*(x461)*(x465)*(x469)))+(((IkReal(-139000.000000000))*(x470)))+(((r02)*(x462)*(x463)))))), ((gconst6)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x465)*(x467)))+(((sj0)*(x465)*(x466)))+(((IkReal(-1.00000000000000))*(x460)*(x472)))+(((x463)*(x471)))+(((x463)*(x468)))+(((x460)*(x470)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x460)*(x461)))+(((cj0)*(r02)*(x460)*(x466)))+(((IkReal(-1.00000000000000))*(x460)*(x463)*(x464)))+(((x460)*(x461)*(x469)))+(((IkReal(-139000.000000000))*(x467)))+(((x462)*(x466)))+(((IkReal(-51870.0000000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x473=IKcos(j2);
IkReal x474=IKsin(j2);
IkReal x475=((px)*(sj1));
IkReal x476=((IkReal(0.273000000000000))*(cj3));
IkReal x477=((py)*(sj1));
IkReal x478=((IkReal(1.00000000000000))*(r00));
IkReal x479=((cj1)*(sj0));
IkReal x480=((IkReal(1.00000000000000))*(px));
IkReal x481=((IkReal(1.00000000000000))*(pz));
IkReal x482=((cj0)*(r01));
IkReal x483=((pz)*(sj1));
IkReal x484=((IkReal(0.273000000000000))*(sj3));
IkReal x485=((cj0)*(cj1));
IkReal x486=((IkReal(0.139000000000000))*(x474));
IkReal x487=((IkReal(0.139000000000000))*(x473));
IkReal x488=((x473)*(x484));
IkReal x489=((x474)*(x476));
IkReal x490=((x474)*(x484));
IkReal x491=((x473)*(x476));
IkReal x492=((x489)+(x486));
IkReal x493=((x487)+(x490)+(x491));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x481)))+(((IkReal(-1.00000000000000))*(x493)))+(((cj0)*(x475)))+(((sj0)*(x477))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(sj1)*(x481)))+(x492)+(((IkReal(-1.00000000000000))*(py)*(x479)))+(((IkReal(-1.00000000000000))*(x480)*(x485))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x492)))+(((r02)*(sj0)*(x475)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x478)))+(x488)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x477)))+(((x482)*(x483)))+(((IkReal(-1.00000000000000))*(sj0)*(x478)*(x483)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((pz)*(r00)*(x479)))+(((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(x477)*(x478)))+(((IkReal(-1.00000000000000))*(r02)*(x479)*(x480)))+(((IkReal(-1.00000000000000))*(cj1)*(x481)*(x482)))+(((IkReal(-0.190000000000000))*(x482)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x485)))+(((r01)*(x475))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x494=((IkReal(139000.000000000))*(cj1));
IkReal x495=((py)*(sj0));
IkReal x496=((cj0)*(px));
IkReal x497=((IkReal(273000.000000000))*(cj3));
IkReal x498=((IkReal(139000.000000000))*(sj1));
IkReal x499=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x500=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst5)*(((((pz)*(x499)))+(((IkReal(-1.00000000000000))*(x494)*(x496)))+(((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-1.00000000000000))*(x496)*(x500)))+(((IkReal(-1.00000000000000))*(x495)*(x500)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x495)*(x497)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x497)))+(((IkReal(-1.00000000000000))*(cj1)*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(pz)*(x498))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(26410.0000000000))+(((pz)*(x494)))+(((x495)*(x499)))+(((IkReal(-1.00000000000000))*(x495)*(x498)))+(((IkReal(-1.00000000000000))*(x496)*(x498)))+(((x496)*(x499)))+(((IkReal(-1.00000000000000))*(sj1)*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(sj1)*(x495)*(x497)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x497)))+(((pz)*(x500))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((pz)*(x499)))+(((IkReal(-1.00000000000000))*(x494)*(x496)))+(((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-1.00000000000000))*(x496)*(x500)))+(((IkReal(-1.00000000000000))*(x495)*(x500)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x495)*(x497)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x497)))+(((IkReal(-1.00000000000000))*(cj1)*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(pz)*(x498)))))), ((gconst5)*(((IkReal(26410.0000000000))+(((pz)*(x494)))+(((x495)*(x499)))+(((IkReal(-1.00000000000000))*(x495)*(x498)))+(((IkReal(-1.00000000000000))*(x496)*(x498)))+(((x496)*(x499)))+(((IkReal(-1.00000000000000))*(sj1)*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(sj1)*(x495)*(x497)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x497)))+(((pz)*(x500)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x501=IKcos(j2);
IkReal x502=IKsin(j2);
IkReal x503=((px)*(sj1));
IkReal x504=((IkReal(0.273000000000000))*(cj3));
IkReal x505=((py)*(sj1));
IkReal x506=((IkReal(1.00000000000000))*(r00));
IkReal x507=((cj1)*(sj0));
IkReal x508=((IkReal(1.00000000000000))*(px));
IkReal x509=((IkReal(1.00000000000000))*(pz));
IkReal x510=((cj0)*(r01));
IkReal x511=((pz)*(sj1));
IkReal x512=((IkReal(0.273000000000000))*(sj3));
IkReal x513=((cj0)*(cj1));
IkReal x514=((IkReal(0.139000000000000))*(x502));
IkReal x515=((IkReal(0.139000000000000))*(x501));
IkReal x516=((x501)*(x512));
IkReal x517=((x502)*(x504));
IkReal x518=((x502)*(x512));
IkReal x519=((x501)*(x504));
IkReal x520=((x517)+(x514));
IkReal x521=((x519)+(x518)+(x515));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x505)))+(((IkReal(-1.00000000000000))*(x521)))+(((cj0)*(x503)))+(((IkReal(-1.00000000000000))*(cj1)*(x509))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x509)))+(x520)+(((IkReal(-1.00000000000000))*(x516)))+(((IkReal(-1.00000000000000))*(py)*(x507)))+(((IkReal(-1.00000000000000))*(x508)*(x513))));
evalcond[2]=((((x510)*(x511)))+(((IkReal(-1.00000000000000))*(x520)))+(x516)+(((IkReal(-1.00000000000000))*(sj0)*(x506)*(x511)))+(((r02)*(sj0)*(x503)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x505)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x506))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x505)*(x506)))+(((IkReal(-0.190000000000000))*(x510)))+(((IkReal(-1.00000000000000))*(cj1)*(x509)*(x510)))+(((pz)*(r00)*(x507)))+(((IkReal(-1.00000000000000))*(x521)))+(((py)*(r02)*(x513)))+(((r01)*(x503)))+(((IkReal(-1.00000000000000))*(r02)*(x507)*(x508)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x522=((IkReal(139.000000000000))*(sj1));
IkReal x523=((cj0)*(r00));
IkReal x524=((IkReal(1000.00000000000))*(cj4));
IkReal x525=((cj1)*(cj3));
IkReal x526=((IkReal(273.000000000000))*(r02));
IkReal x527=((cj1)*(sj3));
IkReal x528=((IkReal(190.000000000000))*(cj4));
IkReal x529=((IkReal(273.000000000000))*(r01));
IkReal x530=((cj3)*(sj1));
IkReal x531=((cj0)*(px));
IkReal x532=((sj1)*(sj3));
IkReal x533=((sj0)*(x532));
if( IKabs(((gconst2)*(((((x522)*(x523)))+(((IkReal(-1.00000000000000))*(x525)*(x526)))+(((sj3)*(x528)))+(((IkReal(273.000000000000))*(x523)*(x530)))+(((IkReal(-1.00000000000000))*(x524)*(x531)*(x532)))+(((r01)*(sj0)*(x522)))+(((IkReal(-1.00000000000000))*(py)*(x524)*(x533)))+(((pz)*(x524)*(x527)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((sj0)*(x529)*(x530))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x524)*(x530)))+(((IkReal(-1.00000000000000))*(x529)*(x533)))+(((x526)*(x527)))+(((IkReal(-273.000000000000))*(x523)*(x532)))+(((IkReal(-1.00000000000000))*(x524)*(x530)*(x531)))+(((cj3)*(x528)))+(((pz)*(x524)*(x525))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((x522)*(x523)))+(((IkReal(-1.00000000000000))*(x525)*(x526)))+(((sj3)*(x528)))+(((IkReal(273.000000000000))*(x523)*(x530)))+(((IkReal(-1.00000000000000))*(x524)*(x531)*(x532)))+(((r01)*(sj0)*(x522)))+(((IkReal(-1.00000000000000))*(py)*(x524)*(x533)))+(((pz)*(x524)*(x527)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((sj0)*(x529)*(x530)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x524)*(x530)))+(((IkReal(-1.00000000000000))*(x529)*(x533)))+(((x526)*(x527)))+(((IkReal(-273.000000000000))*(x523)*(x532)))+(((IkReal(-1.00000000000000))*(x524)*(x530)*(x531)))+(((cj3)*(x528)))+(((pz)*(x524)*(x525)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x534=IKcos(j2);
IkReal x535=IKsin(j2);
IkReal x536=(pz)*(pz);
IkReal x537=(py)*(py);
IkReal x538=(px)*(px);
IkReal x539=((px)*(sj1));
IkReal x540=((sj0)*(sj1));
IkReal x541=((IkReal(0.0552080000000000))*(sj3));
IkReal x542=((pp)*(r01));
IkReal x543=((cj1)*(sj0));
IkReal x544=((pz)*(r01));
IkReal x545=((IkReal(0.380000000000000))*(sj0));
IkReal x546=((IkReal(1.00000000000000))*(sj1));
IkReal x547=((py)*(r00));
IkReal x548=((pz)*(r02));
IkReal x549=((IkReal(2.00000000000000))*(cj0));
IkReal x550=((IkReal(2.00000000000000))*(py));
IkReal x551=((pz)*(r00));
IkReal x552=((pp)*(r02));
IkReal x553=((IkReal(1.00000000000000))*(cj1));
IkReal x554=((cj0)*(r00));
IkReal x555=((IkReal(0.0361000000000000))*(cj1));
IkReal x556=((py)*(r02));
IkReal x557=((IkReal(0.0361000000000000))*(r01));
IkReal x558=((IkReal(0.0361000000000000))*(sj1));
IkReal x559=((py)*(r01));
IkReal x560=((IkReal(2.00000000000000))*(px));
IkReal x561=((cj1)*(px));
IkReal x562=((IkReal(0.0938500000000000))*(cj3));
IkReal x563=((IkReal(0.380000000000000))*(cj0));
IkReal x564=((px)*(r02));
IkReal x565=((cj4)*(x535));
IkReal x566=((cj4)*(x534));
IkReal x567=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x568=((IkReal(0.139000000000000))*(x535));
IkReal x569=((IkReal(0.139000000000000))*(x534));
IkReal x570=((r00)*(x538));
IkReal x571=((IkReal(0.273000000000000))*(x534));
IkReal x572=((IkReal(0.273000000000000))*(cj3)*(x535));
IkReal x573=((x548)*(x550));
IkReal x574=((IkReal(2.00000000000000))*(r01)*(x537));
IkReal x575=((IkReal(2.00000000000000))*(r02)*(x536));
evalcond[0]=((((sj1)*(x554)))+(((IkReal(-1.00000000000000))*(r02)*(x553)))+(((cj3)*(x565)))+(((IkReal(-1.00000000000000))*(sj3)*(x566)))+(((r01)*(x540))));
evalcond[1]=((((sj3)*(x565)))+(((IkReal(-1.00000000000000))*(x553)*(x554)))+(((cj3)*(x566)))+(((IkReal(-1.00000000000000))*(r02)*(x546)))+(((IkReal(-1.00000000000000))*(r01)*(x543))));
evalcond[2]=((IkReal(-0.190000000000000))+(((py)*(x540)))+(((cj0)*(x539)))+(((IkReal(-1.00000000000000))*(cj3)*(x571)))+(((IkReal(-0.273000000000000))*(sj3)*(x535)))+(((IkReal(-1.00000000000000))*(pz)*(x553)))+(((IkReal(-1.00000000000000))*(x569))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)*(x571)))+(((IkReal(-1.00000000000000))*(py)*(x543)))+(((IkReal(-1.00000000000000))*(pz)*(x546)))+(x572)+(x568)+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x553))));
evalcond[4]=((((sj4)*(x572)))+(((r02)*(sj0)*(x539)))+(((r01)*(x561)))+(((IkReal(-1.00000000000000))*(x547)*(x553)))+(((sj4)*(x568)))+(((cj0)*(sj1)*(x544)))+(((IkReal(-1.00000000000000))*(x534)*(x567)))+(((IkReal(-1.00000000000000))*(x540)*(x551)))+(((IkReal(-1.00000000000000))*(cj0)*(x546)*(x556))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(x544)*(x553)))+(((IkReal(-1.00000000000000))*(x543)*(x564)))+(((x535)*(x567)))+(((cj3)*(sj4)*(x571)))+(((sj4)*(x569)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj0)*(cj1)*(x556)))+(((x543)*(x551)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x546)*(x547)))+(((r01)*(x539))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x539)*(x548)*(x549)))+(((IkReal(0.0758940000000000))*(x565)))+(((IkReal(-1.00000000000000))*(x540)*(x573)))+(((IkReal(-1.00000000000000))*(x540)*(x574)))+(((IkReal(-1.00000000000000))*(x554)*(x558)))+(((r02)*(x555)))+(((pp)*(sj1)*(x554)))+(((x562)*(x565)))+(((cj1)*(x544)*(x550)))+(((x540)*(x542)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((cj1)*(x551)*(x560)))+(((IkReal(-1.00000000000000))*(x540)*(x557)))+(((IkReal(-1.00000000000000))*(x541)*(x566)))+(((IkReal(-2.00000000000000))*(sj0)*(x539)*(x547)))+(((IkReal(-1.00000000000000))*(x552)*(x553)))+(((IkReal(-1.00000000000000))*(x539)*(x549)*(x559)))+(((IkReal(-1.00000000000000))*(sj1)*(x549)*(x570)))+(((cj1)*(x575)))+(((IkReal(0.380000000000000))*(x548)))+(((IkReal(0.380000000000000))*(x559))));
evalcond[7]=((((IkReal(-1.00000000000000))*(pp)*(x553)*(x554)))+(((IkReal(0.0758940000000000))*(x566)))+(((sj1)*(x575)))+(((IkReal(-1.00000000000000))*(x544)*(x545)))+(((IkReal(-1.00000000000000))*(x554)*(x555)))+(((x543)*(x547)*(x560)))+(((IkReal(-1.00000000000000))*(x542)*(x543)))+(((IkReal(-1.00000000000000))*(r02)*(x558)))+(((x562)*(x566)))+(((x563)*(x564)))+(((x543)*(x574)))+(((x543)*(x573)))+(((x548)*(x549)*(x561)))+(((x541)*(x565)))+(((x549)*(x559)*(x561)))+(((IkReal(-1.00000000000000))*(x543)*(x557)))+(((sj1)*(x544)*(x550)))+(((IkReal(-1.00000000000000))*(x551)*(x563)))+(((IkReal(2.00000000000000))*(x539)*(x551)))+(((IkReal(-1.00000000000000))*(x546)*(x552)))+(((x545)*(x556)))+(((cj1)*(x549)*(x570))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x576=((IkReal(1.00000000000000))*(sj1));
IkReal x577=((cj1)*(sj3));
IkReal x578=((cj0)*(r00));
IkReal x579=((cj3)*(r02));
IkReal x580=((r01)*(sj0));
IkReal x581=((sj1)*(sj3));
IkReal x582=((cj3)*(x580));
if( IKabs(((gconst1)*(((((x577)*(x580)))+(((r02)*(x581)))+(((IkReal(-1.00000000000000))*(cj3)*(x576)*(x578)))+(((x577)*(x578)))+(((IkReal(-1.00000000000000))*(x576)*(x582)))+(((cj1)*(x579))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x578)*(x581)))+(((sj1)*(x579)))+(((x580)*(x581)))+(((cj1)*(cj3)*(x578)))+(((IkReal(-1.00000000000000))*(r02)*(x577)))+(((cj1)*(x582))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((x577)*(x580)))+(((r02)*(x581)))+(((IkReal(-1.00000000000000))*(cj3)*(x576)*(x578)))+(((x577)*(x578)))+(((IkReal(-1.00000000000000))*(x576)*(x582)))+(((cj1)*(x579)))))), ((gconst1)*(((((x578)*(x581)))+(((sj1)*(x579)))+(((x580)*(x581)))+(((cj1)*(cj3)*(x578)))+(((IkReal(-1.00000000000000))*(r02)*(x577)))+(((cj1)*(x582)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x583=IKcos(j2);
IkReal x584=IKsin(j2);
IkReal x585=(pz)*(pz);
IkReal x586=(py)*(py);
IkReal x587=(px)*(px);
IkReal x588=((px)*(sj1));
IkReal x589=((sj0)*(sj1));
IkReal x590=((IkReal(0.0552080000000000))*(sj3));
IkReal x591=((pp)*(r01));
IkReal x592=((cj1)*(sj0));
IkReal x593=((pz)*(r01));
IkReal x594=((IkReal(0.380000000000000))*(sj0));
IkReal x595=((IkReal(1.00000000000000))*(sj1));
IkReal x596=((py)*(r00));
IkReal x597=((pz)*(r02));
IkReal x598=((IkReal(2.00000000000000))*(cj0));
IkReal x599=((IkReal(2.00000000000000))*(py));
IkReal x600=((pz)*(r00));
IkReal x601=((pp)*(r02));
IkReal x602=((IkReal(1.00000000000000))*(cj1));
IkReal x603=((cj0)*(r00));
IkReal x604=((IkReal(0.0361000000000000))*(cj1));
IkReal x605=((py)*(r02));
IkReal x606=((IkReal(0.0361000000000000))*(r01));
IkReal x607=((IkReal(0.0361000000000000))*(sj1));
IkReal x608=((py)*(r01));
IkReal x609=((IkReal(2.00000000000000))*(px));
IkReal x610=((cj1)*(px));
IkReal x611=((IkReal(0.0938500000000000))*(cj3));
IkReal x612=((IkReal(0.380000000000000))*(cj0));
IkReal x613=((px)*(r02));
IkReal x614=((cj4)*(x584));
IkReal x615=((cj4)*(x583));
IkReal x616=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x617=((IkReal(0.139000000000000))*(x584));
IkReal x618=((IkReal(0.139000000000000))*(x583));
IkReal x619=((r00)*(x587));
IkReal x620=((IkReal(0.273000000000000))*(x583));
IkReal x621=((IkReal(0.273000000000000))*(cj3)*(x584));
IkReal x622=((x597)*(x599));
IkReal x623=((IkReal(2.00000000000000))*(r01)*(x586));
IkReal x624=((IkReal(2.00000000000000))*(r02)*(x585));
evalcond[0]=((((sj1)*(x603)))+(((cj3)*(x614)))+(((IkReal(-1.00000000000000))*(sj3)*(x615)))+(((r01)*(x589)))+(((IkReal(-1.00000000000000))*(r02)*(x602))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x602)*(x603)))+(((cj3)*(x615)))+(((IkReal(-1.00000000000000))*(r01)*(x592)))+(((IkReal(-1.00000000000000))*(r02)*(x595)))+(((sj3)*(x614))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-0.273000000000000))*(sj3)*(x584)))+(((cj0)*(x588)))+(((IkReal(-1.00000000000000))*(x618)))+(((py)*(x589)))+(((IkReal(-1.00000000000000))*(pz)*(x602)))+(((IkReal(-1.00000000000000))*(cj3)*(x620))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x602)))+(((IkReal(-1.00000000000000))*(pz)*(x595)))+(x617)+(x621)+(((IkReal(-1.00000000000000))*(sj3)*(x620)))+(((IkReal(-1.00000000000000))*(py)*(x592))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x583)*(x616)))+(((sj4)*(x621)))+(((cj0)*(sj1)*(x593)))+(((r01)*(x610)))+(((sj4)*(x617)))+(((r02)*(sj0)*(x588)))+(((IkReal(-1.00000000000000))*(x596)*(x602)))+(((IkReal(-1.00000000000000))*(cj0)*(x595)*(x605)))+(((IkReal(-1.00000000000000))*(x589)*(x600))));
evalcond[5]=((((x584)*(x616)))+(((IkReal(-1.00000000000000))*(x592)*(x613)))+(((sj4)*(x618)))+(((cj0)*(cj1)*(x605)))+(((IkReal(-1.00000000000000))*(cj0)*(x593)*(x602)))+(((x592)*(x600)))+(((cj3)*(sj4)*(x620)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((IkReal(-1.00000000000000))*(x595)*(x596)))+(((r01)*(x588)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x603)*(x607)))+(((cj1)*(x600)*(x609)))+(((cj1)*(x593)*(x599)))+(((IkReal(-1.00000000000000))*(x590)*(x615)))+(((IkReal(-1.00000000000000))*(sj1)*(x598)*(x619)))+(((IkReal(-2.00000000000000))*(sj0)*(x588)*(x596)))+(((pp)*(sj1)*(x603)))+(((IkReal(0.380000000000000))*(x597)))+(((x611)*(x614)))+(((IkReal(-1.00000000000000))*(x589)*(x606)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(x588)*(x598)*(x608)))+(((IkReal(0.0758940000000000))*(x614)))+(((IkReal(-1.00000000000000))*(x589)*(x622)))+(((IkReal(-1.00000000000000))*(x589)*(x623)))+(((r02)*(x604)))+(((IkReal(-1.00000000000000))*(x588)*(x597)*(x598)))+(((IkReal(0.380000000000000))*(x608)))+(((x589)*(x591)))+(((cj1)*(x624)))+(((IkReal(-1.00000000000000))*(x601)*(x602))));
evalcond[7]=((((sj1)*(x593)*(x599)))+(((IkReal(-1.00000000000000))*(x592)*(x606)))+(((x594)*(x605)))+(((IkReal(-1.00000000000000))*(x603)*(x604)))+(((x598)*(x608)*(x610)))+(((IkReal(2.00000000000000))*(x588)*(x600)))+(((IkReal(-1.00000000000000))*(pp)*(x602)*(x603)))+(((cj1)*(x598)*(x619)))+(((x611)*(x615)))+(((x612)*(x613)))+(((x592)*(x596)*(x609)))+(((IkReal(-1.00000000000000))*(x593)*(x594)))+(((IkReal(0.0758940000000000))*(x615)))+(((x590)*(x614)))+(((sj1)*(x624)))+(((IkReal(-1.00000000000000))*(x591)*(x592)))+(((x597)*(x598)*(x610)))+(((IkReal(-1.00000000000000))*(x600)*(x612)))+(((IkReal(-1.00000000000000))*(r02)*(x607)))+(((x592)*(x623)))+(((x592)*(x622)))+(((IkReal(-1.00000000000000))*(x595)*(x601))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x625=((IkReal(1000.00000000000))*(r02));
IkReal x626=((IkReal(1000.00000000000))*(r00));
IkReal x627=((IkReal(1000.00000000000))*(r01));
IkReal x628=((IkReal(190.000000000000))*(r02));
IkReal x629=((IkReal(190.000000000000))*(r01)*(sj0));
IkReal x630=((IkReal(190.000000000000))*(cj0)*(r00));
if( IKabs(((gconst0)*(((((py)*(x627)))+(((pz)*(x625)))+(((IkReal(-1.00000000000000))*(sj1)*(x630)))+(((IkReal(-1.00000000000000))*(sj1)*(x629)))+(((px)*(x626)))+(((cj1)*(x628))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj0)*(pz)*(x626)))+(((IkReal(-1.00000000000000))*(cj1)*(x630)))+(((IkReal(-1.00000000000000))*(cj1)*(x629)))+(((cj0)*(px)*(x625)))+(((py)*(sj0)*(x625)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x627)))+(((IkReal(-1.00000000000000))*(sj1)*(x628)))+(((IkReal(-273.000000000000))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((py)*(x627)))+(((pz)*(x625)))+(((IkReal(-1.00000000000000))*(sj1)*(x630)))+(((IkReal(-1.00000000000000))*(sj1)*(x629)))+(((px)*(x626)))+(((cj1)*(x628)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(cj0)*(pz)*(x626)))+(((IkReal(-1.00000000000000))*(cj1)*(x630)))+(((IkReal(-1.00000000000000))*(cj1)*(x629)))+(((cj0)*(px)*(x625)))+(((py)*(sj0)*(x625)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x627)))+(((IkReal(-1.00000000000000))*(sj1)*(x628)))+(((IkReal(-273.000000000000))*(cj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x631=IKcos(j3);
IkReal x632=((r01)*(sj0));
IkReal x633=((IkReal(0.190000000000000))*(cj1));
IkReal x634=((py)*(r02));
IkReal x635=((IkReal(0.380000000000000))*(cj1));
IkReal x636=((r00)*(sj0));
IkReal x637=((cj0)*(r01));
IkReal x638=((IkReal(1.00000000000000))*(pz));
IkReal x639=((IkReal(1.00000000000000))*(pp));
IkReal x640=((cj0)*(r00));
IkReal x641=((IkReal(0.190000000000000))*(sj1));
IkReal x642=((IkReal(0.139000000000000))*(cj4));
IkReal x643=((IkReal(2.00000000000000))*(pz));
IkReal x644=((px)*(r02));
IkReal x645=((IkReal(2.00000000000000))*(px)*(py));
IkReal x646=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x647=((IkReal(0.0758940000000000))*(x631));
IkReal x648=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pz)*(x635)))+(((sj0)*(x646)))+(((IkReal(-1.00000000000000))*(x639)))+(x647)+(((cj0)*(x648))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(r00)))+(((x642)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(r02)*(x633)))+(((IkReal(-1.00000000000000))*(r02)*(x638)))+(((x640)*(x641)))+(((x632)*(x641)))+(((IkReal(-1.00000000000000))*(py)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x631)*(x642)))+(((IkReal(-1.00000000000000))*(x633)*(x640)))+(((IkReal(-1.00000000000000))*(r02)*(x641)))+(((sj0)*(x634)))+(((cj0)*(x644)))+(((IkReal(-0.273000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x638)*(x640)))+(((IkReal(-1.00000000000000))*(x632)*(x638)))+(((IkReal(-1.00000000000000))*(x632)*(x633))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r01)*(x648)))+(((IkReal(-0.0361000000000000))*(x636)))+(((sj4)*(x647)))+(((pz)*(x635)*(x637)))+(((IkReal(0.0361000000000000))*(x637)))+(((IkReal(-1.00000000000000))*(x640)*(x645)))+(((sj0)*(x643)*(x644)))+(((IkReal(0.0938500000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(cj0)*(x634)*(x635)))+(((pp)*(x637)))+(((sj0)*(x635)*(x644)))+(((IkReal(-1.00000000000000))*(x636)*(x639)))+(((x632)*(x645)))+(((IkReal(-2.00000000000000))*(x637)*((py)*(py))))+(((IkReal(2.00000000000000))*(x636)*((px)*(px))))+(((IkReal(-1.00000000000000))*(pz)*(x635)*(x636)))+(((IkReal(-1.00000000000000))*(cj0)*(x634)*(x643)))+(((r00)*(x646))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x649=((IkReal(273.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x649)*((cj3)*(cj3))))+(((IkReal(-139.000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x649)*((sj3)*(sj3))))));
IkReal x650=((IkReal(1.96402877697842))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x650)*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x650)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x651=((IkReal(0.0758940000000000))*(cj3));
IkReal x652=(py)*(py);
IkReal x653=(px)*(px);
IkReal x654=(pz)*(pz);
IkReal x655=((r01)*(sj0));
IkReal x656=((IkReal(2.00000000000000))*(px));
IkReal x657=((IkReal(0.190000000000000))*(cj1));
IkReal x658=((r00)*(sj1));
IkReal x659=((IkReal(0.0361000000000000))*(cj0));
IkReal x660=((py)*(r02));
IkReal x661=((cj0)*(cj1));
IkReal x662=((IkReal(0.380000000000000))*(pz));
IkReal x663=((pz)*(r02));
IkReal x664=((IkReal(2.00000000000000))*(sj0));
IkReal x665=((cj0)*(r01));
IkReal x666=((IkReal(0.380000000000000))*(py));
IkReal x667=((pz)*(sj1));
IkReal x668=((IkReal(1.00000000000000))*(sj0));
IkReal x669=((pp)*(r00));
IkReal x670=((IkReal(0.190000000000000))*(sj1));
IkReal x671=((IkReal(0.0361000000000000))*(sj1));
IkReal x672=((IkReal(2.00000000000000))*(cj0));
IkReal x673=((r00)*(sj0));
IkReal x674=((IkReal(1.00000000000000))*(r00));
IkReal x675=((cj1)*(r00));
IkReal x676=((cj1)*(r02));
IkReal x677=((cj0)*(r00));
IkReal x678=((cj0)*(sj1));
IkReal x679=((IkReal(0.380000000000000))*(px));
IkReal x680=((cj1)*(pz));
IkReal x681=((IkReal(1.00000000000000))*(pp));
IkReal x682=((cj0)*(r02));
IkReal x683=((py)*(r01));
IkReal x684=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x685=((r00)*(x653));
IkReal x686=((IkReal(2.00000000000000))*(x683));
IkReal x687=((IkReal(2.00000000000000))*(x652));
IkReal x688=((IkReal(2.00000000000000))*(x654));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x668)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x668)))+(x665));
evalcond[3]=((IkReal(0.0577500000000000))+(((sj0)*(sj1)*(x666)))+(((IkReal(-1.00000000000000))*(x681)))+(((IkReal(-1.00000000000000))*(cj1)*(x662)))+(((x678)*(x679)))+(x651));
evalcond[4]=((((sj1)*(x655)))+(((IkReal(-1.00000000000000))*(x676)))+(((cj0)*(x658))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x655)))+(((IkReal(-1.00000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(x661)*(x674))));
evalcond[6]=((((IkReal(0.190000000000000))*(cj0)*(x658)))+(((x655)*(x670)))+(((IkReal(-1.00000000000000))*(x663)))+(((IkReal(-1.00000000000000))*(r02)*(x657)))+(((IkReal(-1.00000000000000))*(px)*(x674)))+(((IkReal(-1.00000000000000))*(x683))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r02)*(x670)))+(((px)*(x682)))+(((IkReal(-1.00000000000000))*(x657)*(x677)))+(((sj0)*(x660)))+(((IkReal(-1.00000000000000))*(pz)*(x655)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x674)))+(((IkReal(-1.00000000000000))*(x655)*(x657))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-0.0361000000000000))*(x673)))+(((pp)*(x665)))+(((py)*(x655)*(x656)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x679)))+(((IkReal(-1.00000000000000))*(x665)*(x687)))+(((sj0)*(x656)*(x663)))+(((IkReal(-1.00000000000000))*(pz)*(x660)*(x672)))+(((IkReal(-0.380000000000000))*(x660)*(x661)))+(((IkReal(-1.00000000000000))*(x668)*(x669)))+(((r01)*(x661)*(x662)))+(((x664)*(x685)))+(((sj0)*(x676)*(x679)))+(x651)+(((IkReal(-1.00000000000000))*(cj1)*(x662)*(x673)))+(((x658)*(x666)))+(((IkReal(-1.00000000000000))*(py)*(x656)*(x677)))+(((r01)*(x659))));
evalcond[9]=((((cj0)*(pp)*(x658)))+(((r01)*(x666)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x656)*(x658)))+(((IkReal(-1.00000000000000))*(x653)*(x658)*(x672)))+(((IkReal(-1.00000000000000))*(x656)*(x663)*(x678)))+(((IkReal(0.0361000000000000))*(x676)))+(((r00)*(x679)))+(((IkReal(-1.00000000000000))*(x660)*(x664)*(x667)))+(((x676)*(x688)))+(((r02)*(x662)))+(((pp)*(sj1)*(x655)))+(((x680)*(x686)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x656)*(x665)))+(((IkReal(-1.00000000000000))*(sj1)*(x655)*(x687)))+(((IkReal(-1.00000000000000))*(x655)*(x671)))+(((IkReal(-1.00000000000000))*(x676)*(x681)))+(((pz)*(x656)*(x675)))+(((IkReal(-1.00000000000000))*(x658)*(x659))));
evalcond[10]=((((IkReal(-1.00000000000000))*(r02)*(x671)))+(((IkReal(-1.00000000000000))*(cj1)*(x655)*(x681)))+(((IkReal(-1.00000000000000))*(x662)*(x677)))+(((pz)*(x656)*(x658)))+(((IkReal(-1.00000000000000))*(x659)*(x675)))+(((cj1)*(py)*(x656)*(x673)))+(((IkReal(0.380000000000000))*(sj0)*(x660)))+(((x656)*(x661)*(x683)))+(((x660)*(x664)*(x680)))+(((x667)*(x686)))+(((x679)*(x682)))+(((x656)*(x661)*(x663)))+(((IkReal(-0.0361000000000000))*(cj1)*(x655)))+(((r02)*(sj1)*(x688)))+(((IkReal(-1.00000000000000))*(x655)*(x662)))+(((IkReal(-1.00000000000000))*(x661)*(x669)))+(((cj1)*(x655)*(x687)))+(((IkReal(2.00000000000000))*(x661)*(x685)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x681))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x689=((cj1)*(py));
IkReal x690=((pz)*(sj1));
IkReal x691=((IkReal(139000.000000000))*(sj0));
IkReal x692=((IkReal(273000.000000000))*(cj3));
IkReal x693=((py)*(sj1));
IkReal x694=((IkReal(273000.000000000))*(sj3));
IkReal x695=((cj1)*(pz));
IkReal x696=((IkReal(139000.000000000))*(cj0));
IkReal x697=((cj0)*(r02));
IkReal x698=((r00)*(x694));
IkReal x699=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x700=((px)*(r02)*(sj1));
IkReal x701=((cj1)*(px)*(r01));
IkReal x702=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(cj0)*(r01)*(x690)*(x692)))+(((cj0)*(px)*(sj1)*(x694)))+(((IkReal(-1.00000000000000))*(r01)*(x690)*(x696)))+(((r02)*(x693)*(x696)))+(((IkReal(-1.00000000000000))*(x691)*(x700)))+(((x692)*(x693)*(x697)))+(((IkReal(-1.00000000000000))*(sj0)*(x692)*(x700)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x692)*(x701)))+(((IkReal(-139000.000000000))*(x701)))+(((sj0)*(x693)*(x694)))+(((r00)*(x689)*(x692)))+(((IkReal(-1.00000000000000))*(x694)*(x695)))+(((r00)*(x690)*(x691)))+(((r00)*(sj0)*(x690)*(x692)))+(((IkReal(139000.000000000))*(r00)*(x689))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(-26410.0000000000))+(((IkReal(-139000.000000000))*(x695)))+(((sj0)*(x694)*(x700)))+(((cj0)*(r01)*(x690)*(x694)))+(((cj0)*(px)*(sj1)*(x692)))+(((x691)*(x693)))+(((IkReal(-1.00000000000000))*(x693)*(x694)*(x697)))+(((x694)*(x701)))+(((IkReal(-1.00000000000000))*(x692)*(x695)))+(((sj0)*(x692)*(x693)))+(((IkReal(-1.00000000000000))*(x689)*(x698)))+(((px)*(sj1)*(x696)))+(((IkReal(-1.00000000000000))*(sj0)*(x690)*(x698)))+(((IkReal(-51870.0000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(cj0)*(r01)*(x690)*(x692)))+(((cj0)*(px)*(sj1)*(x694)))+(((IkReal(-1.00000000000000))*(r01)*(x690)*(x696)))+(((r02)*(x693)*(x696)))+(((IkReal(-1.00000000000000))*(x691)*(x700)))+(((x692)*(x693)*(x697)))+(((IkReal(-1.00000000000000))*(sj0)*(x692)*(x700)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x692)*(x701)))+(((IkReal(-139000.000000000))*(x701)))+(((sj0)*(x693)*(x694)))+(((r00)*(x689)*(x692)))+(((IkReal(-1.00000000000000))*(x694)*(x695)))+(((r00)*(x690)*(x691)))+(((r00)*(sj0)*(x690)*(x692)))+(((IkReal(139000.000000000))*(r00)*(x689)))))), ((gconst4)*(((IkReal(-26410.0000000000))+(((IkReal(-139000.000000000))*(x695)))+(((sj0)*(x694)*(x700)))+(((cj0)*(r01)*(x690)*(x694)))+(((cj0)*(px)*(sj1)*(x692)))+(((x691)*(x693)))+(((IkReal(-1.00000000000000))*(x693)*(x694)*(x697)))+(((x694)*(x701)))+(((IkReal(-1.00000000000000))*(x692)*(x695)))+(((sj0)*(x692)*(x693)))+(((IkReal(-1.00000000000000))*(x689)*(x698)))+(((px)*(sj1)*(x696)))+(((IkReal(-1.00000000000000))*(sj0)*(x690)*(x698)))+(((IkReal(-51870.0000000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x703=IKcos(j2);
IkReal x704=IKsin(j2);
IkReal x705=((px)*(sj1));
IkReal x706=((IkReal(0.273000000000000))*(cj3));
IkReal x707=((py)*(sj1));
IkReal x708=((IkReal(1.00000000000000))*(r00));
IkReal x709=((cj1)*(sj0));
IkReal x710=((IkReal(1.00000000000000))*(px));
IkReal x711=((IkReal(1.00000000000000))*(pz));
IkReal x712=((cj0)*(r01));
IkReal x713=((pz)*(sj1));
IkReal x714=((IkReal(0.273000000000000))*(sj3));
IkReal x715=((cj0)*(cj1));
IkReal x716=((IkReal(0.139000000000000))*(x704));
IkReal x717=((IkReal(0.139000000000000))*(x703));
IkReal x718=((x704)*(x706));
IkReal x719=((x703)*(x714));
IkReal x720=((x704)*(x714));
IkReal x721=((x703)*(x706));
IkReal x722=((x718)+(x716));
IkReal x723=((x717)+(x720)+(x721));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x705)))+(((IkReal(-1.00000000000000))*(x723)))+(((IkReal(-1.00000000000000))*(cj1)*(x711)))+(((sj0)*(x707))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x710)*(x715)))+(((IkReal(-1.00000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(py)*(x709)))+(x722)+(((IkReal(-1.00000000000000))*(sj1)*(x711))));
evalcond[2]=((((r02)*(sj0)*(x705)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x708)))+(((IkReal(-1.00000000000000))*(sj0)*(x708)*(x713)))+(((IkReal(-1.00000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x707)))+(x722)+(((cj1)*(px)*(r01)))+(((x712)*(x713))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x712)))+(((IkReal(-1.00000000000000))*(x707)*(x708)))+(((IkReal(-1.00000000000000))*(cj1)*(x711)*(x712)))+(((r01)*(x705)))+(((py)*(r02)*(x715)))+(((pz)*(r00)*(x709)))+(((IkReal(-1.00000000000000))*(r02)*(x709)*(x710)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x723));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x724=((IkReal(139000.000000000))*(cj1));
IkReal x725=((py)*(sj0));
IkReal x726=((cj0)*(px));
IkReal x727=((IkReal(273000.000000000))*(cj3));
IkReal x728=((IkReal(139000.000000000))*(sj1));
IkReal x729=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x730=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x724)*(x725)))+(((IkReal(-1.00000000000000))*(x724)*(x726)))+(((IkReal(-1.00000000000000))*(cj1)*(x725)*(x727)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x727)))+(((IkReal(-1.00000000000000))*(x725)*(x730)))+(((IkReal(51870.0000000000))*(sj3)))+(((pz)*(x729)))+(((IkReal(-1.00000000000000))*(cj1)*(x726)*(x727)))+(((IkReal(-1.00000000000000))*(x726)*(x730)))+(((IkReal(-1.00000000000000))*(pz)*(x728))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(26410.0000000000))+(((x726)*(x729)))+(((IkReal(-1.00000000000000))*(sj1)*(x726)*(x727)))+(((IkReal(-1.00000000000000))*(x725)*(x728)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x725)*(x727)))+(((pz)*(x730)))+(((x725)*(x729)))+(((IkReal(-1.00000000000000))*(x726)*(x728)))+(((pz)*(x724)))+(((cj1)*(pz)*(x727))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x724)*(x725)))+(((IkReal(-1.00000000000000))*(x724)*(x726)))+(((IkReal(-1.00000000000000))*(cj1)*(x725)*(x727)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x727)))+(((IkReal(-1.00000000000000))*(x725)*(x730)))+(((IkReal(51870.0000000000))*(sj3)))+(((pz)*(x729)))+(((IkReal(-1.00000000000000))*(cj1)*(x726)*(x727)))+(((IkReal(-1.00000000000000))*(x726)*(x730)))+(((IkReal(-1.00000000000000))*(pz)*(x728)))))), ((gconst3)*(((IkReal(26410.0000000000))+(((x726)*(x729)))+(((IkReal(-1.00000000000000))*(sj1)*(x726)*(x727)))+(((IkReal(-1.00000000000000))*(x725)*(x728)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x725)*(x727)))+(((pz)*(x730)))+(((x725)*(x729)))+(((IkReal(-1.00000000000000))*(x726)*(x728)))+(((pz)*(x724)))+(((cj1)*(pz)*(x727)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x731=IKcos(j2);
IkReal x732=IKsin(j2);
IkReal x733=((px)*(sj1));
IkReal x734=((IkReal(0.273000000000000))*(cj3));
IkReal x735=((py)*(sj1));
IkReal x736=((IkReal(1.00000000000000))*(r00));
IkReal x737=((cj1)*(sj0));
IkReal x738=((IkReal(1.00000000000000))*(px));
IkReal x739=((IkReal(1.00000000000000))*(pz));
IkReal x740=((cj0)*(r01));
IkReal x741=((pz)*(sj1));
IkReal x742=((IkReal(0.273000000000000))*(sj3));
IkReal x743=((cj0)*(cj1));
IkReal x744=((IkReal(0.139000000000000))*(x732));
IkReal x745=((IkReal(0.139000000000000))*(x731));
IkReal x746=((x732)*(x734));
IkReal x747=((x731)*(x742));
IkReal x748=((x732)*(x742));
IkReal x749=((x731)*(x734));
IkReal x750=((x746)+(x744));
IkReal x751=((x745)+(x748)+(x749));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x739)))+(((cj0)*(x733)))+(((sj0)*(x735)))+(((IkReal(-1.00000000000000))*(x751))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x738)*(x743)))+(((IkReal(-1.00000000000000))*(sj1)*(x739)))+(x750)+(((IkReal(-1.00000000000000))*(py)*(x737)))+(((IkReal(-1.00000000000000))*(x747))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x736)))+(((x740)*(x741)))+(((IkReal(-1.00000000000000))*(sj0)*(x736)*(x741)))+(((r02)*(sj0)*(x733)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x735)))+(x750)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x747))));
evalcond[3]=((((py)*(r02)*(x743)))+(((IkReal(-1.00000000000000))*(x735)*(x736)))+(((IkReal(-0.190000000000000))*(x740)))+(((IkReal(-1.00000000000000))*(r02)*(x737)*(x738)))+(((r01)*(x733)))+(((IkReal(-1.00000000000000))*(cj1)*(x739)*(x740)))+(((pz)*(r00)*(x737)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x751));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x752=((IkReal(0.0758940000000000))*(cj3));
IkReal x753=(py)*(py);
IkReal x754=(px)*(px);
IkReal x755=(pz)*(pz);
IkReal x756=((r01)*(sj0));
IkReal x757=((IkReal(2.00000000000000))*(px));
IkReal x758=((IkReal(0.190000000000000))*(cj1));
IkReal x759=((r00)*(sj1));
IkReal x760=((IkReal(0.0361000000000000))*(cj0));
IkReal x761=((py)*(r02));
IkReal x762=((cj0)*(cj1));
IkReal x763=((IkReal(0.380000000000000))*(pz));
IkReal x764=((pz)*(r02));
IkReal x765=((IkReal(2.00000000000000))*(sj0));
IkReal x766=((cj0)*(r01));
IkReal x767=((IkReal(0.380000000000000))*(py));
IkReal x768=((pz)*(sj1));
IkReal x769=((IkReal(1.00000000000000))*(sj0));
IkReal x770=((pp)*(r00));
IkReal x771=((IkReal(0.190000000000000))*(sj1));
IkReal x772=((IkReal(0.0361000000000000))*(sj1));
IkReal x773=((IkReal(2.00000000000000))*(cj0));
IkReal x774=((r00)*(sj0));
IkReal x775=((IkReal(1.00000000000000))*(r00));
IkReal x776=((cj1)*(r00));
IkReal x777=((cj1)*(r02));
IkReal x778=((cj0)*(r00));
IkReal x779=((cj0)*(sj1));
IkReal x780=((IkReal(0.380000000000000))*(px));
IkReal x781=((cj1)*(pz));
IkReal x782=((IkReal(1.00000000000000))*(pp));
IkReal x783=((cj0)*(r02));
IkReal x784=((py)*(r01));
IkReal x785=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x786=((r00)*(x754));
IkReal x787=((IkReal(2.00000000000000))*(x784));
IkReal x788=((IkReal(2.00000000000000))*(x753));
IkReal x789=((IkReal(2.00000000000000))*(x755));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x769)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x769)))+(x766));
evalcond[3]=((IkReal(0.0577500000000000))+(((sj0)*(sj1)*(x767)))+(((IkReal(-1.00000000000000))*(x782)))+(((IkReal(-1.00000000000000))*(cj1)*(x763)))+(((x779)*(x780)))+(x752));
evalcond[4]=((((sj1)*(x756)))+(((cj0)*(x759)))+(((IkReal(-1.00000000000000))*(x777))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x785)))+(((IkReal(-1.00000000000000))*(cj1)*(x756)))+(((IkReal(-1.00000000000000))*(x762)*(x775))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x775)))+(((IkReal(0.190000000000000))*(cj0)*(x759)))+(((x756)*(x771)))+(((IkReal(-1.00000000000000))*(r02)*(x758)))+(((IkReal(-1.00000000000000))*(x764)))+(((IkReal(-1.00000000000000))*(x784))));
evalcond[7]=((((sj0)*(x761)))+(((px)*(x783)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x775)))+(((IkReal(-1.00000000000000))*(r02)*(x771)))+(((IkReal(-1.00000000000000))*(x758)*(x778)))+(((IkReal(-1.00000000000000))*(x756)*(x758)))+(((IkReal(-1.00000000000000))*(pz)*(x756))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((IkReal(-1.00000000000000))*(py)*(x757)*(x778)))+(((IkReal(-1.00000000000000))*(cj1)*(x763)*(x774)))+(((sj0)*(x757)*(x764)))+(((x759)*(x767)))+(((r01)*(x762)*(x763)))+(((x765)*(x786)))+(((IkReal(-0.0361000000000000))*(x774)))+(((IkReal(-1.00000000000000))*(x766)*(x788)))+(((IkReal(-1.00000000000000))*(x769)*(x770)))+(((IkReal(-0.380000000000000))*(x761)*(x762)))+(((IkReal(-1.00000000000000))*(pz)*(x761)*(x773)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x780)))+(((sj0)*(x777)*(x780)))+(((pp)*(x766)))+(((IkReal(-1.00000000000000))*(x752)))+(((r01)*(x760)))+(((py)*(x756)*(x757))));
evalcond[9]=((((x781)*(x787)))+(((r00)*(x780)))+(((IkReal(-1.00000000000000))*(sj1)*(x756)*(x788)))+(((IkReal(-1.00000000000000))*(x754)*(x759)*(x773)))+(((IkReal(0.0361000000000000))*(x777)))+(((IkReal(-1.00000000000000))*(x777)*(x782)))+(((pp)*(sj1)*(x756)))+(((IkReal(-1.00000000000000))*(x761)*(x765)*(x768)))+(((IkReal(-1.00000000000000))*(x756)*(x772)))+(((pz)*(x757)*(x776)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x757)*(x759)))+(((r02)*(x763)))+(((IkReal(-1.00000000000000))*(x757)*(x764)*(x779)))+(((cj0)*(pp)*(x759)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x757)*(x766)))+(((x777)*(x789)))+(((IkReal(-1.00000000000000))*(x759)*(x760)))+(((r01)*(x767))));
evalcond[10]=((((cj1)*(py)*(x757)*(x774)))+(((IkReal(2.00000000000000))*(x762)*(x786)))+(((IkReal(-1.00000000000000))*(x756)*(x763)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x782)))+(((cj1)*(x756)*(x788)))+(((x768)*(x787)))+(((x761)*(x765)*(x781)))+(((x757)*(x762)*(x784)))+(((IkReal(0.380000000000000))*(sj0)*(x761)))+(((IkReal(-1.00000000000000))*(r02)*(x772)))+(((IkReal(-1.00000000000000))*(x762)*(x770)))+(((x757)*(x762)*(x764)))+(((pz)*(x757)*(x759)))+(((x780)*(x783)))+(((IkReal(-1.00000000000000))*(x763)*(x778)))+(((IkReal(-1.00000000000000))*(cj1)*(x756)*(x782)))+(((r02)*(sj1)*(x789)))+(((IkReal(-0.0361000000000000))*(cj1)*(x756)))+(((IkReal(-1.00000000000000))*(x760)*(x776))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x790=((IkReal(273000.000000000))*(sj3));
IkReal x791=((pz)*(sj1));
IkReal x792=((IkReal(139000.000000000))*(sj0));
IkReal x793=((px)*(sj1));
IkReal x794=((r02)*(sj0));
IkReal x795=((IkReal(273000.000000000))*(cj3));
IkReal x796=((py)*(sj1));
IkReal x797=((cj1)*(pz));
IkReal x798=((IkReal(139000.000000000))*(cj0));
IkReal x799=((r00)*(sj0));
IkReal x800=((cj1)*(py)*(r00));
IkReal x801=((cj0)*(x795));
IkReal x802=((cj1)*(px)*(r01));
if( IKabs(((gconst6)*(((((sj0)*(x790)*(x796)))+(((x793)*(x794)*(x795)))+(((r01)*(x791)*(x798)))+(((IkReal(139000.000000000))*(x802)))+(((IkReal(-1.00000000000000))*(r00)*(x791)*(x792)))+(((r01)*(x791)*(x801)))+(((x795)*(x802)))+(((cj0)*(x790)*(x793)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r02)*(x792)*(x793)))+(((IkReal(-1.00000000000000))*(x790)*(x797)))+(((IkReal(-1.00000000000000))*(x795)*(x800)))+(((IkReal(-1.00000000000000))*(x791)*(x795)*(x799)))+(((IkReal(-139000.000000000))*(x800)))+(((IkReal(-1.00000000000000))*(r02)*(x796)*(x798)))+(((IkReal(-1.00000000000000))*(r02)*(x796)*(x801))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(-26410.0000000000))+(((x790)*(x791)*(x799)))+(((x793)*(x801)))+(((x790)*(x800)))+(((IkReal(-1.00000000000000))*(x795)*(x797)))+(((IkReal(-1.00000000000000))*(x790)*(x802)))+(((x793)*(x798)))+(((sj0)*(x795)*(x796)))+(((x792)*(x796)))+(((IkReal(-139000.000000000))*(x797)))+(((IkReal(-1.00000000000000))*(x790)*(x793)*(x794)))+(((cj0)*(r02)*(x790)*(x796)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x790)*(x791))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((sj0)*(x790)*(x796)))+(((x793)*(x794)*(x795)))+(((r01)*(x791)*(x798)))+(((IkReal(139000.000000000))*(x802)))+(((IkReal(-1.00000000000000))*(r00)*(x791)*(x792)))+(((r01)*(x791)*(x801)))+(((x795)*(x802)))+(((cj0)*(x790)*(x793)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r02)*(x792)*(x793)))+(((IkReal(-1.00000000000000))*(x790)*(x797)))+(((IkReal(-1.00000000000000))*(x795)*(x800)))+(((IkReal(-1.00000000000000))*(x791)*(x795)*(x799)))+(((IkReal(-139000.000000000))*(x800)))+(((IkReal(-1.00000000000000))*(r02)*(x796)*(x798)))+(((IkReal(-1.00000000000000))*(r02)*(x796)*(x801)))))), ((gconst6)*(((IkReal(-26410.0000000000))+(((x790)*(x791)*(x799)))+(((x793)*(x801)))+(((x790)*(x800)))+(((IkReal(-1.00000000000000))*(x795)*(x797)))+(((IkReal(-1.00000000000000))*(x790)*(x802)))+(((x793)*(x798)))+(((sj0)*(x795)*(x796)))+(((x792)*(x796)))+(((IkReal(-139000.000000000))*(x797)))+(((IkReal(-1.00000000000000))*(x790)*(x793)*(x794)))+(((cj0)*(r02)*(x790)*(x796)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x790)*(x791)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x803=IKcos(j2);
IkReal x804=IKsin(j2);
IkReal x805=((px)*(sj1));
IkReal x806=((IkReal(0.273000000000000))*(cj3));
IkReal x807=((py)*(sj1));
IkReal x808=((IkReal(1.00000000000000))*(r00));
IkReal x809=((cj1)*(sj0));
IkReal x810=((IkReal(1.00000000000000))*(px));
IkReal x811=((IkReal(1.00000000000000))*(pz));
IkReal x812=((cj0)*(r01));
IkReal x813=((pz)*(sj1));
IkReal x814=((IkReal(0.273000000000000))*(sj3));
IkReal x815=((cj0)*(cj1));
IkReal x816=((IkReal(0.139000000000000))*(x804));
IkReal x817=((IkReal(0.139000000000000))*(x803));
IkReal x818=((x803)*(x814));
IkReal x819=((x804)*(x806));
IkReal x820=((x804)*(x814));
IkReal x821=((x803)*(x806));
IkReal x822=((x819)+(x816));
IkReal x823=((x817)+(x821)+(x820));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x823)))+(((sj0)*(x807)))+(((cj0)*(x805)))+(((IkReal(-1.00000000000000))*(cj1)*(x811))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x809)))+(((IkReal(-1.00000000000000))*(x818)))+(((IkReal(-1.00000000000000))*(x810)*(x815)))+(x822)+(((IkReal(-1.00000000000000))*(sj1)*(x811))));
evalcond[2]=((((x812)*(x813)))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(-1.00000000000000))*(sj0)*(x808)*(x813)))+(((r02)*(sj0)*(x805)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x807)))+(x818)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x808))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x807)*(x808)))+(((py)*(r02)*(x815)))+(((IkReal(-1.00000000000000))*(x823)))+(((pz)*(r00)*(x809)))+(((IkReal(-1.00000000000000))*(r02)*(x809)*(x810)))+(((IkReal(-0.190000000000000))*(x812)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r01)*(x805)))+(((IkReal(-1.00000000000000))*(cj1)*(x811)*(x812))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x824=((IkReal(139000.000000000))*(cj1));
IkReal x825=((py)*(sj0));
IkReal x826=((cj0)*(px));
IkReal x827=((IkReal(273000.000000000))*(cj3));
IkReal x828=((IkReal(139000.000000000))*(sj1));
IkReal x829=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x830=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst5)*(((((pz)*(x829)))+(((IkReal(-1.00000000000000))*(pz)*(x828)))+(((IkReal(-1.00000000000000))*(x826)*(x830)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x827)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x824)*(x825)))+(((IkReal(-1.00000000000000))*(x824)*(x826)))+(((IkReal(-1.00000000000000))*(cj1)*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x830)))+(((IkReal(-1.00000000000000))*(cj1)*(x826)*(x827))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(26410.0000000000))+(((pz)*(x824)))+(((IkReal(-1.00000000000000))*(sj1)*(x826)*(x827)))+(((x825)*(x829)))+(((pz)*(x830)))+(((IkReal(-1.00000000000000))*(x826)*(x828)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x827)))+(((IkReal(-1.00000000000000))*(sj1)*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x828)))+(((x826)*(x829))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((pz)*(x829)))+(((IkReal(-1.00000000000000))*(pz)*(x828)))+(((IkReal(-1.00000000000000))*(x826)*(x830)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x827)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x824)*(x825)))+(((IkReal(-1.00000000000000))*(x824)*(x826)))+(((IkReal(-1.00000000000000))*(cj1)*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x830)))+(((IkReal(-1.00000000000000))*(cj1)*(x826)*(x827)))))), ((gconst5)*(((IkReal(26410.0000000000))+(((pz)*(x824)))+(((IkReal(-1.00000000000000))*(sj1)*(x826)*(x827)))+(((x825)*(x829)))+(((pz)*(x830)))+(((IkReal(-1.00000000000000))*(x826)*(x828)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x827)))+(((IkReal(-1.00000000000000))*(sj1)*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x828)))+(((x826)*(x829)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x831=IKcos(j2);
IkReal x832=IKsin(j2);
IkReal x833=((px)*(sj1));
IkReal x834=((IkReal(0.273000000000000))*(cj3));
IkReal x835=((py)*(sj1));
IkReal x836=((IkReal(1.00000000000000))*(r00));
IkReal x837=((cj1)*(sj0));
IkReal x838=((IkReal(1.00000000000000))*(px));
IkReal x839=((IkReal(1.00000000000000))*(pz));
IkReal x840=((cj0)*(r01));
IkReal x841=((pz)*(sj1));
IkReal x842=((IkReal(0.273000000000000))*(sj3));
IkReal x843=((cj0)*(cj1));
IkReal x844=((IkReal(0.139000000000000))*(x832));
IkReal x845=((IkReal(0.139000000000000))*(x831));
IkReal x846=((x831)*(x842));
IkReal x847=((x832)*(x834));
IkReal x848=((x832)*(x842));
IkReal x849=((x831)*(x834));
IkReal x850=((x844)+(x847));
IkReal x851=((x845)+(x849)+(x848));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x851)))+(((cj0)*(x833)))+(((IkReal(-1.00000000000000))*(cj1)*(x839)))+(((sj0)*(x835))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x839)))+(((IkReal(-1.00000000000000))*(x846)))+(((IkReal(-1.00000000000000))*(x838)*(x843)))+(x850)+(((IkReal(-1.00000000000000))*(py)*(x837))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x850)))+(((x840)*(x841)))+(((IkReal(-1.00000000000000))*(sj0)*(x836)*(x841)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x835)))+(((r02)*(sj0)*(x833)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x836)))+(x846)+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x851)))+(((IkReal(-1.00000000000000))*(x835)*(x836)))+(((r01)*(x833)))+(((IkReal(-1.00000000000000))*(cj1)*(x839)*(x840)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x840)))+(((IkReal(-1.00000000000000))*(r02)*(x837)*(x838)))+(((pz)*(r00)*(x837)))+(((py)*(r02)*(x843))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x852=((IkReal(139.000000000000))*(sj1));
IkReal x853=((cj0)*(r00));
IkReal x854=((IkReal(1000.00000000000))*(cj4));
IkReal x855=((cj1)*(cj3));
IkReal x856=((IkReal(273.000000000000))*(r02));
IkReal x857=((cj1)*(sj3));
IkReal x858=((IkReal(190.000000000000))*(cj4));
IkReal x859=((IkReal(273.000000000000))*(r01));
IkReal x860=((cj3)*(sj1));
IkReal x861=((cj0)*(px));
IkReal x862=((sj1)*(sj3));
IkReal x863=((sj0)*(x862));
if( IKabs(((gconst2)*(((((sj3)*(x858)))+(((sj0)*(x859)*(x860)))+(((pz)*(x854)*(x857)))+(((IkReal(273.000000000000))*(x853)*(x860)))+(((x852)*(x853)))+(((IkReal(-1.00000000000000))*(x855)*(x856)))+(((IkReal(-1.00000000000000))*(x854)*(x861)*(x862)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((r01)*(sj0)*(x852)))+(((IkReal(-1.00000000000000))*(py)*(x854)*(x863))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x854)*(x860)))+(((pz)*(x854)*(x855)))+(((cj3)*(x858)))+(((IkReal(-273.000000000000))*(x853)*(x862)))+(((x856)*(x857)))+(((IkReal(-1.00000000000000))*(x854)*(x860)*(x861)))+(((IkReal(-1.00000000000000))*(x859)*(x863))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((sj3)*(x858)))+(((sj0)*(x859)*(x860)))+(((pz)*(x854)*(x857)))+(((IkReal(273.000000000000))*(x853)*(x860)))+(((x852)*(x853)))+(((IkReal(-1.00000000000000))*(x855)*(x856)))+(((IkReal(-1.00000000000000))*(x854)*(x861)*(x862)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((r01)*(sj0)*(x852)))+(((IkReal(-1.00000000000000))*(py)*(x854)*(x863)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x854)*(x860)))+(((pz)*(x854)*(x855)))+(((cj3)*(x858)))+(((IkReal(-273.000000000000))*(x853)*(x862)))+(((x856)*(x857)))+(((IkReal(-1.00000000000000))*(x854)*(x860)*(x861)))+(((IkReal(-1.00000000000000))*(x859)*(x863)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x864=IKcos(j2);
IkReal x865=IKsin(j2);
IkReal x866=(pz)*(pz);
IkReal x867=(py)*(py);
IkReal x868=(px)*(px);
IkReal x869=((px)*(sj1));
IkReal x870=((sj0)*(sj1));
IkReal x871=((IkReal(0.0552080000000000))*(sj3));
IkReal x872=((pp)*(r01));
IkReal x873=((cj1)*(sj0));
IkReal x874=((pz)*(r01));
IkReal x875=((IkReal(0.380000000000000))*(sj0));
IkReal x876=((IkReal(1.00000000000000))*(sj1));
IkReal x877=((py)*(r00));
IkReal x878=((pz)*(r02));
IkReal x879=((IkReal(2.00000000000000))*(cj0));
IkReal x880=((IkReal(2.00000000000000))*(py));
IkReal x881=((pz)*(r00));
IkReal x882=((pp)*(r02));
IkReal x883=((IkReal(1.00000000000000))*(cj1));
IkReal x884=((cj0)*(r00));
IkReal x885=((IkReal(0.0361000000000000))*(cj1));
IkReal x886=((py)*(r02));
IkReal x887=((IkReal(0.0361000000000000))*(r01));
IkReal x888=((IkReal(0.0361000000000000))*(sj1));
IkReal x889=((py)*(r01));
IkReal x890=((IkReal(2.00000000000000))*(px));
IkReal x891=((cj1)*(px));
IkReal x892=((IkReal(0.0938500000000000))*(cj3));
IkReal x893=((IkReal(0.380000000000000))*(cj0));
IkReal x894=((px)*(r02));
IkReal x895=((cj4)*(x865));
IkReal x896=((cj4)*(x864));
IkReal x897=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x898=((IkReal(0.139000000000000))*(x865));
IkReal x899=((IkReal(0.139000000000000))*(x864));
IkReal x900=((r00)*(x868));
IkReal x901=((IkReal(0.273000000000000))*(x864));
IkReal x902=((IkReal(0.273000000000000))*(cj3)*(x865));
IkReal x903=((x878)*(x880));
IkReal x904=((IkReal(2.00000000000000))*(r01)*(x867));
IkReal x905=((IkReal(2.00000000000000))*(r02)*(x866));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj3)*(x896)))+(((sj1)*(x884)))+(((cj3)*(x895)))+(((r01)*(x870)))+(((IkReal(-1.00000000000000))*(r02)*(x883))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x883)*(x884)))+(((cj3)*(x896)))+(((IkReal(-1.00000000000000))*(r01)*(x873)))+(((sj3)*(x895)))+(((IkReal(-1.00000000000000))*(r02)*(x876))));
evalcond[2]=((IkReal(-0.190000000000000))+(((cj0)*(x869)))+(((IkReal(-1.00000000000000))*(pz)*(x883)))+(((IkReal(-1.00000000000000))*(x899)))+(((IkReal(-0.273000000000000))*(sj3)*(x865)))+(((py)*(x870)))+(((IkReal(-1.00000000000000))*(cj3)*(x901))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)*(x901)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x883)))+(((IkReal(-1.00000000000000))*(py)*(x873)))+(((IkReal(-1.00000000000000))*(pz)*(x876)))+(x898)+(x902));
evalcond[4]=((((sj4)*(x898)))+(((IkReal(-1.00000000000000))*(x870)*(x881)))+(((r01)*(x891)))+(((IkReal(-1.00000000000000))*(cj0)*(x876)*(x886)))+(((cj0)*(sj1)*(x874)))+(((IkReal(-1.00000000000000))*(x877)*(x883)))+(((IkReal(-1.00000000000000))*(x864)*(x897)))+(((sj4)*(x902)))+(((r02)*(sj0)*(x869))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x876)*(x877)))+(((sj4)*(x899)))+(((r01)*(x869)))+(((cj3)*(sj4)*(x901)))+(((x865)*(x897)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((IkReal(-1.00000000000000))*(x873)*(x894)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj0)*(cj1)*(x886)))+(((IkReal(-1.00000000000000))*(cj0)*(x874)*(x883)))+(((x873)*(x881))));
evalcond[6]=((((IkReal(0.380000000000000))*(x878)))+(((cj1)*(x905)))+(((r02)*(x885)))+(((IkReal(-1.00000000000000))*(x882)*(x883)))+(((x870)*(x872)))+(((IkReal(-1.00000000000000))*(x870)*(x887)))+(((IkReal(-1.00000000000000))*(sj1)*(x879)*(x900)))+(((IkReal(-1.00000000000000))*(x870)*(x903)))+(((IkReal(-1.00000000000000))*(x870)*(x904)))+(((pp)*(sj1)*(x884)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((cj1)*(x874)*(x880)))+(((IkReal(-2.00000000000000))*(sj0)*(x869)*(x877)))+(((x892)*(x895)))+(((cj1)*(x881)*(x890)))+(((IkReal(-1.00000000000000))*(x869)*(x878)*(x879)))+(((IkReal(0.0758940000000000))*(x895)))+(((IkReal(-1.00000000000000))*(x871)*(x896)))+(((IkReal(-1.00000000000000))*(x869)*(x879)*(x889)))+(((IkReal(0.380000000000000))*(x889)))+(((IkReal(-1.00000000000000))*(x884)*(x888))));
evalcond[7]=((((x873)*(x877)*(x890)))+(((cj1)*(x879)*(x900)))+(((IkReal(-1.00000000000000))*(pp)*(x883)*(x884)))+(((IkReal(-1.00000000000000))*(x873)*(x887)))+(((x878)*(x879)*(x891)))+(((x879)*(x889)*(x891)))+(((sj1)*(x874)*(x880)))+(((IkReal(-1.00000000000000))*(x872)*(x873)))+(((IkReal(-1.00000000000000))*(x881)*(x893)))+(((IkReal(2.00000000000000))*(x869)*(x881)))+(((IkReal(-1.00000000000000))*(x876)*(x882)))+(((x873)*(x903)))+(((x873)*(x904)))+(((x893)*(x894)))+(((x892)*(x896)))+(((x871)*(x895)))+(((x875)*(x886)))+(((IkReal(-1.00000000000000))*(x874)*(x875)))+(((IkReal(0.0758940000000000))*(x896)))+(((IkReal(-1.00000000000000))*(r02)*(x888)))+(((IkReal(-1.00000000000000))*(x884)*(x885)))+(((sj1)*(x905))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x906=((IkReal(1.00000000000000))*(sj1));
IkReal x907=((cj1)*(sj3));
IkReal x908=((cj0)*(r00));
IkReal x909=((cj3)*(r02));
IkReal x910=((r01)*(sj0));
IkReal x911=((sj1)*(sj3));
IkReal x912=((cj3)*(x910));
if( IKabs(((gconst1)*(((((cj1)*(x909)))+(((IkReal(-1.00000000000000))*(x906)*(x912)))+(((IkReal(-1.00000000000000))*(cj3)*(x906)*(x908)))+(((x907)*(x908)))+(((r02)*(x911)))+(((x907)*(x910))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj1)*(cj3)*(x908)))+(((x910)*(x911)))+(((IkReal(-1.00000000000000))*(r02)*(x907)))+(((x908)*(x911)))+(((cj1)*(x912)))+(((sj1)*(x909))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((cj1)*(x909)))+(((IkReal(-1.00000000000000))*(x906)*(x912)))+(((IkReal(-1.00000000000000))*(cj3)*(x906)*(x908)))+(((x907)*(x908)))+(((r02)*(x911)))+(((x907)*(x910)))))), ((gconst1)*(((((cj1)*(cj3)*(x908)))+(((x910)*(x911)))+(((IkReal(-1.00000000000000))*(r02)*(x907)))+(((x908)*(x911)))+(((cj1)*(x912)))+(((sj1)*(x909)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x913=IKcos(j2);
IkReal x914=IKsin(j2);
IkReal x915=(pz)*(pz);
IkReal x916=(py)*(py);
IkReal x917=(px)*(px);
IkReal x918=((px)*(sj1));
IkReal x919=((sj0)*(sj1));
IkReal x920=((IkReal(0.0552080000000000))*(sj3));
IkReal x921=((pp)*(r01));
IkReal x922=((cj1)*(sj0));
IkReal x923=((pz)*(r01));
IkReal x924=((IkReal(0.380000000000000))*(sj0));
IkReal x925=((IkReal(1.00000000000000))*(sj1));
IkReal x926=((py)*(r00));
IkReal x927=((pz)*(r02));
IkReal x928=((IkReal(2.00000000000000))*(cj0));
IkReal x929=((IkReal(2.00000000000000))*(py));
IkReal x930=((pz)*(r00));
IkReal x931=((pp)*(r02));
IkReal x932=((IkReal(1.00000000000000))*(cj1));
IkReal x933=((cj0)*(r00));
IkReal x934=((IkReal(0.0361000000000000))*(cj1));
IkReal x935=((py)*(r02));
IkReal x936=((IkReal(0.0361000000000000))*(r01));
IkReal x937=((IkReal(0.0361000000000000))*(sj1));
IkReal x938=((py)*(r01));
IkReal x939=((IkReal(2.00000000000000))*(px));
IkReal x940=((cj1)*(px));
IkReal x941=((IkReal(0.0938500000000000))*(cj3));
IkReal x942=((IkReal(0.380000000000000))*(cj0));
IkReal x943=((px)*(r02));
IkReal x944=((cj4)*(x914));
IkReal x945=((cj4)*(x913));
IkReal x946=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x947=((IkReal(0.139000000000000))*(x914));
IkReal x948=((IkReal(0.139000000000000))*(x913));
IkReal x949=((r00)*(x917));
IkReal x950=((IkReal(0.273000000000000))*(x913));
IkReal x951=((IkReal(0.273000000000000))*(cj3)*(x914));
IkReal x952=((x927)*(x929));
IkReal x953=((IkReal(2.00000000000000))*(r01)*(x916));
IkReal x954=((IkReal(2.00000000000000))*(r02)*(x915));
evalcond[0]=((((IkReal(-1.00000000000000))*(r02)*(x932)))+(((sj1)*(x933)))+(((cj3)*(x944)))+(((IkReal(-1.00000000000000))*(sj3)*(x945)))+(((r01)*(x919))));
evalcond[1]=((((sj3)*(x944)))+(((IkReal(-1.00000000000000))*(r02)*(x925)))+(((cj3)*(x945)))+(((IkReal(-1.00000000000000))*(r01)*(x922)))+(((IkReal(-1.00000000000000))*(x932)*(x933))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x948)))+(((IkReal(-1.00000000000000))*(cj3)*(x950)))+(((cj0)*(x918)))+(((IkReal(-1.00000000000000))*(pz)*(x932)))+(((IkReal(-0.273000000000000))*(sj3)*(x914)))+(((py)*(x919))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x932)))+(((IkReal(-1.00000000000000))*(sj3)*(x950)))+(((IkReal(-1.00000000000000))*(pz)*(x925)))+(((IkReal(-1.00000000000000))*(py)*(x922)))+(x951)+(x947));
evalcond[4]=((((IkReal(-1.00000000000000))*(x913)*(x946)))+(((IkReal(-1.00000000000000))*(x919)*(x930)))+(((sj4)*(x951)))+(((IkReal(-1.00000000000000))*(cj0)*(x925)*(x935)))+(((r01)*(x940)))+(((IkReal(-1.00000000000000))*(x926)*(x932)))+(((sj4)*(x947)))+(((cj0)*(sj1)*(x923)))+(((r02)*(sj0)*(x918))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x925)*(x926)))+(((IkReal(-1.00000000000000))*(x922)*(x943)))+(((IkReal(-1.00000000000000))*(cj0)*(x923)*(x932)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj3)*(sj4)*(x950)))+(((cj0)*(cj1)*(x935)))+(((sj4)*(x948)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((x922)*(x930)))+(((x914)*(x946)))+(((r01)*(x918))));
evalcond[6]=((((x919)*(x921)))+(((cj1)*(x923)*(x929)))+(((pp)*(sj1)*(x933)))+(((IkReal(0.380000000000000))*(x938)))+(((IkReal(0.380000000000000))*(x927)))+(((IkReal(-1.00000000000000))*(x931)*(x932)))+(((IkReal(-1.00000000000000))*(x918)*(x928)*(x938)))+(((IkReal(0.0758940000000000))*(x944)))+(((cj1)*(x954)))+(((x941)*(x944)))+(((cj1)*(x930)*(x939)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-2.00000000000000))*(sj0)*(x918)*(x926)))+(((IkReal(-1.00000000000000))*(x918)*(x927)*(x928)))+(((IkReal(-1.00000000000000))*(x919)*(x936)))+(((IkReal(-1.00000000000000))*(x919)*(x953)))+(((IkReal(-1.00000000000000))*(x919)*(x952)))+(((IkReal(-1.00000000000000))*(x933)*(x937)))+(((IkReal(-1.00000000000000))*(sj1)*(x928)*(x949)))+(((IkReal(-1.00000000000000))*(x920)*(x945)))+(((r02)*(x934))));
evalcond[7]=((((x928)*(x938)*(x940)))+(((IkReal(-1.00000000000000))*(x925)*(x931)))+(((x924)*(x935)))+(((IkReal(-1.00000000000000))*(r02)*(x937)))+(((IkReal(0.0758940000000000))*(x945)))+(((x941)*(x945)))+(((x927)*(x928)*(x940)))+(((IkReal(-1.00000000000000))*(pp)*(x932)*(x933)))+(((x942)*(x943)))+(((sj1)*(x954)))+(((IkReal(2.00000000000000))*(x918)*(x930)))+(((x920)*(x944)))+(((x922)*(x953)))+(((x922)*(x952)))+(((IkReal(-1.00000000000000))*(x933)*(x934)))+(((sj1)*(x923)*(x929)))+(((IkReal(-1.00000000000000))*(x921)*(x922)))+(((cj1)*(x928)*(x949)))+(((IkReal(-1.00000000000000))*(x930)*(x942)))+(((IkReal(-1.00000000000000))*(x923)*(x924)))+(((x922)*(x926)*(x939)))+(((IkReal(-1.00000000000000))*(x922)*(x936))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
